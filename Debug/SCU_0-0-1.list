
SCU_0-0-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066b4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08006864  08006864  00016864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000006c  08006a88  08006a88  00016a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000118  08006af4  08006af4  00016af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000018  08006c0c  08006c0c  00016c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08006c24  08006c24  00016c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000013c  20000000  08006c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  0002013c  2**0
                  CONTENTS
  9 .bss          00004998  2000013c  2000013c  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ad4  20004ad4  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004149b  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007dd6  00000000  00000000  00061607  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001988  00000000  00000000  000693e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001de0  00000000  00000000  0006ad68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000ff32  00000000  00000000  0006cb48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000ef4e  00000000  00000000  0007ca7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0008b9c8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000ba28  00000000  00000000  0008ba44  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0001267f  00000000  00000000  0009746c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001ed  00000000  00000000  000a9aeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000013c 	.word	0x2000013c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800684c 	.word	0x0800684c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000140 	.word	0x20000140
 80001ec:	0800684c 	.word	0x0800684c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f001 b8f6 	b.w	8001408 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <selfrel_offset31>:
 8000510:	6803      	ldr	r3, [r0, #0]
 8000512:	005a      	lsls	r2, r3, #1
 8000514:	bf4c      	ite	mi
 8000516:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800051a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800051e:	4418      	add	r0, r3
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <search_EIT_table>:
 8000524:	b361      	cbz	r1, 8000580 <search_EIT_table+0x5c>
 8000526:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800052a:	f101 3aff 	add.w	sl, r1, #4294967295
 800052e:	4690      	mov	r8, r2
 8000530:	4606      	mov	r6, r0
 8000532:	46d1      	mov	r9, sl
 8000534:	2700      	movs	r7, #0
 8000536:	eb07 0409 	add.w	r4, r7, r9
 800053a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800053e:	1064      	asrs	r4, r4, #1
 8000540:	00e5      	lsls	r5, r4, #3
 8000542:	1971      	adds	r1, r6, r5
 8000544:	4608      	mov	r0, r1
 8000546:	f7ff ffe3 	bl	8000510 <selfrel_offset31>
 800054a:	45a2      	cmp	sl, r4
 800054c:	4683      	mov	fp, r0
 800054e:	f105 0008 	add.w	r0, r5, #8
 8000552:	4430      	add	r0, r6
 8000554:	d009      	beq.n	800056a <search_EIT_table+0x46>
 8000556:	f7ff ffdb 	bl	8000510 <selfrel_offset31>
 800055a:	45c3      	cmp	fp, r8
 800055c:	f100 30ff 	add.w	r0, r0, #4294967295
 8000560:	d805      	bhi.n	800056e <search_EIT_table+0x4a>
 8000562:	4540      	cmp	r0, r8
 8000564:	d209      	bcs.n	800057a <search_EIT_table+0x56>
 8000566:	1c67      	adds	r7, r4, #1
 8000568:	e7e5      	b.n	8000536 <search_EIT_table+0x12>
 800056a:	45c3      	cmp	fp, r8
 800056c:	d905      	bls.n	800057a <search_EIT_table+0x56>
 800056e:	42a7      	cmp	r7, r4
 8000570:	d002      	beq.n	8000578 <search_EIT_table+0x54>
 8000572:	f104 39ff 	add.w	r9, r4, #4294967295
 8000576:	e7de      	b.n	8000536 <search_EIT_table+0x12>
 8000578:	2100      	movs	r1, #0
 800057a:	4608      	mov	r0, r1
 800057c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000580:	4608      	mov	r0, r1
 8000582:	4770      	bx	lr

08000584 <__gnu_unwind_get_pr_addr>:
 8000584:	2801      	cmp	r0, #1
 8000586:	d007      	beq.n	8000598 <__gnu_unwind_get_pr_addr+0x14>
 8000588:	2802      	cmp	r0, #2
 800058a:	d007      	beq.n	800059c <__gnu_unwind_get_pr_addr+0x18>
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <__gnu_unwind_get_pr_addr+0x1c>)
 800058e:	2800      	cmp	r0, #0
 8000590:	bf0c      	ite	eq
 8000592:	4618      	moveq	r0, r3
 8000594:	2000      	movne	r0, #0
 8000596:	4770      	bx	lr
 8000598:	4802      	ldr	r0, [pc, #8]	; (80005a4 <__gnu_unwind_get_pr_addr+0x20>)
 800059a:	4770      	bx	lr
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <__gnu_unwind_get_pr_addr+0x24>)
 800059e:	4770      	bx	lr
 80005a0:	08000c89 	.word	0x08000c89
 80005a4:	08000c8d 	.word	0x08000c8d
 80005a8:	08000c91 	.word	0x08000c91

080005ac <get_eit_entry>:
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	4b24      	ldr	r3, [pc, #144]	; (8000640 <get_eit_entry+0x94>)
 80005b0:	b083      	sub	sp, #12
 80005b2:	4604      	mov	r4, r0
 80005b4:	1e8d      	subs	r5, r1, #2
 80005b6:	b37b      	cbz	r3, 8000618 <get_eit_entry+0x6c>
 80005b8:	a901      	add	r1, sp, #4
 80005ba:	4628      	mov	r0, r5
 80005bc:	f3af 8000 	nop.w
 80005c0:	b320      	cbz	r0, 800060c <get_eit_entry+0x60>
 80005c2:	9901      	ldr	r1, [sp, #4]
 80005c4:	462a      	mov	r2, r5
 80005c6:	f7ff ffad 	bl	8000524 <search_EIT_table>
 80005ca:	4601      	mov	r1, r0
 80005cc:	b1f0      	cbz	r0, 800060c <get_eit_entry+0x60>
 80005ce:	f7ff ff9f 	bl	8000510 <selfrel_offset31>
 80005d2:	684b      	ldr	r3, [r1, #4]
 80005d4:	64a0      	str	r0, [r4, #72]	; 0x48
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d012      	beq.n	8000600 <get_eit_entry+0x54>
 80005da:	2b00      	cmp	r3, #0
 80005dc:	f101 0004 	add.w	r0, r1, #4
 80005e0:	db20      	blt.n	8000624 <get_eit_entry+0x78>
 80005e2:	f7ff ff95 	bl	8000510 <selfrel_offset31>
 80005e6:	2300      	movs	r3, #0
 80005e8:	64e0      	str	r0, [r4, #76]	; 0x4c
 80005ea:	6523      	str	r3, [r4, #80]	; 0x50
 80005ec:	6803      	ldr	r3, [r0, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	db1c      	blt.n	800062c <get_eit_entry+0x80>
 80005f2:	f7ff ff8d 	bl	8000510 <selfrel_offset31>
 80005f6:	2300      	movs	r3, #0
 80005f8:	6120      	str	r0, [r4, #16]
 80005fa:	4618      	mov	r0, r3
 80005fc:	b003      	add	sp, #12
 80005fe:	bd30      	pop	{r4, r5, pc}
 8000600:	2300      	movs	r3, #0
 8000602:	6123      	str	r3, [r4, #16]
 8000604:	2305      	movs	r3, #5
 8000606:	4618      	mov	r0, r3
 8000608:	b003      	add	sp, #12
 800060a:	bd30      	pop	{r4, r5, pc}
 800060c:	2300      	movs	r3, #0
 800060e:	6123      	str	r3, [r4, #16]
 8000610:	2309      	movs	r3, #9
 8000612:	4618      	mov	r0, r3
 8000614:	b003      	add	sp, #12
 8000616:	bd30      	pop	{r4, r5, pc}
 8000618:	490a      	ldr	r1, [pc, #40]	; (8000644 <get_eit_entry+0x98>)
 800061a:	480b      	ldr	r0, [pc, #44]	; (8000648 <get_eit_entry+0x9c>)
 800061c:	1a09      	subs	r1, r1, r0
 800061e:	10c9      	asrs	r1, r1, #3
 8000620:	9101      	str	r1, [sp, #4]
 8000622:	e7cf      	b.n	80005c4 <get_eit_entry+0x18>
 8000624:	2301      	movs	r3, #1
 8000626:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000628:	6523      	str	r3, [r4, #80]	; 0x50
 800062a:	e7df      	b.n	80005ec <get_eit_entry+0x40>
 800062c:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000630:	f7ff ffa8 	bl	8000584 <__gnu_unwind_get_pr_addr>
 8000634:	2800      	cmp	r0, #0
 8000636:	6120      	str	r0, [r4, #16]
 8000638:	bf14      	ite	ne
 800063a:	2300      	movne	r3, #0
 800063c:	2309      	moveq	r3, #9
 800063e:	e7dc      	b.n	80005fa <get_eit_entry+0x4e>
 8000640:	00000000 	.word	0x00000000
 8000644:	08006c0c 	.word	0x08006c0c
 8000648:	08006af4 	.word	0x08006af4

0800064c <restore_non_core_regs>:
 800064c:	6803      	ldr	r3, [r0, #0]
 800064e:	07da      	lsls	r2, r3, #31
 8000650:	b510      	push	{r4, lr}
 8000652:	4604      	mov	r4, r0
 8000654:	d406      	bmi.n	8000664 <restore_non_core_regs+0x18>
 8000656:	079b      	lsls	r3, r3, #30
 8000658:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800065c:	d509      	bpl.n	8000672 <restore_non_core_regs+0x26>
 800065e:	f000 fc51 	bl	8000f04 <__gnu_Unwind_Restore_VFP_D>
 8000662:	6823      	ldr	r3, [r4, #0]
 8000664:	0759      	lsls	r1, r3, #29
 8000666:	d509      	bpl.n	800067c <restore_non_core_regs+0x30>
 8000668:	071a      	lsls	r2, r3, #28
 800066a:	d50e      	bpl.n	800068a <restore_non_core_regs+0x3e>
 800066c:	06db      	lsls	r3, r3, #27
 800066e:	d513      	bpl.n	8000698 <restore_non_core_regs+0x4c>
 8000670:	bd10      	pop	{r4, pc}
 8000672:	f000 fc3f 	bl	8000ef4 <__gnu_Unwind_Restore_VFP>
 8000676:	6823      	ldr	r3, [r4, #0]
 8000678:	0759      	lsls	r1, r3, #29
 800067a:	d4f5      	bmi.n	8000668 <restore_non_core_regs+0x1c>
 800067c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000680:	f000 fc48 	bl	8000f14 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000684:	6823      	ldr	r3, [r4, #0]
 8000686:	071a      	lsls	r2, r3, #28
 8000688:	d4f0      	bmi.n	800066c <restore_non_core_regs+0x20>
 800068a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800068e:	f000 fc49 	bl	8000f24 <__gnu_Unwind_Restore_WMMXD>
 8000692:	6823      	ldr	r3, [r4, #0]
 8000694:	06db      	lsls	r3, r3, #27
 8000696:	d4eb      	bmi.n	8000670 <restore_non_core_regs+0x24>
 8000698:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800069c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006a0:	f000 bc84 	b.w	8000fac <__gnu_Unwind_Restore_WMMXC>

080006a4 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80006a4:	6803      	ldr	r3, [r0, #0]
 80006a6:	b103      	cbz	r3, 80006aa <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80006a8:	4403      	add	r3, r0
 80006aa:	4618      	mov	r0, r3
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <__gnu_unwind_24bit.isra.1>:
 80006b0:	2009      	movs	r0, #9
 80006b2:	4770      	bx	lr

080006b4 <_Unwind_DebugHook>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <unwind_phase2>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	4604      	mov	r4, r0
 80006bc:	460d      	mov	r5, r1
 80006be:	e008      	b.n	80006d2 <unwind_phase2+0x1a>
 80006c0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80006c2:	6163      	str	r3, [r4, #20]
 80006c4:	462a      	mov	r2, r5
 80006c6:	6923      	ldr	r3, [r4, #16]
 80006c8:	4621      	mov	r1, r4
 80006ca:	2001      	movs	r0, #1
 80006cc:	4798      	blx	r3
 80006ce:	2808      	cmp	r0, #8
 80006d0:	d108      	bne.n	80006e4 <unwind_phase2+0x2c>
 80006d2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006d4:	4620      	mov	r0, r4
 80006d6:	f7ff ff69 	bl	80005ac <get_eit_entry>
 80006da:	4606      	mov	r6, r0
 80006dc:	2800      	cmp	r0, #0
 80006de:	d0ef      	beq.n	80006c0 <unwind_phase2+0x8>
 80006e0:	f005 ff34 	bl	800654c <abort>
 80006e4:	2807      	cmp	r0, #7
 80006e6:	d1fb      	bne.n	80006e0 <unwind_phase2+0x28>
 80006e8:	4630      	mov	r0, r6
 80006ea:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006ec:	f7ff ffe2 	bl	80006b4 <_Unwind_DebugHook>
 80006f0:	1d28      	adds	r0, r5, #4
 80006f2:	f000 fbf3 	bl	8000edc <__restore_core_regs>
 80006f6:	bf00      	nop

080006f8 <unwind_phase2_forced>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	1d0c      	adds	r4, r1, #4
 80006fe:	4605      	mov	r5, r0
 8000700:	4692      	mov	sl, r2
 8000702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000704:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000708:	ae03      	add	r6, sp, #12
 800070a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800070c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800070e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000712:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000714:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000718:	ac02      	add	r4, sp, #8
 800071a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800071e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000722:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000726:	2300      	movs	r3, #0
 8000728:	4628      	mov	r0, r5
 800072a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800072c:	6023      	str	r3, [r4, #0]
 800072e:	f7ff ff3d 	bl	80005ac <get_eit_entry>
 8000732:	f1ba 0f00 	cmp.w	sl, #0
 8000736:	4607      	mov	r7, r0
 8000738:	bf14      	ite	ne
 800073a:	260a      	movne	r6, #10
 800073c:	2609      	moveq	r6, #9
 800073e:	b17f      	cbz	r7, 8000760 <unwind_phase2_forced+0x68>
 8000740:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000742:	f046 0110 	orr.w	r1, r6, #16
 8000746:	e88d 0210 	stmia.w	sp, {r4, r9}
 800074a:	462a      	mov	r2, r5
 800074c:	6463      	str	r3, [r4, #68]	; 0x44
 800074e:	2001      	movs	r0, #1
 8000750:	462b      	mov	r3, r5
 8000752:	47c0      	blx	r8
 8000754:	bb78      	cbnz	r0, 80007b6 <unwind_phase2_forced+0xbe>
 8000756:	4638      	mov	r0, r7
 8000758:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800075c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000760:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000762:	616b      	str	r3, [r5, #20]
 8000764:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000768:	4621      	mov	r1, r4
 800076a:	a87a      	add	r0, sp, #488	; 0x1e8
 800076c:	f005 ff38 	bl	80065e0 <memcpy>
 8000770:	692b      	ldr	r3, [r5, #16]
 8000772:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000774:	4629      	mov	r1, r5
 8000776:	4630      	mov	r0, r6
 8000778:	4798      	blx	r3
 800077a:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800077c:	4682      	mov	sl, r0
 800077e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000782:	4631      	mov	r1, r6
 8000784:	6463      	str	r3, [r4, #68]	; 0x44
 8000786:	462a      	mov	r2, r5
 8000788:	462b      	mov	r3, r5
 800078a:	2001      	movs	r0, #1
 800078c:	47c0      	blx	r8
 800078e:	b990      	cbnz	r0, 80007b6 <unwind_phase2_forced+0xbe>
 8000790:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000794:	a97a      	add	r1, sp, #488	; 0x1e8
 8000796:	4620      	mov	r0, r4
 8000798:	f005 ff22 	bl	80065e0 <memcpy>
 800079c:	f1ba 0f08 	cmp.w	sl, #8
 80007a0:	d106      	bne.n	80007b0 <unwind_phase2_forced+0xb8>
 80007a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007a4:	4628      	mov	r0, r5
 80007a6:	f7ff ff01 	bl	80005ac <get_eit_entry>
 80007aa:	2609      	movs	r6, #9
 80007ac:	4607      	mov	r7, r0
 80007ae:	e7c6      	b.n	800073e <unwind_phase2_forced+0x46>
 80007b0:	f1ba 0f07 	cmp.w	sl, #7
 80007b4:	d005      	beq.n	80007c2 <unwind_phase2_forced+0xca>
 80007b6:	2709      	movs	r7, #9
 80007b8:	4638      	mov	r0, r7
 80007ba:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c2:	4638      	mov	r0, r7
 80007c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007c6:	f7ff ff75 	bl	80006b4 <_Unwind_DebugHook>
 80007ca:	a803      	add	r0, sp, #12
 80007cc:	f000 fb86 	bl	8000edc <__restore_core_regs>

080007d0 <_Unwind_GetCFA>:
 80007d0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80007d2:	4770      	bx	lr

080007d4 <__gnu_Unwind_RaiseException>:
 80007d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80007d8:	640b      	str	r3, [r1, #64]	; 0x40
 80007da:	1d0e      	adds	r6, r1, #4
 80007dc:	460f      	mov	r7, r1
 80007de:	4604      	mov	r4, r0
 80007e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007e2:	b0f9      	sub	sp, #484	; 0x1e4
 80007e4:	ad01      	add	r5, sp, #4
 80007e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007f4:	f04f 36ff 	mov.w	r6, #4294967295
 80007f8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80007fc:	9600      	str	r6, [sp, #0]
 80007fe:	e006      	b.n	800080e <__gnu_Unwind_RaiseException+0x3a>
 8000800:	6923      	ldr	r3, [r4, #16]
 8000802:	466a      	mov	r2, sp
 8000804:	4621      	mov	r1, r4
 8000806:	4798      	blx	r3
 8000808:	2808      	cmp	r0, #8
 800080a:	4605      	mov	r5, r0
 800080c:	d108      	bne.n	8000820 <__gnu_Unwind_RaiseException+0x4c>
 800080e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000810:	4620      	mov	r0, r4
 8000812:	f7ff fecb 	bl	80005ac <get_eit_entry>
 8000816:	2800      	cmp	r0, #0
 8000818:	d0f2      	beq.n	8000800 <__gnu_Unwind_RaiseException+0x2c>
 800081a:	2009      	movs	r0, #9
 800081c:	b079      	add	sp, #484	; 0x1e4
 800081e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000820:	4668      	mov	r0, sp
 8000822:	f7ff ff13 	bl	800064c <restore_non_core_regs>
 8000826:	2d06      	cmp	r5, #6
 8000828:	d1f7      	bne.n	800081a <__gnu_Unwind_RaiseException+0x46>
 800082a:	4639      	mov	r1, r7
 800082c:	4620      	mov	r0, r4
 800082e:	f7ff ff43 	bl	80006b8 <unwind_phase2>
 8000832:	bf00      	nop

08000834 <__gnu_Unwind_ForcedUnwind>:
 8000834:	b430      	push	{r4, r5}
 8000836:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000838:	60c1      	str	r1, [r0, #12]
 800083a:	6182      	str	r2, [r0, #24]
 800083c:	4619      	mov	r1, r3
 800083e:	641d      	str	r5, [r3, #64]	; 0x40
 8000840:	2200      	movs	r2, #0
 8000842:	bc30      	pop	{r4, r5}
 8000844:	e758      	b.n	80006f8 <unwind_phase2_forced>
 8000846:	bf00      	nop

08000848 <__gnu_Unwind_Resume>:
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	68c6      	ldr	r6, [r0, #12]
 800084c:	6943      	ldr	r3, [r0, #20]
 800084e:	640b      	str	r3, [r1, #64]	; 0x40
 8000850:	b126      	cbz	r6, 800085c <__gnu_Unwind_Resume+0x14>
 8000852:	2201      	movs	r2, #1
 8000854:	f7ff ff50 	bl	80006f8 <unwind_phase2_forced>
 8000858:	f005 fe78 	bl	800654c <abort>
 800085c:	6903      	ldr	r3, [r0, #16]
 800085e:	460a      	mov	r2, r1
 8000860:	4604      	mov	r4, r0
 8000862:	460d      	mov	r5, r1
 8000864:	4601      	mov	r1, r0
 8000866:	2002      	movs	r0, #2
 8000868:	4798      	blx	r3
 800086a:	2807      	cmp	r0, #7
 800086c:	d007      	beq.n	800087e <__gnu_Unwind_Resume+0x36>
 800086e:	2808      	cmp	r0, #8
 8000870:	d103      	bne.n	800087a <__gnu_Unwind_Resume+0x32>
 8000872:	4629      	mov	r1, r5
 8000874:	4620      	mov	r0, r4
 8000876:	f7ff ff1f 	bl	80006b8 <unwind_phase2>
 800087a:	f005 fe67 	bl	800654c <abort>
 800087e:	4630      	mov	r0, r6
 8000880:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000882:	f7ff ff17 	bl	80006b4 <_Unwind_DebugHook>
 8000886:	1d28      	adds	r0, r5, #4
 8000888:	f000 fb28 	bl	8000edc <__restore_core_regs>

0800088c <__gnu_Unwind_Resume_or_Rethrow>:
 800088c:	68c2      	ldr	r2, [r0, #12]
 800088e:	b11a      	cbz	r2, 8000898 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000890:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000892:	640a      	str	r2, [r1, #64]	; 0x40
 8000894:	2200      	movs	r2, #0
 8000896:	e72f      	b.n	80006f8 <unwind_phase2_forced>
 8000898:	e79c      	b.n	80007d4 <__gnu_Unwind_RaiseException>
 800089a:	bf00      	nop

0800089c <_Unwind_Complete>:
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <_Unwind_DeleteException>:
 80008a0:	6883      	ldr	r3, [r0, #8]
 80008a2:	b113      	cbz	r3, 80008aa <_Unwind_DeleteException+0xa>
 80008a4:	4601      	mov	r1, r0
 80008a6:	2001      	movs	r0, #1
 80008a8:	4718      	bx	r3
 80008aa:	4770      	bx	lr

080008ac <_Unwind_VRS_Get>:
 80008ac:	b500      	push	{lr}
 80008ae:	2904      	cmp	r1, #4
 80008b0:	d807      	bhi.n	80008c2 <_Unwind_VRS_Get+0x16>
 80008b2:	e8df f001 	tbb	[pc, r1]
 80008b6:	0903      	.short	0x0903
 80008b8:	0906      	.short	0x0906
 80008ba:	09          	.byte	0x09
 80008bb:	00          	.byte	0x00
 80008bc:	b90b      	cbnz	r3, 80008c2 <_Unwind_VRS_Get+0x16>
 80008be:	2a0f      	cmp	r2, #15
 80008c0:	d905      	bls.n	80008ce <_Unwind_VRS_Get+0x22>
 80008c2:	2002      	movs	r0, #2
 80008c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80008c8:	2001      	movs	r0, #1
 80008ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80008ce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008d2:	4618      	mov	r0, r3
 80008d4:	6853      	ldr	r3, [r2, #4]
 80008d6:	9a01      	ldr	r2, [sp, #4]
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	f85d fb04 	ldr.w	pc, [sp], #4
 80008de:	bf00      	nop

080008e0 <_Unwind_GetGR>:
 80008e0:	b510      	push	{r4, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	2300      	movs	r3, #0
 80008e6:	ac03      	add	r4, sp, #12
 80008e8:	460a      	mov	r2, r1
 80008ea:	9400      	str	r4, [sp, #0]
 80008ec:	4619      	mov	r1, r3
 80008ee:	f7ff ffdd 	bl	80008ac <_Unwind_VRS_Get>
 80008f2:	9803      	ldr	r0, [sp, #12]
 80008f4:	b004      	add	sp, #16
 80008f6:	bd10      	pop	{r4, pc}

080008f8 <_Unwind_VRS_Set>:
 80008f8:	b500      	push	{lr}
 80008fa:	2904      	cmp	r1, #4
 80008fc:	d807      	bhi.n	800090e <_Unwind_VRS_Set+0x16>
 80008fe:	e8df f001 	tbb	[pc, r1]
 8000902:	0903      	.short	0x0903
 8000904:	0906      	.short	0x0906
 8000906:	09          	.byte	0x09
 8000907:	00          	.byte	0x00
 8000908:	b90b      	cbnz	r3, 800090e <_Unwind_VRS_Set+0x16>
 800090a:	2a0f      	cmp	r2, #15
 800090c:	d905      	bls.n	800091a <_Unwind_VRS_Set+0x22>
 800090e:	2002      	movs	r0, #2
 8000910:	f85d fb04 	ldr.w	pc, [sp], #4
 8000914:	2001      	movs	r0, #1
 8000916:	f85d fb04 	ldr.w	pc, [sp], #4
 800091a:	9901      	ldr	r1, [sp, #4]
 800091c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000920:	6809      	ldr	r1, [r1, #0]
 8000922:	6051      	str	r1, [r2, #4]
 8000924:	4618      	mov	r0, r3
 8000926:	f85d fb04 	ldr.w	pc, [sp], #4
 800092a:	bf00      	nop

0800092c <_Unwind_SetGR>:
 800092c:	b510      	push	{r4, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	ac04      	add	r4, sp, #16
 8000932:	2300      	movs	r3, #0
 8000934:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000938:	460a      	mov	r2, r1
 800093a:	9400      	str	r4, [sp, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f7ff ffdb 	bl	80008f8 <_Unwind_VRS_Set>
 8000942:	b004      	add	sp, #16
 8000944:	bd10      	pop	{r4, pc}
 8000946:	bf00      	nop

08000948 <__gnu_Unwind_Backtrace>:
 8000948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	1d15      	adds	r5, r2, #4
 8000950:	4607      	mov	r7, r0
 8000952:	460e      	mov	r6, r1
 8000954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000956:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800095a:	ac17      	add	r4, sp, #92	; 0x5c
 800095c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000966:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800096a:	f04f 35ff 	mov.w	r5, #4294967295
 800096e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000972:	9516      	str	r5, [sp, #88]	; 0x58
 8000974:	e010      	b.n	8000998 <__gnu_Unwind_Backtrace+0x50>
 8000976:	a816      	add	r0, sp, #88	; 0x58
 8000978:	f7ff ffd8 	bl	800092c <_Unwind_SetGR>
 800097c:	4631      	mov	r1, r6
 800097e:	a816      	add	r0, sp, #88	; 0x58
 8000980:	47b8      	blx	r7
 8000982:	aa16      	add	r2, sp, #88	; 0x58
 8000984:	4669      	mov	r1, sp
 8000986:	b978      	cbnz	r0, 80009a8 <__gnu_Unwind_Backtrace+0x60>
 8000988:	9b04      	ldr	r3, [sp, #16]
 800098a:	2008      	movs	r0, #8
 800098c:	4798      	blx	r3
 800098e:	2805      	cmp	r0, #5
 8000990:	4604      	mov	r4, r0
 8000992:	d00a      	beq.n	80009aa <__gnu_Unwind_Backtrace+0x62>
 8000994:	2809      	cmp	r0, #9
 8000996:	d007      	beq.n	80009a8 <__gnu_Unwind_Backtrace+0x60>
 8000998:	9926      	ldr	r1, [sp, #152]	; 0x98
 800099a:	4668      	mov	r0, sp
 800099c:	f7ff fe06 	bl	80005ac <get_eit_entry>
 80009a0:	466a      	mov	r2, sp
 80009a2:	210c      	movs	r1, #12
 80009a4:	2800      	cmp	r0, #0
 80009a6:	d0e6      	beq.n	8000976 <__gnu_Unwind_Backtrace+0x2e>
 80009a8:	2409      	movs	r4, #9
 80009aa:	a816      	add	r0, sp, #88	; 0x58
 80009ac:	f7ff fe4e 	bl	800064c <restore_non_core_regs>
 80009b0:	4620      	mov	r0, r4
 80009b2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80009b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009b8 <__gnu_unwind_pr_common>:
 80009b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009bc:	460d      	mov	r5, r1
 80009be:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80009c0:	b08b      	sub	sp, #44	; 0x2c
 80009c2:	1d0c      	adds	r4, r1, #4
 80009c4:	6809      	ldr	r1, [r1, #0]
 80009c6:	9107      	str	r1, [sp, #28]
 80009c8:	4691      	mov	r9, r2
 80009ca:	9408      	str	r4, [sp, #32]
 80009cc:	f000 0b03 	and.w	fp, r0, #3
 80009d0:	461e      	mov	r6, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d160      	bne.n	8000a98 <__gnu_unwind_pr_common+0xe0>
 80009d6:	0209      	lsls	r1, r1, #8
 80009d8:	2303      	movs	r3, #3
 80009da:	9107      	str	r1, [sp, #28]
 80009dc:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80009e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80009e4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80009e6:	f1bb 0f02 	cmp.w	fp, #2
 80009ea:	bf08      	it	eq
 80009ec:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80009ee:	f013 0301 	ands.w	r3, r3, #1
 80009f2:	d140      	bne.n	8000a76 <__gnu_unwind_pr_common+0xbe>
 80009f4:	9301      	str	r3, [sp, #4]
 80009f6:	f000 0308 	and.w	r3, r0, #8
 80009fa:	9303      	str	r3, [sp, #12]
 80009fc:	f8d4 8000 	ldr.w	r8, [r4]
 8000a00:	f1b8 0f00 	cmp.w	r8, #0
 8000a04:	d039      	beq.n	8000a7a <__gnu_unwind_pr_common+0xc2>
 8000a06:	2e02      	cmp	r6, #2
 8000a08:	d043      	beq.n	8000a92 <__gnu_unwind_pr_common+0xda>
 8000a0a:	f8b4 8000 	ldrh.w	r8, [r4]
 8000a0e:	8867      	ldrh	r7, [r4, #2]
 8000a10:	3404      	adds	r4, #4
 8000a12:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a14:	f027 0a01 	bic.w	sl, r7, #1
 8000a18:	210f      	movs	r1, #15
 8000a1a:	4648      	mov	r0, r9
 8000a1c:	449a      	add	sl, r3
 8000a1e:	f7ff ff5f 	bl	80008e0 <_Unwind_GetGR>
 8000a22:	4582      	cmp	sl, r0
 8000a24:	d833      	bhi.n	8000a8e <__gnu_unwind_pr_common+0xd6>
 8000a26:	f028 0301 	bic.w	r3, r8, #1
 8000a2a:	449a      	add	sl, r3
 8000a2c:	4550      	cmp	r0, sl
 8000a2e:	bf2c      	ite	cs
 8000a30:	2000      	movcs	r0, #0
 8000a32:	2001      	movcc	r0, #1
 8000a34:	007f      	lsls	r7, r7, #1
 8000a36:	f007 0702 	and.w	r7, r7, #2
 8000a3a:	f008 0801 	and.w	r8, r8, #1
 8000a3e:	ea47 0708 	orr.w	r7, r7, r8
 8000a42:	2f01      	cmp	r7, #1
 8000a44:	d03e      	beq.n	8000ac4 <__gnu_unwind_pr_common+0x10c>
 8000a46:	d335      	bcc.n	8000ab4 <__gnu_unwind_pr_common+0xfc>
 8000a48:	2f02      	cmp	r7, #2
 8000a4a:	d11c      	bne.n	8000a86 <__gnu_unwind_pr_common+0xce>
 8000a4c:	6823      	ldr	r3, [r4, #0]
 8000a4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000a52:	9202      	str	r2, [sp, #8]
 8000a54:	f1bb 0f00 	cmp.w	fp, #0
 8000a58:	d176      	bne.n	8000b48 <__gnu_unwind_pr_common+0x190>
 8000a5a:	b128      	cbz	r0, 8000a68 <__gnu_unwind_pr_common+0xb0>
 8000a5c:	9903      	ldr	r1, [sp, #12]
 8000a5e:	2900      	cmp	r1, #0
 8000a60:	d07e      	beq.n	8000b60 <__gnu_unwind_pr_common+0x1a8>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	f000 80a6 	beq.w	8000bb4 <__gnu_unwind_pr_common+0x1fc>
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db77      	blt.n	8000b5c <__gnu_unwind_pr_common+0x1a4>
 8000a6c:	9b02      	ldr	r3, [sp, #8]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000a74:	e7c2      	b.n	80009fc <__gnu_unwind_pr_common+0x44>
 8000a76:	2300      	movs	r3, #0
 8000a78:	9301      	str	r3, [sp, #4]
 8000a7a:	2e02      	cmp	r6, #2
 8000a7c:	dd3e      	ble.n	8000afc <__gnu_unwind_pr_common+0x144>
 8000a7e:	f7ff fe17 	bl	80006b0 <__gnu_unwind_24bit.isra.1>
 8000a82:	2800      	cmp	r0, #0
 8000a84:	d040      	beq.n	8000b08 <__gnu_unwind_pr_common+0x150>
 8000a86:	2009      	movs	r0, #9
 8000a88:	b00b      	add	sp, #44	; 0x2c
 8000a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a8e:	2000      	movs	r0, #0
 8000a90:	e7d0      	b.n	8000a34 <__gnu_unwind_pr_common+0x7c>
 8000a92:	6867      	ldr	r7, [r4, #4]
 8000a94:	3408      	adds	r4, #8
 8000a96:	e7bc      	b.n	8000a12 <__gnu_unwind_pr_common+0x5a>
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	dca3      	bgt.n	80009e4 <__gnu_unwind_pr_common+0x2c>
 8000a9c:	0c0b      	lsrs	r3, r1, #16
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	0409      	lsls	r1, r1, #16
 8000aa2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000aac:	9107      	str	r1, [sp, #28]
 8000aae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000ab2:	e797      	b.n	80009e4 <__gnu_unwind_pr_common+0x2c>
 8000ab4:	f1bb 0f00 	cmp.w	fp, #0
 8000ab8:	d002      	beq.n	8000ac0 <__gnu_unwind_pr_common+0x108>
 8000aba:	2800      	cmp	r0, #0
 8000abc:	f040 80bd 	bne.w	8000c3a <__gnu_unwind_pr_common+0x282>
 8000ac0:	3404      	adds	r4, #4
 8000ac2:	e79b      	b.n	80009fc <__gnu_unwind_pr_common+0x44>
 8000ac4:	f1bb 0f00 	cmp.w	fp, #0
 8000ac8:	d125      	bne.n	8000b16 <__gnu_unwind_pr_common+0x15e>
 8000aca:	b1a8      	cbz	r0, 8000af8 <__gnu_unwind_pr_common+0x140>
 8000acc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000ad0:	1c99      	adds	r1, r3, #2
 8000ad2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000ad6:	d0d6      	beq.n	8000a86 <__gnu_unwind_pr_common+0xce>
 8000ad8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000adc:	3301      	adds	r3, #1
 8000ade:	9106      	str	r1, [sp, #24]
 8000ae0:	f000 80a3 	beq.w	8000c2a <__gnu_unwind_pr_common+0x272>
 8000ae4:	1d20      	adds	r0, r4, #4
 8000ae6:	f7ff fddd 	bl	80006a4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000aea:	ab06      	add	r3, sp, #24
 8000aec:	4601      	mov	r1, r0
 8000aee:	4628      	mov	r0, r5
 8000af0:	f3af 8000 	nop.w
 8000af4:	2800      	cmp	r0, #0
 8000af6:	d177      	bne.n	8000be8 <__gnu_unwind_pr_common+0x230>
 8000af8:	3408      	adds	r4, #8
 8000afa:	e77f      	b.n	80009fc <__gnu_unwind_pr_common+0x44>
 8000afc:	a907      	add	r1, sp, #28
 8000afe:	4648      	mov	r0, r9
 8000b00:	f000 faee 	bl	80010e0 <__gnu_unwind_execute>
 8000b04:	2800      	cmp	r0, #0
 8000b06:	d1be      	bne.n	8000a86 <__gnu_unwind_pr_common+0xce>
 8000b08:	9b01      	ldr	r3, [sp, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d15c      	bne.n	8000bc8 <__gnu_unwind_pr_common+0x210>
 8000b0e:	2008      	movs	r0, #8
 8000b10:	b00b      	add	sp, #44	; 0x2c
 8000b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b16:	210d      	movs	r1, #13
 8000b18:	4648      	mov	r0, r9
 8000b1a:	6a2f      	ldr	r7, [r5, #32]
 8000b1c:	f7ff fee0 	bl	80008e0 <_Unwind_GetGR>
 8000b20:	4287      	cmp	r7, r0
 8000b22:	d1e9      	bne.n	8000af8 <__gnu_unwind_pr_common+0x140>
 8000b24:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b26:	429c      	cmp	r4, r3
 8000b28:	d1e6      	bne.n	8000af8 <__gnu_unwind_pr_common+0x140>
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	f7ff fcf0 	bl	8000510 <selfrel_offset31>
 8000b30:	210f      	movs	r1, #15
 8000b32:	4602      	mov	r2, r0
 8000b34:	4648      	mov	r0, r9
 8000b36:	f7ff fef9 	bl	800092c <_Unwind_SetGR>
 8000b3a:	4648      	mov	r0, r9
 8000b3c:	462a      	mov	r2, r5
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f7ff fef4 	bl	800092c <_Unwind_SetGR>
 8000b44:	2007      	movs	r0, #7
 8000b46:	e79f      	b.n	8000a88 <__gnu_unwind_pr_common+0xd0>
 8000b48:	210d      	movs	r1, #13
 8000b4a:	4648      	mov	r0, r9
 8000b4c:	6a2f      	ldr	r7, [r5, #32]
 8000b4e:	f7ff fec7 	bl	80008e0 <_Unwind_GetGR>
 8000b52:	4287      	cmp	r7, r0
 8000b54:	d058      	beq.n	8000c08 <__gnu_unwind_pr_common+0x250>
 8000b56:	6823      	ldr	r3, [r4, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	da87      	bge.n	8000a6c <__gnu_unwind_pr_common+0xb4>
 8000b5c:	3404      	adds	r4, #4
 8000b5e:	e785      	b.n	8000a6c <__gnu_unwind_pr_common+0xb4>
 8000b60:	9b02      	ldr	r3, [sp, #8]
 8000b62:	b33b      	cbz	r3, 8000bb4 <__gnu_unwind_pr_common+0x1fc>
 8000b64:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000b68:	1d27      	adds	r7, r4, #4
 8000b6a:	f8cd b010 	str.w	fp, [sp, #16]
 8000b6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000b72:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000b76:	9605      	str	r6, [sp, #20]
 8000b78:	46a3      	mov	fp, r4
 8000b7a:	461c      	mov	r4, r3
 8000b7c:	e002      	b.n	8000b84 <__gnu_unwind_pr_common+0x1cc>
 8000b7e:	45b2      	cmp	sl, r6
 8000b80:	46b0      	mov	r8, r6
 8000b82:	d016      	beq.n	8000bb2 <__gnu_unwind_pr_common+0x1fa>
 8000b84:	4638      	mov	r0, r7
 8000b86:	9406      	str	r4, [sp, #24]
 8000b88:	f7ff fd8c 	bl	80006a4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b8c:	ab06      	add	r3, sp, #24
 8000b8e:	4601      	mov	r1, r0
 8000b90:	2200      	movs	r2, #0
 8000b92:	4628      	mov	r0, r5
 8000b94:	f3af 8000 	nop.w
 8000b98:	f108 0601 	add.w	r6, r8, #1
 8000b9c:	3704      	adds	r7, #4
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	d0ed      	beq.n	8000b7e <__gnu_unwind_pr_common+0x1c6>
 8000ba2:	9b02      	ldr	r3, [sp, #8]
 8000ba4:	9e05      	ldr	r6, [sp, #20]
 8000ba6:	4543      	cmp	r3, r8
 8000ba8:	465c      	mov	r4, fp
 8000baa:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000bae:	d1d2      	bne.n	8000b56 <__gnu_unwind_pr_common+0x19e>
 8000bb0:	e000      	b.n	8000bb4 <__gnu_unwind_pr_common+0x1fc>
 8000bb2:	465c      	mov	r4, fp
 8000bb4:	4648      	mov	r0, r9
 8000bb6:	210d      	movs	r1, #13
 8000bb8:	f7ff fe92 	bl	80008e0 <_Unwind_GetGR>
 8000bbc:	9b06      	ldr	r3, [sp, #24]
 8000bbe:	6228      	str	r0, [r5, #32]
 8000bc0:	62ac      	str	r4, [r5, #40]	; 0x28
 8000bc2:	626b      	str	r3, [r5, #36]	; 0x24
 8000bc4:	2006      	movs	r0, #6
 8000bc6:	e75f      	b.n	8000a88 <__gnu_unwind_pr_common+0xd0>
 8000bc8:	210f      	movs	r1, #15
 8000bca:	4648      	mov	r0, r9
 8000bcc:	f7ff fe88 	bl	80008e0 <_Unwind_GetGR>
 8000bd0:	210e      	movs	r1, #14
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	4648      	mov	r0, r9
 8000bd6:	f7ff fea9 	bl	800092c <_Unwind_SetGR>
 8000bda:	4648      	mov	r0, r9
 8000bdc:	4a29      	ldr	r2, [pc, #164]	; (8000c84 <__gnu_unwind_pr_common+0x2cc>)
 8000bde:	210f      	movs	r1, #15
 8000be0:	f7ff fea4 	bl	800092c <_Unwind_SetGR>
 8000be4:	2007      	movs	r0, #7
 8000be6:	e74f      	b.n	8000a88 <__gnu_unwind_pr_common+0xd0>
 8000be8:	4607      	mov	r7, r0
 8000bea:	210d      	movs	r1, #13
 8000bec:	4648      	mov	r0, r9
 8000bee:	f7ff fe77 	bl	80008e0 <_Unwind_GetGR>
 8000bf2:	2f02      	cmp	r7, #2
 8000bf4:	6228      	str	r0, [r5, #32]
 8000bf6:	d11d      	bne.n	8000c34 <__gnu_unwind_pr_common+0x27c>
 8000bf8:	462b      	mov	r3, r5
 8000bfa:	9a06      	ldr	r2, [sp, #24]
 8000bfc:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000c00:	626b      	str	r3, [r5, #36]	; 0x24
 8000c02:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c04:	2006      	movs	r0, #6
 8000c06:	e73f      	b.n	8000a88 <__gnu_unwind_pr_common+0xd0>
 8000c08:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c0a:	429c      	cmp	r4, r3
 8000c0c:	d1a3      	bne.n	8000b56 <__gnu_unwind_pr_common+0x19e>
 8000c0e:	2204      	movs	r2, #4
 8000c10:	2700      	movs	r7, #0
 8000c12:	18a3      	adds	r3, r4, r2
 8000c14:	9902      	ldr	r1, [sp, #8]
 8000c16:	62a9      	str	r1, [r5, #40]	; 0x28
 8000c18:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000c1a:	632a      	str	r2, [r5, #48]	; 0x30
 8000c1c:	636b      	str	r3, [r5, #52]	; 0x34
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	42bb      	cmp	r3, r7
 8000c22:	db1d      	blt.n	8000c60 <__gnu_unwind_pr_common+0x2a8>
 8000c24:	2301      	movs	r3, #1
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	e720      	b.n	8000a6c <__gnu_unwind_pr_common+0xb4>
 8000c2a:	4648      	mov	r0, r9
 8000c2c:	210d      	movs	r1, #13
 8000c2e:	f7ff fe57 	bl	80008e0 <_Unwind_GetGR>
 8000c32:	6228      	str	r0, [r5, #32]
 8000c34:	9b06      	ldr	r3, [sp, #24]
 8000c36:	626b      	str	r3, [r5, #36]	; 0x24
 8000c38:	e7e3      	b.n	8000c02 <__gnu_unwind_pr_common+0x24a>
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f7ff fc68 	bl	8000510 <selfrel_offset31>
 8000c40:	3404      	adds	r4, #4
 8000c42:	4606      	mov	r6, r0
 8000c44:	63ac      	str	r4, [r5, #56]	; 0x38
 8000c46:	4628      	mov	r0, r5
 8000c48:	f3af 8000 	nop.w
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	f43f af1a 	beq.w	8000a86 <__gnu_unwind_pr_common+0xce>
 8000c52:	4648      	mov	r0, r9
 8000c54:	4632      	mov	r2, r6
 8000c56:	210f      	movs	r1, #15
 8000c58:	f7ff fe68 	bl	800092c <_Unwind_SetGR>
 8000c5c:	2007      	movs	r0, #7
 8000c5e:	e713      	b.n	8000a88 <__gnu_unwind_pr_common+0xd0>
 8000c60:	4608      	mov	r0, r1
 8000c62:	3001      	adds	r0, #1
 8000c64:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c68:	f7ff fc52 	bl	8000510 <selfrel_offset31>
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	4602      	mov	r2, r0
 8000c70:	4648      	mov	r0, r9
 8000c72:	f7ff fe5b 	bl	800092c <_Unwind_SetGR>
 8000c76:	4648      	mov	r0, r9
 8000c78:	462a      	mov	r2, r5
 8000c7a:	4639      	mov	r1, r7
 8000c7c:	f7ff fe56 	bl	800092c <_Unwind_SetGR>
 8000c80:	2007      	movs	r0, #7
 8000c82:	e701      	b.n	8000a88 <__gnu_unwind_pr_common+0xd0>
 8000c84:	00000000 	.word	0x00000000

08000c88 <__aeabi_unwind_cpp_pr0>:
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e695      	b.n	80009b8 <__gnu_unwind_pr_common>

08000c8c <__aeabi_unwind_cpp_pr1>:
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e693      	b.n	80009b8 <__gnu_unwind_pr_common>

08000c90 <__aeabi_unwind_cpp_pr2>:
 8000c90:	2302      	movs	r3, #2
 8000c92:	e691      	b.n	80009b8 <__gnu_unwind_pr_common>

08000c94 <_Unwind_VRS_Pop>:
 8000c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c96:	4604      	mov	r4, r0
 8000c98:	b0c5      	sub	sp, #276	; 0x114
 8000c9a:	2904      	cmp	r1, #4
 8000c9c:	d80d      	bhi.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000c9e:	e8df f001 	tbb	[pc, r1]
 8000ca2:	0353      	.short	0x0353
 8000ca4:	310c      	.short	0x310c
 8000ca6:	0f          	.byte	0x0f
 8000ca7:	00          	.byte	0x00
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000cae:	b295      	uxth	r5, r2
 8000cb0:	d162      	bne.n	8000d78 <_Unwind_VRS_Pop+0xe4>
 8000cb2:	1972      	adds	r2, r6, r5
 8000cb4:	2a10      	cmp	r2, #16
 8000cb6:	f240 809b 	bls.w	8000df0 <_Unwind_VRS_Pop+0x15c>
 8000cba:	2002      	movs	r0, #2
 8000cbc:	b045      	add	sp, #276	; 0x114
 8000cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1fa      	bne.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000cc4:	2a10      	cmp	r2, #16
 8000cc6:	d8f8      	bhi.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000cc8:	6823      	ldr	r3, [r4, #0]
 8000cca:	06d8      	lsls	r0, r3, #27
 8000ccc:	f100 80c6 	bmi.w	8000e5c <_Unwind_VRS_Pop+0x1c8>
 8000cd0:	ae22      	add	r6, sp, #136	; 0x88
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	9201      	str	r2, [sp, #4]
 8000cd6:	f000 f973 	bl	8000fc0 <__gnu_Unwind_Save_WMMXC>
 8000cda:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000cdc:	9a01      	ldr	r2, [sp, #4]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	2501      	movs	r5, #1
 8000ce2:	fa05 f103 	lsl.w	r1, r5, r3
 8000ce6:	4211      	tst	r1, r2
 8000ce8:	d003      	beq.n	8000cf2 <_Unwind_VRS_Pop+0x5e>
 8000cea:	6801      	ldr	r1, [r0, #0]
 8000cec:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000cf0:	3004      	adds	r0, #4
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	d1f4      	bne.n	8000ce2 <_Unwind_VRS_Pop+0x4e>
 8000cf8:	63a0      	str	r0, [r4, #56]	; 0x38
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	f000 f956 	bl	8000fac <__gnu_Unwind_Restore_WMMXC>
 8000d00:	2000      	movs	r0, #0
 8000d02:	e7db      	b.n	8000cbc <_Unwind_VRS_Pop+0x28>
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d1d8      	bne.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000d08:	0c15      	lsrs	r5, r2, #16
 8000d0a:	b297      	uxth	r7, r2
 8000d0c:	19eb      	adds	r3, r5, r7
 8000d0e:	2b10      	cmp	r3, #16
 8000d10:	d8d3      	bhi.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000d12:	6823      	ldr	r3, [r4, #0]
 8000d14:	071e      	lsls	r6, r3, #28
 8000d16:	f100 80b5 	bmi.w	8000e84 <_Unwind_VRS_Pop+0x1f0>
 8000d1a:	ae22      	add	r6, sp, #136	; 0x88
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	f000 f923 	bl	8000f68 <__gnu_Unwind_Save_WMMXD>
 8000d22:	00ed      	lsls	r5, r5, #3
 8000d24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d26:	b14f      	cbz	r7, 8000d3c <_Unwind_VRS_Pop+0xa8>
 8000d28:	3d04      	subs	r5, #4
 8000d2a:	1971      	adds	r1, r6, r5
 8000d2c:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000d30:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d34:	f841 2f04 	str.w	r2, [r1, #4]!
 8000d38:	4283      	cmp	r3, r0
 8000d3a:	d1f9      	bne.n	8000d30 <_Unwind_VRS_Pop+0x9c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	63a3      	str	r3, [r4, #56]	; 0x38
 8000d40:	f000 f8f0 	bl	8000f24 <__gnu_Unwind_Restore_WMMXD>
 8000d44:	2000      	movs	r0, #0
 8000d46:	e7b9      	b.n	8000cbc <_Unwind_VRS_Pop+0x28>
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1b6      	bne.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000d4c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000d4e:	b297      	uxth	r7, r2
 8000d50:	1d20      	adds	r0, r4, #4
 8000d52:	2601      	movs	r6, #1
 8000d54:	fa06 f103 	lsl.w	r1, r6, r3
 8000d58:	4239      	tst	r1, r7
 8000d5a:	f103 0301 	add.w	r3, r3, #1
 8000d5e:	d002      	beq.n	8000d66 <_Unwind_VRS_Pop+0xd2>
 8000d60:	6829      	ldr	r1, [r5, #0]
 8000d62:	6001      	str	r1, [r0, #0]
 8000d64:	3504      	adds	r5, #4
 8000d66:	2b10      	cmp	r3, #16
 8000d68:	f100 0004 	add.w	r0, r0, #4
 8000d6c:	d1f2      	bne.n	8000d54 <_Unwind_VRS_Pop+0xc0>
 8000d6e:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000d72:	d13b      	bne.n	8000dec <_Unwind_VRS_Pop+0x158>
 8000d74:	63a5      	str	r5, [r4, #56]	; 0x38
 8000d76:	e7a1      	b.n	8000cbc <_Unwind_VRS_Pop+0x28>
 8000d78:	2b05      	cmp	r3, #5
 8000d7a:	d19e      	bne.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000d7c:	1977      	adds	r7, r6, r5
 8000d7e:	2f20      	cmp	r7, #32
 8000d80:	d89b      	bhi.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000d82:	2e0f      	cmp	r6, #15
 8000d84:	d966      	bls.n	8000e54 <_Unwind_VRS_Pop+0x1c0>
 8000d86:	462f      	mov	r7, r5
 8000d88:	2d00      	cmp	r5, #0
 8000d8a:	d13a      	bne.n	8000e02 <_Unwind_VRS_Pop+0x16e>
 8000d8c:	462a      	mov	r2, r5
 8000d8e:	2700      	movs	r7, #0
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d94:	dd72      	ble.n	8000e7c <_Unwind_VRS_Pop+0x1e8>
 8000d96:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000d9a:	4601      	mov	r1, r0
 8000d9c:	a844      	add	r0, sp, #272	; 0x110
 8000d9e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000da2:	388c      	subs	r0, #140	; 0x8c
 8000da4:	f851 5b04 	ldr.w	r5, [r1], #4
 8000da8:	f840 5f04 	str.w	r5, [r0, #4]!
 8000dac:	4291      	cmp	r1, r2
 8000dae:	d1f9      	bne.n	8000da4 <_Unwind_VRS_Pop+0x110>
 8000db0:	4608      	mov	r0, r1
 8000db2:	b197      	cbz	r7, 8000dda <_Unwind_VRS_Pop+0x146>
 8000db4:	2e10      	cmp	r6, #16
 8000db6:	4632      	mov	r2, r6
 8000db8:	a944      	add	r1, sp, #272	; 0x110
 8000dba:	bf38      	it	cc
 8000dbc:	2210      	movcc	r2, #16
 8000dbe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000dc2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000dc6:	0079      	lsls	r1, r7, #1
 8000dc8:	3a04      	subs	r2, #4
 8000dca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000dce:	f850 5b04 	ldr.w	r5, [r0], #4
 8000dd2:	f842 5f04 	str.w	r5, [r2, #4]!
 8000dd6:	4288      	cmp	r0, r1
 8000dd8:	d1f9      	bne.n	8000dce <_Unwind_VRS_Pop+0x13a>
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d048      	beq.n	8000e70 <_Unwind_VRS_Pop+0x1dc>
 8000dde:	2e0f      	cmp	r6, #15
 8000de0:	63a1      	str	r1, [r4, #56]	; 0x38
 8000de2:	d933      	bls.n	8000e4c <_Unwind_VRS_Pop+0x1b8>
 8000de4:	b117      	cbz	r7, 8000dec <_Unwind_VRS_Pop+0x158>
 8000de6:	a802      	add	r0, sp, #8
 8000de8:	f000 f894 	bl	8000f14 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000dec:	2000      	movs	r0, #0
 8000dee:	e765      	b.n	8000cbc <_Unwind_VRS_Pop+0x28>
 8000df0:	2e0f      	cmp	r6, #15
 8000df2:	f63f af62 	bhi.w	8000cba <_Unwind_VRS_Pop+0x26>
 8000df6:	2700      	movs	r7, #0
 8000df8:	6822      	ldr	r2, [r4, #0]
 8000dfa:	07d1      	lsls	r1, r2, #31
 8000dfc:	d417      	bmi.n	8000e2e <_Unwind_VRS_Pop+0x19a>
 8000dfe:	2f00      	cmp	r7, #0
 8000e00:	d060      	beq.n	8000ec4 <_Unwind_VRS_Pop+0x230>
 8000e02:	6822      	ldr	r2, [r4, #0]
 8000e04:	0751      	lsls	r1, r2, #29
 8000e06:	d445      	bmi.n	8000e94 <_Unwind_VRS_Pop+0x200>
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d04d      	beq.n	8000ea8 <_Unwind_VRS_Pop+0x214>
 8000e0c:	2e0f      	cmp	r6, #15
 8000e0e:	d806      	bhi.n	8000e1e <_Unwind_VRS_Pop+0x18a>
 8000e10:	a822      	add	r0, sp, #136	; 0x88
 8000e12:	9301      	str	r3, [sp, #4]
 8000e14:	f000 f87a 	bl	8000f0c <__gnu_Unwind_Save_VFP_D>
 8000e18:	9b01      	ldr	r3, [sp, #4]
 8000e1a:	2f00      	cmp	r7, #0
 8000e1c:	d0b6      	beq.n	8000d8c <_Unwind_VRS_Pop+0xf8>
 8000e1e:	a802      	add	r0, sp, #8
 8000e20:	9301      	str	r3, [sp, #4]
 8000e22:	f000 f87b 	bl	8000f1c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e26:	9b01      	ldr	r3, [sp, #4]
 8000e28:	f1c6 0210 	rsb	r2, r6, #16
 8000e2c:	e7b0      	b.n	8000d90 <_Unwind_VRS_Pop+0xfc>
 8000e2e:	f022 0101 	bic.w	r1, r2, #1
 8000e32:	2b05      	cmp	r3, #5
 8000e34:	6021      	str	r1, [r4, #0]
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	4620      	mov	r0, r4
 8000e3a:	d03b      	beq.n	8000eb4 <_Unwind_VRS_Pop+0x220>
 8000e3c:	f022 0203 	bic.w	r2, r2, #3
 8000e40:	f840 2b48 	str.w	r2, [r0], #72
 8000e44:	f000 f85a 	bl	8000efc <__gnu_Unwind_Save_VFP>
 8000e48:	9b01      	ldr	r3, [sp, #4]
 8000e4a:	e7d8      	b.n	8000dfe <_Unwind_VRS_Pop+0x16a>
 8000e4c:	a822      	add	r0, sp, #136	; 0x88
 8000e4e:	f000 f859 	bl	8000f04 <__gnu_Unwind_Restore_VFP_D>
 8000e52:	e7c7      	b.n	8000de4 <_Unwind_VRS_Pop+0x150>
 8000e54:	2f10      	cmp	r7, #16
 8000e56:	d9ce      	bls.n	8000df6 <_Unwind_VRS_Pop+0x162>
 8000e58:	3f10      	subs	r7, #16
 8000e5a:	e7cd      	b.n	8000df8 <_Unwind_VRS_Pop+0x164>
 8000e5c:	f023 0310 	bic.w	r3, r3, #16
 8000e60:	6023      	str	r3, [r4, #0]
 8000e62:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000e66:	9201      	str	r2, [sp, #4]
 8000e68:	f000 f8aa 	bl	8000fc0 <__gnu_Unwind_Save_WMMXC>
 8000e6c:	9a01      	ldr	r2, [sp, #4]
 8000e6e:	e72f      	b.n	8000cd0 <_Unwind_VRS_Pop+0x3c>
 8000e70:	3104      	adds	r1, #4
 8000e72:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e74:	a822      	add	r0, sp, #136	; 0x88
 8000e76:	f000 f83d 	bl	8000ef4 <__gnu_Unwind_Restore_VFP>
 8000e7a:	e7b7      	b.n	8000dec <_Unwind_VRS_Pop+0x158>
 8000e7c:	2f00      	cmp	r7, #0
 8000e7e:	d199      	bne.n	8000db4 <_Unwind_VRS_Pop+0x120>
 8000e80:	4601      	mov	r1, r0
 8000e82:	e7aa      	b.n	8000dda <_Unwind_VRS_Pop+0x146>
 8000e84:	f023 0308 	bic.w	r3, r3, #8
 8000e88:	6023      	str	r3, [r4, #0]
 8000e8a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000e8e:	f000 f86b 	bl	8000f68 <__gnu_Unwind_Save_WMMXD>
 8000e92:	e742      	b.n	8000d1a <_Unwind_VRS_Pop+0x86>
 8000e94:	4620      	mov	r0, r4
 8000e96:	f022 0204 	bic.w	r2, r2, #4
 8000e9a:	f840 2bd0 	str.w	r2, [r0], #208
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	f000 f83c 	bl	8000f1c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ea4:	9b01      	ldr	r3, [sp, #4]
 8000ea6:	e7af      	b.n	8000e08 <_Unwind_VRS_Pop+0x174>
 8000ea8:	a822      	add	r0, sp, #136	; 0x88
 8000eaa:	9301      	str	r3, [sp, #4]
 8000eac:	f000 f826 	bl	8000efc <__gnu_Unwind_Save_VFP>
 8000eb0:	9b01      	ldr	r3, [sp, #4]
 8000eb2:	e7b9      	b.n	8000e28 <_Unwind_VRS_Pop+0x194>
 8000eb4:	f041 0102 	orr.w	r1, r1, #2
 8000eb8:	f840 1b48 	str.w	r1, [r0], #72
 8000ebc:	f000 f826 	bl	8000f0c <__gnu_Unwind_Save_VFP_D>
 8000ec0:	9b01      	ldr	r3, [sp, #4]
 8000ec2:	e79c      	b.n	8000dfe <_Unwind_VRS_Pop+0x16a>
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d003      	beq.n	8000ed0 <_Unwind_VRS_Pop+0x23c>
 8000ec8:	2e0f      	cmp	r6, #15
 8000eca:	f63f af5f 	bhi.w	8000d8c <_Unwind_VRS_Pop+0xf8>
 8000ece:	e79f      	b.n	8000e10 <_Unwind_VRS_Pop+0x17c>
 8000ed0:	a822      	add	r0, sp, #136	; 0x88
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	f000 f812 	bl	8000efc <__gnu_Unwind_Save_VFP>
 8000ed8:	9b01      	ldr	r3, [sp, #4]
 8000eda:	e757      	b.n	8000d8c <_Unwind_VRS_Pop+0xf8>

08000edc <__restore_core_regs>:
 8000edc:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000ee0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000ee4:	469c      	mov	ip, r3
 8000ee6:	46a6      	mov	lr, r4
 8000ee8:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000eec:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000ef0:	46e5      	mov	sp, ip
 8000ef2:	bd00      	pop	{pc}

08000ef4 <__gnu_Unwind_Restore_VFP>:
 8000ef4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <__gnu_Unwind_Save_VFP>:
 8000efc:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <__gnu_Unwind_Restore_VFP_D>:
 8000f04:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <__gnu_Unwind_Save_VFP_D>:
 8000f0c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f14:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f1c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__gnu_Unwind_Restore_WMMXD>:
 8000f24:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f28:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f2c:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f30:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f34:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f38:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f3c:	ecf0 6102 	ldfe	f6, [r0], #8
 8000f40:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f44:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f48:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f4c:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f50:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f54:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f58:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f5c:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f60:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <__gnu_Unwind_Save_WMMXD>:
 8000f68:	ece0 0102 	stfe	f0, [r0], #8
 8000f6c:	ece0 1102 	stfe	f1, [r0], #8
 8000f70:	ece0 2102 	stfe	f2, [r0], #8
 8000f74:	ece0 3102 	stfe	f3, [r0], #8
 8000f78:	ece0 4102 	stfe	f4, [r0], #8
 8000f7c:	ece0 5102 	stfe	f5, [r0], #8
 8000f80:	ece0 6102 	stfe	f6, [r0], #8
 8000f84:	ece0 7102 	stfe	f7, [r0], #8
 8000f88:	ece0 8102 	stfp	f0, [r0], #8
 8000f8c:	ece0 9102 	stfp	f1, [r0], #8
 8000f90:	ece0 a102 	stfp	f2, [r0], #8
 8000f94:	ece0 b102 	stfp	f3, [r0], #8
 8000f98:	ece0 c102 	stfp	f4, [r0], #8
 8000f9c:	ece0 d102 	stfp	f5, [r0], #8
 8000fa0:	ece0 e102 	stfp	f6, [r0], #8
 8000fa4:	ece0 f102 	stfp	f7, [r0], #8
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <__gnu_Unwind_Restore_WMMXC>:
 8000fac:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000fb0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000fb4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000fb8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <__gnu_Unwind_Save_WMMXC>:
 8000fc0:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000fc4:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000fc8:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000fcc:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <_Unwind_RaiseException>:
 8000fd4:	46ec      	mov	ip, sp
 8000fd6:	b500      	push	{lr}
 8000fd8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000fdc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000fe0:	f04f 0300 	mov.w	r3, #0
 8000fe4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000fe8:	a901      	add	r1, sp, #4
 8000fea:	f7ff fbf3 	bl	80007d4 <__gnu_Unwind_RaiseException>
 8000fee:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000ff2:	b012      	add	sp, #72	; 0x48
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_Unwind_Resume>:
 8000ff8:	46ec      	mov	ip, sp
 8000ffa:	b500      	push	{lr}
 8000ffc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001000:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	e92d 000c 	stmdb	sp!, {r2, r3}
 800100c:	a901      	add	r1, sp, #4
 800100e:	f7ff fc1b 	bl	8000848 <__gnu_Unwind_Resume>
 8001012:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001016:	b012      	add	sp, #72	; 0x48
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <_Unwind_Resume_or_Rethrow>:
 800101c:	46ec      	mov	ip, sp
 800101e:	b500      	push	{lr}
 8001020:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001024:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001030:	a901      	add	r1, sp, #4
 8001032:	f7ff fc2b 	bl	800088c <__gnu_Unwind_Resume_or_Rethrow>
 8001036:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800103a:	b012      	add	sp, #72	; 0x48
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <_Unwind_ForcedUnwind>:
 8001040:	46ec      	mov	ip, sp
 8001042:	b500      	push	{lr}
 8001044:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001048:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001054:	ab01      	add	r3, sp, #4
 8001056:	f7ff fbed 	bl	8000834 <__gnu_Unwind_ForcedUnwind>
 800105a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800105e:	b012      	add	sp, #72	; 0x48
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <_Unwind_Backtrace>:
 8001064:	46ec      	mov	ip, sp
 8001066:	b500      	push	{lr}
 8001068:	e92d 5000 	stmdb	sp!, {ip, lr}
 800106c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001078:	aa01      	add	r2, sp, #4
 800107a:	f7ff fc65 	bl	8000948 <__gnu_Unwind_Backtrace>
 800107e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001082:	b012      	add	sp, #72	; 0x48
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <next_unwind_byte>:
 8001088:	7a02      	ldrb	r2, [r0, #8]
 800108a:	b91a      	cbnz	r2, 8001094 <next_unwind_byte+0xc>
 800108c:	7a43      	ldrb	r3, [r0, #9]
 800108e:	b943      	cbnz	r3, 80010a2 <next_unwind_byte+0x1a>
 8001090:	20b0      	movs	r0, #176	; 0xb0
 8001092:	4770      	bx	lr
 8001094:	6803      	ldr	r3, [r0, #0]
 8001096:	3a01      	subs	r2, #1
 8001098:	7202      	strb	r2, [r0, #8]
 800109a:	021a      	lsls	r2, r3, #8
 800109c:	6002      	str	r2, [r0, #0]
 800109e:	0e18      	lsrs	r0, r3, #24
 80010a0:	4770      	bx	lr
 80010a2:	6842      	ldr	r2, [r0, #4]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	b410      	push	{r4}
 80010a8:	7243      	strb	r3, [r0, #9]
 80010aa:	6813      	ldr	r3, [r2, #0]
 80010ac:	2103      	movs	r1, #3
 80010ae:	1d14      	adds	r4, r2, #4
 80010b0:	7201      	strb	r1, [r0, #8]
 80010b2:	021a      	lsls	r2, r3, #8
 80010b4:	6044      	str	r4, [r0, #4]
 80010b6:	6002      	str	r2, [r0, #0]
 80010b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010bc:	0e18      	lsrs	r0, r3, #24
 80010be:	4770      	bx	lr

080010c0 <_Unwind_GetGR.constprop.0>:
 80010c0:	b500      	push	{lr}
 80010c2:	b085      	sub	sp, #20
 80010c4:	aa03      	add	r2, sp, #12
 80010c6:	2300      	movs	r3, #0
 80010c8:	9200      	str	r2, [sp, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	220c      	movs	r2, #12
 80010ce:	f7ff fbed 	bl	80008ac <_Unwind_VRS_Get>
 80010d2:	9803      	ldr	r0, [sp, #12]
 80010d4:	b005      	add	sp, #20
 80010d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80010da:	bf00      	nop

080010dc <unwind_UCB_from_context>:
 80010dc:	e7f0      	b.n	80010c0 <_Unwind_GetGR.constprop.0>
 80010de:	bf00      	nop

080010e0 <__gnu_unwind_execute>:
 80010e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010e4:	4606      	mov	r6, r0
 80010e6:	b085      	sub	sp, #20
 80010e8:	460f      	mov	r7, r1
 80010ea:	f04f 0800 	mov.w	r8, #0
 80010ee:	4638      	mov	r0, r7
 80010f0:	f7ff ffca 	bl	8001088 <next_unwind_byte>
 80010f4:	28b0      	cmp	r0, #176	; 0xb0
 80010f6:	4604      	mov	r4, r0
 80010f8:	d023      	beq.n	8001142 <__gnu_unwind_execute+0x62>
 80010fa:	0605      	lsls	r5, r0, #24
 80010fc:	d427      	bmi.n	800114e <__gnu_unwind_execute+0x6e>
 80010fe:	2300      	movs	r3, #0
 8001100:	f10d 090c 	add.w	r9, sp, #12
 8001104:	4619      	mov	r1, r3
 8001106:	0085      	lsls	r5, r0, #2
 8001108:	220d      	movs	r2, #13
 800110a:	f8cd 9000 	str.w	r9, [sp]
 800110e:	4630      	mov	r0, r6
 8001110:	f7ff fbcc 	bl	80008ac <_Unwind_VRS_Get>
 8001114:	b2ed      	uxtb	r5, r5
 8001116:	9b03      	ldr	r3, [sp, #12]
 8001118:	f8cd 9000 	str.w	r9, [sp]
 800111c:	0660      	lsls	r0, r4, #25
 800111e:	f105 0504 	add.w	r5, r5, #4
 8001122:	bf4c      	ite	mi
 8001124:	1b5d      	submi	r5, r3, r5
 8001126:	18ed      	addpl	r5, r5, r3
 8001128:	2300      	movs	r3, #0
 800112a:	4619      	mov	r1, r3
 800112c:	220d      	movs	r2, #13
 800112e:	4630      	mov	r0, r6
 8001130:	9503      	str	r5, [sp, #12]
 8001132:	f7ff fbe1 	bl	80008f8 <_Unwind_VRS_Set>
 8001136:	4638      	mov	r0, r7
 8001138:	f7ff ffa6 	bl	8001088 <next_unwind_byte>
 800113c:	28b0      	cmp	r0, #176	; 0xb0
 800113e:	4604      	mov	r4, r0
 8001140:	d1db      	bne.n	80010fa <__gnu_unwind_execute+0x1a>
 8001142:	f1b8 0f00 	cmp.w	r8, #0
 8001146:	f000 8095 	beq.w	8001274 <__gnu_unwind_execute+0x194>
 800114a:	2000      	movs	r0, #0
 800114c:	e01c      	b.n	8001188 <__gnu_unwind_execute+0xa8>
 800114e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001152:	2b80      	cmp	r3, #128	; 0x80
 8001154:	d05d      	beq.n	8001212 <__gnu_unwind_execute+0x132>
 8001156:	2b90      	cmp	r3, #144	; 0x90
 8001158:	d019      	beq.n	800118e <__gnu_unwind_execute+0xae>
 800115a:	2ba0      	cmp	r3, #160	; 0xa0
 800115c:	d02c      	beq.n	80011b8 <__gnu_unwind_execute+0xd8>
 800115e:	2bb0      	cmp	r3, #176	; 0xb0
 8001160:	d03f      	beq.n	80011e2 <__gnu_unwind_execute+0x102>
 8001162:	2bc0      	cmp	r3, #192	; 0xc0
 8001164:	d06c      	beq.n	8001240 <__gnu_unwind_execute+0x160>
 8001166:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800116a:	2bd0      	cmp	r3, #208	; 0xd0
 800116c:	d10b      	bne.n	8001186 <__gnu_unwind_execute+0xa6>
 800116e:	f000 0207 	and.w	r2, r0, #7
 8001172:	3201      	adds	r2, #1
 8001174:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001178:	2305      	movs	r3, #5
 800117a:	2101      	movs	r1, #1
 800117c:	4630      	mov	r0, r6
 800117e:	f7ff fd89 	bl	8000c94 <_Unwind_VRS_Pop>
 8001182:	2800      	cmp	r0, #0
 8001184:	d0b3      	beq.n	80010ee <__gnu_unwind_execute+0xe>
 8001186:	2009      	movs	r0, #9
 8001188:	b005      	add	sp, #20
 800118a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800118e:	f000 030d 	and.w	r3, r0, #13
 8001192:	2b0d      	cmp	r3, #13
 8001194:	d0f7      	beq.n	8001186 <__gnu_unwind_execute+0xa6>
 8001196:	ad03      	add	r5, sp, #12
 8001198:	2300      	movs	r3, #0
 800119a:	f000 020f 	and.w	r2, r0, #15
 800119e:	4619      	mov	r1, r3
 80011a0:	9500      	str	r5, [sp, #0]
 80011a2:	4630      	mov	r0, r6
 80011a4:	f7ff fb82 	bl	80008ac <_Unwind_VRS_Get>
 80011a8:	2300      	movs	r3, #0
 80011aa:	9500      	str	r5, [sp, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	220d      	movs	r2, #13
 80011b0:	4630      	mov	r0, r6
 80011b2:	f7ff fba1 	bl	80008f8 <_Unwind_VRS_Set>
 80011b6:	e79a      	b.n	80010ee <__gnu_unwind_execute+0xe>
 80011b8:	43c2      	mvns	r2, r0
 80011ba:	f002 0307 	and.w	r3, r2, #7
 80011be:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80011c2:	411a      	asrs	r2, r3
 80011c4:	0701      	lsls	r1, r0, #28
 80011c6:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	bf48      	it	mi
 80011d0:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80011d4:	4619      	mov	r1, r3
 80011d6:	4630      	mov	r0, r6
 80011d8:	f7ff fd5c 	bl	8000c94 <_Unwind_VRS_Pop>
 80011dc:	2800      	cmp	r0, #0
 80011de:	d1d2      	bne.n	8001186 <__gnu_unwind_execute+0xa6>
 80011e0:	e785      	b.n	80010ee <__gnu_unwind_execute+0xe>
 80011e2:	28b1      	cmp	r0, #177	; 0xb1
 80011e4:	d057      	beq.n	8001296 <__gnu_unwind_execute+0x1b6>
 80011e6:	28b2      	cmp	r0, #178	; 0xb2
 80011e8:	d068      	beq.n	80012bc <__gnu_unwind_execute+0x1dc>
 80011ea:	28b3      	cmp	r0, #179	; 0xb3
 80011ec:	f000 8095 	beq.w	800131a <__gnu_unwind_execute+0x23a>
 80011f0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80011f4:	2bb4      	cmp	r3, #180	; 0xb4
 80011f6:	d0c6      	beq.n	8001186 <__gnu_unwind_execute+0xa6>
 80011f8:	f000 0207 	and.w	r2, r0, #7
 80011fc:	3201      	adds	r2, #1
 80011fe:	2301      	movs	r3, #1
 8001200:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001204:	4619      	mov	r1, r3
 8001206:	4630      	mov	r0, r6
 8001208:	f7ff fd44 	bl	8000c94 <_Unwind_VRS_Pop>
 800120c:	2800      	cmp	r0, #0
 800120e:	d1ba      	bne.n	8001186 <__gnu_unwind_execute+0xa6>
 8001210:	e76d      	b.n	80010ee <__gnu_unwind_execute+0xe>
 8001212:	4638      	mov	r0, r7
 8001214:	f7ff ff38 	bl	8001088 <next_unwind_byte>
 8001218:	0224      	lsls	r4, r4, #8
 800121a:	4304      	orrs	r4, r0
 800121c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001220:	d0b1      	beq.n	8001186 <__gnu_unwind_execute+0xa6>
 8001222:	0124      	lsls	r4, r4, #4
 8001224:	2300      	movs	r3, #0
 8001226:	b2a2      	uxth	r2, r4
 8001228:	4619      	mov	r1, r3
 800122a:	4630      	mov	r0, r6
 800122c:	f7ff fd32 	bl	8000c94 <_Unwind_VRS_Pop>
 8001230:	2800      	cmp	r0, #0
 8001232:	d1a8      	bne.n	8001186 <__gnu_unwind_execute+0xa6>
 8001234:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001238:	bf18      	it	ne
 800123a:	f04f 0801 	movne.w	r8, #1
 800123e:	e756      	b.n	80010ee <__gnu_unwind_execute+0xe>
 8001240:	28c6      	cmp	r0, #198	; 0xc6
 8001242:	d07d      	beq.n	8001340 <__gnu_unwind_execute+0x260>
 8001244:	28c7      	cmp	r0, #199	; 0xc7
 8001246:	f000 8086 	beq.w	8001356 <__gnu_unwind_execute+0x276>
 800124a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800124e:	2bc0      	cmp	r3, #192	; 0xc0
 8001250:	f000 8094 	beq.w	800137c <__gnu_unwind_execute+0x29c>
 8001254:	28c8      	cmp	r0, #200	; 0xc8
 8001256:	f000 809f 	beq.w	8001398 <__gnu_unwind_execute+0x2b8>
 800125a:	28c9      	cmp	r0, #201	; 0xc9
 800125c:	d193      	bne.n	8001186 <__gnu_unwind_execute+0xa6>
 800125e:	4638      	mov	r0, r7
 8001260:	f7ff ff12 	bl	8001088 <next_unwind_byte>
 8001264:	0302      	lsls	r2, r0, #12
 8001266:	f000 000f 	and.w	r0, r0, #15
 800126a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800126e:	3001      	adds	r0, #1
 8001270:	4302      	orrs	r2, r0
 8001272:	e781      	b.n	8001178 <__gnu_unwind_execute+0x98>
 8001274:	ac03      	add	r4, sp, #12
 8001276:	4643      	mov	r3, r8
 8001278:	220e      	movs	r2, #14
 800127a:	4641      	mov	r1, r8
 800127c:	9400      	str	r4, [sp, #0]
 800127e:	4630      	mov	r0, r6
 8001280:	f7ff fb14 	bl	80008ac <_Unwind_VRS_Get>
 8001284:	9400      	str	r4, [sp, #0]
 8001286:	4630      	mov	r0, r6
 8001288:	4643      	mov	r3, r8
 800128a:	220f      	movs	r2, #15
 800128c:	4641      	mov	r1, r8
 800128e:	f7ff fb33 	bl	80008f8 <_Unwind_VRS_Set>
 8001292:	4640      	mov	r0, r8
 8001294:	e778      	b.n	8001188 <__gnu_unwind_execute+0xa8>
 8001296:	4638      	mov	r0, r7
 8001298:	f7ff fef6 	bl	8001088 <next_unwind_byte>
 800129c:	2800      	cmp	r0, #0
 800129e:	f43f af72 	beq.w	8001186 <__gnu_unwind_execute+0xa6>
 80012a2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80012a6:	f47f af6e 	bne.w	8001186 <__gnu_unwind_execute+0xa6>
 80012aa:	4602      	mov	r2, r0
 80012ac:	4619      	mov	r1, r3
 80012ae:	4630      	mov	r0, r6
 80012b0:	f7ff fcf0 	bl	8000c94 <_Unwind_VRS_Pop>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	f47f af66 	bne.w	8001186 <__gnu_unwind_execute+0xa6>
 80012ba:	e718      	b.n	80010ee <__gnu_unwind_execute+0xe>
 80012bc:	2300      	movs	r3, #0
 80012be:	f10d 090c 	add.w	r9, sp, #12
 80012c2:	220d      	movs	r2, #13
 80012c4:	4619      	mov	r1, r3
 80012c6:	f8cd 9000 	str.w	r9, [sp]
 80012ca:	4630      	mov	r0, r6
 80012cc:	f7ff faee 	bl	80008ac <_Unwind_VRS_Get>
 80012d0:	4638      	mov	r0, r7
 80012d2:	f7ff fed9 	bl	8001088 <next_unwind_byte>
 80012d6:	0602      	lsls	r2, r0, #24
 80012d8:	f04f 0402 	mov.w	r4, #2
 80012dc:	d50c      	bpl.n	80012f8 <__gnu_unwind_execute+0x218>
 80012de:	9b03      	ldr	r3, [sp, #12]
 80012e0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80012e4:	40a0      	lsls	r0, r4
 80012e6:	4403      	add	r3, r0
 80012e8:	4638      	mov	r0, r7
 80012ea:	9303      	str	r3, [sp, #12]
 80012ec:	f7ff fecc 	bl	8001088 <next_unwind_byte>
 80012f0:	0603      	lsls	r3, r0, #24
 80012f2:	f104 0407 	add.w	r4, r4, #7
 80012f6:	d4f2      	bmi.n	80012de <__gnu_unwind_execute+0x1fe>
 80012f8:	9b03      	ldr	r3, [sp, #12]
 80012fa:	f8cd 9000 	str.w	r9, [sp]
 80012fe:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001302:	40a2      	lsls	r2, r4
 8001304:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001308:	2300      	movs	r3, #0
 800130a:	4414      	add	r4, r2
 800130c:	4619      	mov	r1, r3
 800130e:	220d      	movs	r2, #13
 8001310:	4630      	mov	r0, r6
 8001312:	9403      	str	r4, [sp, #12]
 8001314:	f7ff faf0 	bl	80008f8 <_Unwind_VRS_Set>
 8001318:	e6e9      	b.n	80010ee <__gnu_unwind_execute+0xe>
 800131a:	4638      	mov	r0, r7
 800131c:	f7ff feb4 	bl	8001088 <next_unwind_byte>
 8001320:	0301      	lsls	r1, r0, #12
 8001322:	f000 000f 	and.w	r0, r0, #15
 8001326:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800132a:	1c42      	adds	r2, r0, #1
 800132c:	2301      	movs	r3, #1
 800132e:	430a      	orrs	r2, r1
 8001330:	4630      	mov	r0, r6
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fcae 	bl	8000c94 <_Unwind_VRS_Pop>
 8001338:	2800      	cmp	r0, #0
 800133a:	f47f af24 	bne.w	8001186 <__gnu_unwind_execute+0xa6>
 800133e:	e6d6      	b.n	80010ee <__gnu_unwind_execute+0xe>
 8001340:	4638      	mov	r0, r7
 8001342:	f7ff fea1 	bl	8001088 <next_unwind_byte>
 8001346:	0301      	lsls	r1, r0, #12
 8001348:	f000 000f 	and.w	r0, r0, #15
 800134c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001350:	1c42      	adds	r2, r0, #1
 8001352:	2303      	movs	r3, #3
 8001354:	e7eb      	b.n	800132e <__gnu_unwind_execute+0x24e>
 8001356:	4638      	mov	r0, r7
 8001358:	f7ff fe96 	bl	8001088 <next_unwind_byte>
 800135c:	2800      	cmp	r0, #0
 800135e:	f43f af12 	beq.w	8001186 <__gnu_unwind_execute+0xa6>
 8001362:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001366:	f47f af0e 	bne.w	8001186 <__gnu_unwind_execute+0xa6>
 800136a:	4602      	mov	r2, r0
 800136c:	2104      	movs	r1, #4
 800136e:	4630      	mov	r0, r6
 8001370:	f7ff fc90 	bl	8000c94 <_Unwind_VRS_Pop>
 8001374:	2800      	cmp	r0, #0
 8001376:	f47f af06 	bne.w	8001186 <__gnu_unwind_execute+0xa6>
 800137a:	e6b8      	b.n	80010ee <__gnu_unwind_execute+0xe>
 800137c:	f000 020f 	and.w	r2, r0, #15
 8001380:	3201      	adds	r2, #1
 8001382:	2303      	movs	r3, #3
 8001384:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001388:	4619      	mov	r1, r3
 800138a:	4630      	mov	r0, r6
 800138c:	f7ff fc82 	bl	8000c94 <_Unwind_VRS_Pop>
 8001390:	2800      	cmp	r0, #0
 8001392:	f47f aef8 	bne.w	8001186 <__gnu_unwind_execute+0xa6>
 8001396:	e6aa      	b.n	80010ee <__gnu_unwind_execute+0xe>
 8001398:	4638      	mov	r0, r7
 800139a:	f7ff fe75 	bl	8001088 <next_unwind_byte>
 800139e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80013a2:	f000 030f 	and.w	r3, r0, #15
 80013a6:	3210      	adds	r2, #16
 80013a8:	3301      	adds	r3, #1
 80013aa:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80013ae:	e6e3      	b.n	8001178 <__gnu_unwind_execute+0x98>

080013b0 <__gnu_unwind_frame>:
 80013b0:	b510      	push	{r4, lr}
 80013b2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80013b4:	b084      	sub	sp, #16
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	2003      	movs	r0, #3
 80013ba:	f88d 000c 	strb.w	r0, [sp, #12]
 80013be:	79dc      	ldrb	r4, [r3, #7]
 80013c0:	f88d 400d 	strb.w	r4, [sp, #13]
 80013c4:	0212      	lsls	r2, r2, #8
 80013c6:	3308      	adds	r3, #8
 80013c8:	4608      	mov	r0, r1
 80013ca:	a901      	add	r1, sp, #4
 80013cc:	9201      	str	r2, [sp, #4]
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	f7ff fe86 	bl	80010e0 <__gnu_unwind_execute>
 80013d4:	b004      	add	sp, #16
 80013d6:	bd10      	pop	{r4, pc}

080013d8 <_Unwind_GetRegionStart>:
 80013d8:	b508      	push	{r3, lr}
 80013da:	f7ff fe7f 	bl	80010dc <unwind_UCB_from_context>
 80013de:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80013e0:	bd08      	pop	{r3, pc}
 80013e2:	bf00      	nop

080013e4 <_Unwind_GetLanguageSpecificData>:
 80013e4:	b508      	push	{r3, lr}
 80013e6:	f7ff fe79 	bl	80010dc <unwind_UCB_from_context>
 80013ea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80013ec:	79c3      	ldrb	r3, [r0, #7]
 80013ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80013f2:	3008      	adds	r0, #8
 80013f4:	bd08      	pop	{r3, pc}
 80013f6:	bf00      	nop

080013f8 <_Unwind_GetTextRelBase>:
 80013f8:	b508      	push	{r3, lr}
 80013fa:	f005 f8a7 	bl	800654c <abort>
 80013fe:	bf00      	nop

08001400 <_Unwind_GetDataRelBase>:
 8001400:	b508      	push	{r3, lr}
 8001402:	f7ff fff9 	bl	80013f8 <_Unwind_GetTextRelBase>
 8001406:	bf00      	nop

08001408 <__aeabi_idiv0>:
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop

0800140c <_ZN7PCA9626C1Ev>:
 */

#include "PCA9626.h"


PCA9626::PCA9626() {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f884 	bl	8001524 <_ZN7PCA96XXC1Ev>
 800141c:	4a03      	ldr	r2, [pc, #12]	; (800142c <_ZN7PCA9626C1Ev+0x20>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	08006880 	.word	0x08006880

08001430 <_ZN7PCA9626D1Ev>:

PCA9626::~PCA9626() {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	4a05      	ldr	r2, [pc, #20]	; (8001450 <_ZN7PCA9626D1Ev+0x20>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f885 	bl	8001550 <_ZN7PCA96XXD1Ev>
	// TODO Auto-generated destructor stub
}
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	08006880 	.word	0x08006880

08001454 <_ZN7PCA9626D0Ev>:
PCA9626::~PCA9626() {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
}
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ffe7 	bl	8001430 <_ZN7PCA9626D1Ev>
 8001462:	2118      	movs	r1, #24
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f004 fe9b 	bl	80061a0 <_ZdlPvj>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <_ZN7PCA96265beginEv>:
	}

	dim(0xFF);
}

void PCA9626::begin(){
 8001474:	b580      	push	{r7, lr}
 8001476:	b08c      	sub	sp, #48	; 0x30
 8001478:	af02      	add	r7, sp, #8
 800147a:	6078      	str	r0, [r7, #4]
	ports = 3;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2203      	movs	r2, #3
 8001480:	60da      	str	r2, [r3, #12]
	uint8_t data[25];
	data[0] = PCA9626_PWM0;
 8001482:	2302      	movs	r3, #2
 8001484:	723b      	strb	r3, [r7, #8]

	for(int i = 1; i <= 24; i++){
 8001486:	2301      	movs	r3, #1
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	2b18      	cmp	r3, #24
 800148e:	dc09      	bgt.n	80014a4 <_ZN7PCA96265beginEv+0x30>
		data[i] = 0xFF;
 8001490:	f107 0208 	add.w	r2, r7, #8
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	4413      	add	r3, r2
 8001498:	22ff      	movs	r2, #255	; 0xff
 800149a:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i <= 24; i++){
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	3301      	adds	r3, #1
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
 80014a2:	e7f2      	b.n	800148a <_ZN7PCA96265beginEv+0x16>
	}

	switch(i2cBus){
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d002      	beq.n	80014b2 <_ZN7PCA96265beginEv+0x3e>
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d00e      	beq.n	80014ce <_ZN7PCA96265beginEv+0x5a>
 80014b0:	e01b      	b.n	80014ea <_ZN7PCA96265beginEv+0x76>
	case 1:
	  	HAL_I2C_Master_Transmit(&hi2c1, i2cAddress<<1, data, 25, 250);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	791b      	ldrb	r3, [r3, #4]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	b299      	uxth	r1, r3
 80014bc:	f107 0208 	add.w	r2, r7, #8
 80014c0:	23fa      	movs	r3, #250	; 0xfa
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2319      	movs	r3, #25
 80014c6:	480d      	ldr	r0, [pc, #52]	; (80014fc <_ZN7PCA96265beginEv+0x88>)
 80014c8:	f000 fc6e 	bl	8001da8 <HAL_I2C_Master_Transmit>
	   	break;
 80014cc:	e00d      	b.n	80014ea <_ZN7PCA96265beginEv+0x76>
	case 2:
	   	HAL_I2C_Master_Transmit(&hi2c2, i2cAddress<<1, data, 25, 250);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	791b      	ldrb	r3, [r3, #4]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	b299      	uxth	r1, r3
 80014d8:	f107 0208 	add.w	r2, r7, #8
 80014dc:	23fa      	movs	r3, #250	; 0xfa
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	2319      	movs	r3, #25
 80014e2:	4807      	ldr	r0, [pc, #28]	; (8001500 <_ZN7PCA96265beginEv+0x8c>)
 80014e4:	f000 fc60 	bl	8001da8 <HAL_I2C_Master_Transmit>
	   	break;
 80014e8:	bf00      	nop
	}

	dim(0xFF);
 80014ea:	21ff      	movs	r1, #255	; 0xff
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f809 	bl	8001504 <_ZN7PCA96263dimEh>
}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000405c 	.word	0x2000405c
 8001500:	20004008 	.word	0x20004008

08001504 <_ZN7PCA96263dimEh>:

void PCA9626::dim(uint8_t _grppwm){
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	70fb      	strb	r3, [r7, #3]
	//this can dim all leds based on a light sensor input
	write_register(PCA9626_GRPPWM, _grppwm);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	78fa      	ldrb	r2, [r7, #3]
 8001514:	211a      	movs	r1, #26
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f856 	bl	80015c8 <_ZN7PCA96XX14write_registerEhh>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_ZN7PCA96XXC1Ev>:
 */

#include "PCA96XX.h"
#include <bitset>

PCA96XX::PCA96XX() {
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	4a07      	ldr	r2, [pc, #28]	; (800154c <_ZN7PCA96XXC1Ev+0x28>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3310      	adds	r3, #16
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	809a      	strh	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	080068a8 	.word	0x080068a8

08001550 <_ZN7PCA96XXD1Ev>:

PCA96XX::~PCA96XX() {
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <_ZN7PCA96XXD1Ev+0x1c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	080068a8 	.word	0x080068a8

08001570 <_ZN7PCA96XXD0Ev>:
PCA96XX::~PCA96XX() {
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
}
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ffe9 	bl	8001550 <_ZN7PCA96XXD1Ev>
 800157e:	2118      	movs	r1, #24
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f004 fe0d 	bl	80061a0 <_ZdlPvj>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <_ZN7PCA96XX4initEih>:

void PCA96XX::init(int _bus, uint8_t _add){
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	4613      	mov	r3, r2
 800159c:	71fb      	strb	r3, [r7, #7]
	i2cAddress = _add;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	79fa      	ldrb	r2, [r7, #7]
 80015a2:	711a      	strb	r2, [r3, #4]
	i2cBus = _bus;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	609a      	str	r2, [r3, #8]

	write_register(PCA96XX_MODE1, 0x81);
 80015aa:	2281      	movs	r2, #129	; 0x81
 80015ac:	2100      	movs	r1, #0
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 f80a 	bl	80015c8 <_ZN7PCA96XX14write_registerEhh>
	write_register(PCA96XX_MODE2, 0x05);
 80015b4:	2205      	movs	r2, #5
 80015b6:	2101      	movs	r1, #1
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f000 f805 	bl	80015c8 <_ZN7PCA96XX14write_registerEhh>
}
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <_ZN7PCA96XX14write_registerEhh>:

void PCA96XX::write_register(uint8_t register_pointer, uint8_t register_value){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	70fb      	strb	r3, [r7, #3]
 80015d4:	4613      	mov	r3, r2
 80015d6:	70bb      	strb	r3, [r7, #2]
	uint8_t data[2];

	data[0] = register_pointer;
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	733b      	strb	r3, [r7, #12]
	data[1] = register_value;
 80015dc:	78bb      	ldrb	r3, [r7, #2]
 80015de:	737b      	strb	r3, [r7, #13]

	switch(i2cBus){
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d002      	beq.n	80015ee <_ZN7PCA96XX14write_registerEhh+0x26>
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d00e      	beq.n	800160a <_ZN7PCA96XX14write_registerEhh+0x42>
	   	break;
	case 2:
	   	HAL_I2C_Master_Transmit(&hi2c2, i2cAddress<<1, data, 2, 20);
	   	break;
	}
}
 80015ec:	e01b      	b.n	8001626 <_ZN7PCA96XX14write_registerEhh+0x5e>
	  	HAL_I2C_Master_Transmit(&hi2c1, i2cAddress<<1, data, 2, 20);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	791b      	ldrb	r3, [r3, #4]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	b299      	uxth	r1, r3
 80015f8:	f107 020c 	add.w	r2, r7, #12
 80015fc:	2314      	movs	r3, #20
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2302      	movs	r3, #2
 8001602:	480b      	ldr	r0, [pc, #44]	; (8001630 <_ZN7PCA96XX14write_registerEhh+0x68>)
 8001604:	f000 fbd0 	bl	8001da8 <HAL_I2C_Master_Transmit>
	   	break;
 8001608:	e00d      	b.n	8001626 <_ZN7PCA96XX14write_registerEhh+0x5e>
	   	HAL_I2C_Master_Transmit(&hi2c2, i2cAddress<<1, data, 2, 20);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	791b      	ldrb	r3, [r3, #4]
 800160e:	b29b      	uxth	r3, r3
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	b299      	uxth	r1, r3
 8001614:	f107 020c 	add.w	r2, r7, #12
 8001618:	2314      	movs	r3, #20
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2302      	movs	r3, #2
 800161e:	4805      	ldr	r0, [pc, #20]	; (8001634 <_ZN7PCA96XX14write_registerEhh+0x6c>)
 8001620:	f000 fbc2 	bl	8001da8 <HAL_I2C_Master_Transmit>
	   	break;
 8001624:	bf00      	nop
}
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000405c 	.word	0x2000405c
 8001634:	20004008 	.word	0x20004008

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_Init+0x30>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001642:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800164a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001652:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001654:	2003      	movs	r0, #3
 8001656:	f000 f8ab 	bl	80017b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165a:	2000      	movs	r0, #0
 800165c:	f004 fa50 	bl	8005b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001660:	f004 fa2c 	bl	8005abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001664:	2000      	movs	r0, #0
 8001666:	bd08      	pop	{r3, pc}
 8001668:	40023c00 	.word	0x40023c00

0800166c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800166c:	4a03      	ldr	r2, [pc, #12]	; (800167c <HAL_IncTick+0x10>)
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <HAL_IncTick+0x14>)
 8001670:	6811      	ldr	r1, [r2, #0]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	440b      	add	r3, r1
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20003f98 	.word	0x20003f98
 8001680:	20000004 	.word	0x20000004

08001684 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001684:	4b01      	ldr	r3, [pc, #4]	; (800168c <HAL_GetTick+0x8>)
 8001686:	6818      	ldr	r0, [r3, #0]
}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20003f98 	.word	0x20003f98

08001690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001690:	b538      	push	{r3, r4, r5, lr}
 8001692:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001694:	f7ff fff6 	bl	8001684 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001698:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800169a:	bf1c      	itt	ne
 800169c:	4b05      	ldrne	r3, [pc, #20]	; (80016b4 <HAL_Delay+0x24>)
 800169e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80016a0:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80016a2:	bf18      	it	ne
 80016a4:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016a6:	f7ff ffed 	bl	8001684 <HAL_GetTick>
 80016aa:	1b40      	subs	r0, r0, r5
 80016ac:	4284      	cmp	r4, r0
 80016ae:	d8fa      	bhi.n	80016a6 <HAL_Delay+0x16>
  {
  }
}
 80016b0:	bd38      	pop	{r3, r4, r5, pc}
 80016b2:	bf00      	nop
 80016b4:	20000004 	.word	0x20000004

080016b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80016b8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check CAN handle */
  if (hcan == NULL)
 80016ba:	4604      	mov	r4, r0
 80016bc:	2800      	cmp	r0, #0
 80016be:	d06e      	beq.n	800179e <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 80016c0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80016c4:	b90b      	cbnz	r3, 80016ca <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80016c6:	f003 fd23 	bl	8005110 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016ca:	6822      	ldr	r2, [r4, #0]
 80016cc:	6813      	ldr	r3, [r2, #0]
 80016ce:	f023 0302 	bic.w	r3, r3, #2
 80016d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016d4:	f7ff ffd6 	bl	8001684 <HAL_GetTick>
 80016d8:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 80016da:	6823      	ldr	r3, [r4, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	0791      	lsls	r1, r2, #30
 80016e0:	d451      	bmi.n	8001786 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	f042 0201 	orr.w	r2, r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016ea:	f7ff ffcb 	bl	8001684 <HAL_GetTick>
 80016ee:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	07d2      	lsls	r2, r2, #31
 80016f6:	d554      	bpl.n	80017a2 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016f8:	7e22      	ldrb	r2, [r4, #24]
 80016fa:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	bf0c      	ite	eq
 8001700:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001704:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800170a:	7e62      	ldrb	r2, [r4, #25]
 800170c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	bf0c      	ite	eq
 8001712:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001716:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800171a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800171c:	7ea2      	ldrb	r2, [r4, #26]
 800171e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	bf0c      	ite	eq
 8001724:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001728:	f022 0220 	bicne.w	r2, r2, #32
 800172c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800172e:	7ee2      	ldrb	r2, [r4, #27]
 8001730:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	bf0c      	ite	eq
 8001736:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800173a:	f042 0210 	orrne.w	r2, r2, #16
 800173e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001740:	7f22      	ldrb	r2, [r4, #28]
 8001742:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	bf0c      	ite	eq
 8001748:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800174c:	f022 0208 	bicne.w	r2, r2, #8
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001752:	7f62      	ldrb	r2, [r4, #29]
 8001754:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	bf0c      	ite	eq
 800175a:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800175e:	f022 0204 	bicne.w	r2, r2, #4
 8001762:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001764:	68e1      	ldr	r1, [r4, #12]
 8001766:	68a2      	ldr	r2, [r4, #8]
 8001768:	430a      	orrs	r2, r1
 800176a:	6921      	ldr	r1, [r4, #16]
 800176c:	430a      	orrs	r2, r1
 800176e:	6961      	ldr	r1, [r4, #20]
 8001770:	430a      	orrs	r2, r1
 8001772:	6861      	ldr	r1, [r4, #4]
 8001774:	3901      	subs	r1, #1
 8001776:	430a      	orrs	r2, r1
 8001778:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800177a:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800177c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800177e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001780:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8001784:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001786:	f7ff ff7d 	bl	8001684 <HAL_GetTick>
 800178a:	1b40      	subs	r0, r0, r5
 800178c:	280a      	cmp	r0, #10
 800178e:	d9a4      	bls.n	80016da <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001796:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001798:	2305      	movs	r3, #5
 800179a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800179e:	2001      	movs	r0, #1
}
 80017a0:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017a2:	f7ff ff6f 	bl	8001684 <HAL_GetTick>
 80017a6:	1b40      	subs	r0, r0, r5
 80017a8:	280a      	cmp	r0, #10
 80017aa:	d9a1      	bls.n	80016f0 <HAL_CAN_Init+0x38>
 80017ac:	e7f0      	b.n	8001790 <HAL_CAN_Init+0xd8>
	...

080017b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b0:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80017b2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017b8:	041b      	lsls	r3, r3, #16
 80017ba:	0c1b      	lsrs	r3, r3, #16
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80017c0:	0200      	lsls	r0, r0, #8
 80017c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80017ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80017cc:	60d3      	str	r3, [r2, #12]
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b17      	ldr	r3, [pc, #92]	; (8001834 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d6:	b530      	push	{r4, r5, lr}
 80017d8:	68dc      	ldr	r4, [r3, #12]
 80017da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	bf28      	it	cs
 80017e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 0501 	mov.w	r5, #1
 80017f0:	fa05 f303 	lsl.w	r3, r5, r3
 80017f4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f8:	bf8c      	ite	hi
 80017fa:	3c03      	subhi	r4, #3
 80017fc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fe:	4019      	ands	r1, r3
 8001800:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001802:	fa05 f404 	lsl.w	r4, r5, r4
 8001806:	3c01      	subs	r4, #1
 8001808:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800180a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	ea42 0201 	orr.w	r2, r2, r1
 8001810:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	bfaf      	iteee	ge
 8001816:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	f000 000f 	andlt.w	r0, r0, #15
 800181e:	4b06      	ldrlt	r3, [pc, #24]	; (8001838 <HAL_NVIC_SetPriority+0x64>)
 8001820:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	bfa5      	ittet	ge
 8001824:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001828:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001830:	bd30      	pop	{r4, r5, pc}
 8001832:	bf00      	nop
 8001834:	e000ed00 	.word	0xe000ed00
 8001838:	e000ed14 	.word	0xe000ed14

0800183c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800183c:	0942      	lsrs	r2, r0, #5
 800183e:	2301      	movs	r3, #1
 8001840:	f000 001f 	and.w	r0, r0, #31
 8001844:	fa03 f000 	lsl.w	r0, r3, r0
 8001848:	4b01      	ldr	r3, [pc, #4]	; (8001850 <HAL_NVIC_EnableIRQ+0x14>)
 800184a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800184e:	4770      	bx	lr
 8001850:	e000e100 	.word	0xe000e100

08001854 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001854:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001856:	4604      	mov	r4, r0
 8001858:	b330      	cbz	r0, 80018a8 <HAL_DMA2D_Init+0x54>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800185a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800185e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001862:	b91b      	cbnz	r3, 800186c <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001864:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001868:	f003 fca6 	bl	80051b8 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800186c:	6822      	ldr	r2, [r4, #0]
 800186e:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001870:	2302      	movs	r3, #2
 8001872:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001876:	6813      	ldr	r3, [r2, #0]
 8001878:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800187c:	430b      	orrs	r3, r1
 800187e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001880:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001882:	68a1      	ldr	r1, [r4, #8]
 8001884:	f023 0307 	bic.w	r3, r3, #7
 8001888:	430b      	orrs	r3, r1
 800188a:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 800188c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800188e:	68e1      	ldr	r1, [r4, #12]
 8001890:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001894:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001898:	430b      	orrs	r3, r1
 800189a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800189c:	2000      	movs	r0, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800189e:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80018a0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80018a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 80018a6:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80018a8:	2001      	movs	r0, #1
}
 80018aa:	bd10      	pop	{r4, pc}

080018ac <HAL_DMA2D_ConfigLayer>:
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80018ac:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80018b0:	2b01      	cmp	r3, #1
{
 80018b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdma2d);
 80018b8:	d03f      	beq.n	800193a <HAL_DMA2D_ConfigLayer+0x8e>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */

  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80018ba:	010e      	lsls	r6, r1, #4
 80018bc:	1985      	adds	r5, r0, r6
  __HAL_LOCK(hdma2d);
 80018be:	2201      	movs	r2, #1
 80018c0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80018c4:	69ea      	ldr	r2, [r5, #28]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80018c6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80018ca:	f1a2 0709 	sub.w	r7, r2, #9
 80018ce:	2f01      	cmp	r7, #1
 80018d0:	6803      	ldr	r3, [r0, #0]
  {
    regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80018d2:	f8d5 e020 	ldr.w	lr, [r5, #32]
 80018d6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80018d8:	d811      	bhi.n	80018fe <HAL_DMA2D_ConfigLayer+0x52>
    regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80018da:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 80018de:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80018e2:	4322      	orrs	r2, r4
  {
    regValue =  pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 80018e4:	b981      	cbnz	r1, 8001908 <HAL_DMA2D_ConfigLayer+0x5c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 80018e6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80018e8:	4919      	ldr	r1, [pc, #100]	; (8001950 <HAL_DMA2D_ConfigLayer+0xa4>)
 80018ea:	4021      	ands	r1, r4
 80018ec:	430a      	orrs	r2, r1
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80018f0:	6982      	ldr	r2, [r0, #24]
 80018f2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80018f4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80018f6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28
 80018fc:	e017      	b.n	800192e <HAL_DMA2D_ConfigLayer+0x82>
    regValue =  pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
 80018fe:	0624      	lsls	r4, r4, #24
 8001900:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001904:	4322      	orrs	r2, r4
  if(LayerIdx == 0)
 8001906:	b1d1      	cbz	r1, 800193e <HAL_DMA2D_ConfigLayer+0x92>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001908:	69dd      	ldr	r5, [r3, #28]
 800190a:	4c11      	ldr	r4, [pc, #68]	; (8001950 <HAL_DMA2D_ConfigLayer+0xa4>)

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800190c:	2f01      	cmp	r7, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 800190e:	ea04 0405 	and.w	r4, r4, r5
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001912:	4406      	add	r6, r0
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001914:	ea42 0204 	orr.w	r2, r2, r4
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001918:	bf98      	it	ls
 800191a:	eb00 1101 	addls.w	r1, r0, r1, lsl #4
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 800191e:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001920:	69b2      	ldr	r2, [r6, #24]
 8001922:	611a      	str	r2, [r3, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001924:	bf9e      	ittt	ls
 8001926:	6a4a      	ldrls	r2, [r1, #36]	; 0x24
 8001928:	f022 427f 	bicls.w	r2, r2, #4278190080	; 0xff000000
 800192c:	621a      	strls	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800192e:	2301      	movs	r3, #1
 8001930:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001934:	2300      	movs	r3, #0
 8001936:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 800193a:	4618      	mov	r0, r3
 800193c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 800193e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001940:	4903      	ldr	r1, [pc, #12]	; (8001950 <HAL_DMA2D_ConfigLayer+0xa4>)
 8001942:	4021      	ands	r1, r4
 8001944:	430a      	orrs	r2, r1
 8001946:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001948:	6982      	ldr	r2, [r0, #24]
 800194a:	619a      	str	r2, [r3, #24]
 800194c:	e7ef      	b.n	800192e <HAL_DMA2D_ConfigLayer+0x82>
 800194e:	bf00      	nop
 8001950:	00fcfff0 	.word	0x00fcfff0

08001954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001958:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195c:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8001b24 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001960:	4a6e      	ldr	r2, [pc, #440]	; (8001b1c <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001962:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8001b28 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001966:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001968:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800196a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001970:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001974:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001978:	45b6      	cmp	lr, r6
 800197a:	f040 80b6 	bne.w	8001aea <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800197e:	684c      	ldr	r4, [r1, #4]
 8001980:	f024 0710 	bic.w	r7, r4, #16
 8001984:	2f02      	cmp	r7, #2
 8001986:	d116      	bne.n	80019b6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001988:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800198c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001990:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001994:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001998:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800199c:	f04f 0c0f 	mov.w	ip, #15
 80019a0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80019a4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a8:	690d      	ldr	r5, [r1, #16]
 80019aa:	fa05 f50b 	lsl.w	r5, r5, fp
 80019ae:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80019b2:	f8ca 5020 	str.w	r5, [sl, #32]
 80019b6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ba:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80019bc:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019c0:	fa05 f50a 	lsl.w	r5, r5, sl
 80019c4:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c6:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ca:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ce:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d4:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d8:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80019da:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019de:	d811      	bhi.n	8001a04 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80019e0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019e6:	68cf      	ldr	r7, [r1, #12]
 80019e8:	fa07 fc0a 	lsl.w	ip, r7, sl
 80019ec:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80019f0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80019f2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019f8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80019fc:	409f      	lsls	r7, r3
 80019fe:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001a02:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001a04:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a06:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a08:	688f      	ldr	r7, [r1, #8]
 8001a0a:	fa07 f70a 	lsl.w	r7, r7, sl
 8001a0e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001a10:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a12:	00e5      	lsls	r5, r4, #3
 8001a14:	d569      	bpl.n	8001aea <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	f04f 0b00 	mov.w	fp, #0
 8001a1a:	f8cd b00c 	str.w	fp, [sp, #12]
 8001a1e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a22:	4d3f      	ldr	r5, [pc, #252]	; (8001b20 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a24:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001a28:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001a2c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001a30:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001a34:	9703      	str	r7, [sp, #12]
 8001a36:	9f03      	ldr	r7, [sp, #12]
 8001a38:	f023 0703 	bic.w	r7, r3, #3
 8001a3c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001a40:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a44:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001a48:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a4c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001a50:	f04f 0e0f 	mov.w	lr, #15
 8001a54:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a58:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a5a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a5e:	d04b      	beq.n	8001af8 <HAL_GPIO_Init+0x1a4>
 8001a60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a64:	42a8      	cmp	r0, r5
 8001a66:	d049      	beq.n	8001afc <HAL_GPIO_Init+0x1a8>
 8001a68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a6c:	42a8      	cmp	r0, r5
 8001a6e:	d047      	beq.n	8001b00 <HAL_GPIO_Init+0x1ac>
 8001a70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a74:	42a8      	cmp	r0, r5
 8001a76:	d045      	beq.n	8001b04 <HAL_GPIO_Init+0x1b0>
 8001a78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a7c:	42a8      	cmp	r0, r5
 8001a7e:	d043      	beq.n	8001b08 <HAL_GPIO_Init+0x1b4>
 8001a80:	4548      	cmp	r0, r9
 8001a82:	d043      	beq.n	8001b0c <HAL_GPIO_Init+0x1b8>
 8001a84:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001a88:	42a8      	cmp	r0, r5
 8001a8a:	d041      	beq.n	8001b10 <HAL_GPIO_Init+0x1bc>
 8001a8c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a90:	42a8      	cmp	r0, r5
 8001a92:	d03f      	beq.n	8001b14 <HAL_GPIO_Init+0x1c0>
 8001a94:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a98:	42a8      	cmp	r0, r5
 8001a9a:	d03d      	beq.n	8001b18 <HAL_GPIO_Init+0x1c4>
 8001a9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001aa0:	42a8      	cmp	r0, r5
 8001aa2:	bf14      	ite	ne
 8001aa4:	250a      	movne	r5, #10
 8001aa6:	2509      	moveq	r5, #9
 8001aa8:	fa05 f50c 	lsl.w	r5, r5, ip
 8001aac:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001ab2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001ab4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001aba:	bf0c      	ite	eq
 8001abc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001abe:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001ac0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001ac2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001ac8:	bf0c      	ite	eq
 8001aca:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001acc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001ace:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	bf0c      	ite	eq
 8001ad8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001ada:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001adc:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001ade:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	bf54      	ite	pl
 8001ae4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001ae6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001ae8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	3301      	adds	r3, #1
 8001aec:	2b10      	cmp	r3, #16
 8001aee:	f47f af3c 	bne.w	800196a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001af2:	b005      	add	sp, #20
 8001af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001af8:	465d      	mov	r5, fp
 8001afa:	e7d5      	b.n	8001aa8 <HAL_GPIO_Init+0x154>
 8001afc:	2501      	movs	r5, #1
 8001afe:	e7d3      	b.n	8001aa8 <HAL_GPIO_Init+0x154>
 8001b00:	2502      	movs	r5, #2
 8001b02:	e7d1      	b.n	8001aa8 <HAL_GPIO_Init+0x154>
 8001b04:	2503      	movs	r5, #3
 8001b06:	e7cf      	b.n	8001aa8 <HAL_GPIO_Init+0x154>
 8001b08:	2504      	movs	r5, #4
 8001b0a:	e7cd      	b.n	8001aa8 <HAL_GPIO_Init+0x154>
 8001b0c:	2505      	movs	r5, #5
 8001b0e:	e7cb      	b.n	8001aa8 <HAL_GPIO_Init+0x154>
 8001b10:	2506      	movs	r5, #6
 8001b12:	e7c9      	b.n	8001aa8 <HAL_GPIO_Init+0x154>
 8001b14:	2507      	movs	r5, #7
 8001b16:	e7c7      	b.n	8001aa8 <HAL_GPIO_Init+0x154>
 8001b18:	2508      	movs	r5, #8
 8001b1a:	e7c5      	b.n	8001aa8 <HAL_GPIO_Init+0x154>
 8001b1c:	40013c00 	.word	0x40013c00
 8001b20:	40020000 	.word	0x40020000
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40021400 	.word	0x40021400

08001b2c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b2c:	6802      	ldr	r2, [r0, #0]
 8001b2e:	6953      	ldr	r3, [r2, #20]
 8001b30:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001b34:	d00d      	beq.n	8001b52 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b36:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001b3a:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8001b40:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001b4a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8001b4e:	2001      	movs	r0, #1
 8001b50:	4770      	bx	lr
  }
  return HAL_OK;
 8001b52:	4618      	mov	r0, r3
}
 8001b54:	4770      	bx	lr

08001b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001b56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b5a:	4604      	mov	r4, r0
 8001b5c:	4617      	mov	r7, r2
 8001b5e:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b60:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001b64:	b28e      	uxth	r6, r1
 8001b66:	6825      	ldr	r5, [r4, #0]
 8001b68:	f1b8 0f01 	cmp.w	r8, #1
 8001b6c:	bf0c      	ite	eq
 8001b6e:	696b      	ldreq	r3, [r5, #20]
 8001b70:	69ab      	ldrne	r3, [r5, #24]
 8001b72:	ea36 0303 	bics.w	r3, r6, r3
 8001b76:	bf14      	ite	ne
 8001b78:	2001      	movne	r0, #1
 8001b7a:	2000      	moveq	r0, #0
 8001b7c:	b908      	cbnz	r0, 8001b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b82:	696b      	ldr	r3, [r5, #20]
 8001b84:	055a      	lsls	r2, r3, #21
 8001b86:	d512      	bpl.n	8001bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b88:	682b      	ldr	r3, [r5, #0]
 8001b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8e:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b90:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001b94:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001b96:	2304      	movs	r3, #4
 8001b98:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001b9a:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001ba0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001ba4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001ba8:	2001      	movs	r0, #1
 8001baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001bae:	1c7b      	adds	r3, r7, #1
 8001bb0:	d0d9      	beq.n	8001b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001bb2:	b94f      	cbnz	r7, 8001bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001bb4:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001bb6:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001bb8:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001bba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001bbe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001bc2:	2003      	movs	r0, #3
 8001bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001bc8:	f7ff fd5c 	bl	8001684 <HAL_GetTick>
 8001bcc:	eba0 0009 	sub.w	r0, r0, r9
 8001bd0:	4287      	cmp	r7, r0
 8001bd2:	d2c8      	bcs.n	8001b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001bd4:	e7ee      	b.n	8001bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001bd6 <I2C_WaitOnFlagUntilTimeout>:
{
 8001bd6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bda:	9e08      	ldr	r6, [sp, #32]
 8001bdc:	4604      	mov	r4, r0
 8001bde:	4690      	mov	r8, r2
 8001be0:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001be2:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001be6:	b28d      	uxth	r5, r1
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	f1b9 0f01 	cmp.w	r9, #1
 8001bee:	bf0c      	ite	eq
 8001bf0:	695b      	ldreq	r3, [r3, #20]
 8001bf2:	699b      	ldrne	r3, [r3, #24]
 8001bf4:	ea35 0303 	bics.w	r3, r5, r3
 8001bf8:	bf0c      	ite	eq
 8001bfa:	2301      	moveq	r3, #1
 8001bfc:	2300      	movne	r3, #0
 8001bfe:	4543      	cmp	r3, r8
 8001c00:	d002      	beq.n	8001c08 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001c02:	2000      	movs	r0, #0
}
 8001c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001c08:	1c7b      	adds	r3, r7, #1
 8001c0a:	d0ed      	beq.n	8001be8 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c0c:	b95f      	cbnz	r7, 8001c26 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c0e:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001c10:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c12:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001c14:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001c18:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001c1c:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c1e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c26:	f7ff fd2d 	bl	8001684 <HAL_GetTick>
 8001c2a:	1b80      	subs	r0, r0, r6
 8001c2c:	4287      	cmp	r7, r0
 8001c2e:	d2db      	bcs.n	8001be8 <I2C_WaitOnFlagUntilTimeout+0x12>
 8001c30:	e7ed      	b.n	8001c0e <I2C_WaitOnFlagUntilTimeout+0x38>

08001c32 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001c32:	b570      	push	{r4, r5, r6, lr}
 8001c34:	4604      	mov	r4, r0
 8001c36:	460d      	mov	r5, r1
 8001c38:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	061b      	lsls	r3, r3, #24
 8001c40:	d501      	bpl.n	8001c46 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001c42:	2000      	movs	r0, #0
 8001c44:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c46:	4620      	mov	r0, r4
 8001c48:	f7ff ff70 	bl	8001b2c <I2C_IsAcknowledgeFailed>
 8001c4c:	b9a8      	cbnz	r0, 8001c7a <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001c4e:	1c6a      	adds	r2, r5, #1
 8001c50:	d0f3      	beq.n	8001c3a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001c52:	b965      	cbnz	r5, 8001c6e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c56:	f043 0320 	orr.w	r3, r3, #32
 8001c5a:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001c5c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001c62:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001c66:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001c6a:	2003      	movs	r0, #3
 8001c6c:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001c6e:	f7ff fd09 	bl	8001684 <HAL_GetTick>
 8001c72:	1b80      	subs	r0, r0, r6
 8001c74:	4285      	cmp	r5, r0
 8001c76:	d2e0      	bcs.n	8001c3a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001c78:	e7ec      	b.n	8001c54 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001c7a:	2001      	movs	r0, #1
}
 8001c7c:	bd70      	pop	{r4, r5, r6, pc}

08001c7e <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001c7e:	b570      	push	{r4, r5, r6, lr}
 8001c80:	4604      	mov	r4, r0
 8001c82:	460d      	mov	r5, r1
 8001c84:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c86:	6823      	ldr	r3, [r4, #0]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	075b      	lsls	r3, r3, #29
 8001c8c:	d501      	bpl.n	8001c92 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001c8e:	2000      	movs	r0, #0
 8001c90:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c92:	4620      	mov	r0, r4
 8001c94:	f7ff ff4a 	bl	8001b2c <I2C_IsAcknowledgeFailed>
 8001c98:	b9a8      	cbnz	r0, 8001cc6 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001c9a:	1c6a      	adds	r2, r5, #1
 8001c9c:	d0f3      	beq.n	8001c86 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001c9e:	b965      	cbnz	r5, 8001cba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ca0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ca2:	f043 0320 	orr.w	r3, r3, #32
 8001ca6:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001ca8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001cae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001cb2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001cb6:	2003      	movs	r0, #3
 8001cb8:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001cba:	f7ff fce3 	bl	8001684 <HAL_GetTick>
 8001cbe:	1b80      	subs	r0, r0, r6
 8001cc0:	4285      	cmp	r5, r0
 8001cc2:	d2e0      	bcs.n	8001c86 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001cc4:	e7ec      	b.n	8001ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001cc6:	2001      	movs	r0, #1
}
 8001cc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ccc <HAL_I2C_Init>:
{
 8001ccc:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8001cce:	4604      	mov	r4, r0
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	d062      	beq.n	8001d9a <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001cd4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001cd8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cdc:	b91b      	cbnz	r3, 8001ce6 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001cde:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001ce2:	f003 fb77 	bl	80053d4 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001ce6:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001ce8:	4e2d      	ldr	r6, [pc, #180]	; (8001da0 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001cea:	4d2e      	ldr	r5, [pc, #184]	; (8001da4 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cec:	2324      	movs	r3, #36	; 0x24
 8001cee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001cf2:	6813      	ldr	r3, [r2, #0]
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cfa:	f001 f91f 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001cfe:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001d00:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001d02:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001d06:	42b3      	cmp	r3, r6
 8001d08:	bf84      	itt	hi
 8001d0a:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001d0e:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001d10:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001d12:	bf91      	iteee	ls
 8001d14:	1c69      	addls	r1, r5, #1
 8001d16:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001d1a:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001d1e:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001d20:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001d22:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001d24:	d821      	bhi.n	8001d6a <HAL_I2C_Init+0x9e>
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d2c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	bf98      	it	ls
 8001d34:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d36:	6a21      	ldr	r1, [r4, #32]
 8001d38:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001d3a:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001d40:	68e1      	ldr	r1, [r4, #12]
 8001d42:	6923      	ldr	r3, [r4, #16]
 8001d44:	430b      	orrs	r3, r1
 8001d46:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001d48:	69a1      	ldr	r1, [r4, #24]
 8001d4a:	6963      	ldr	r3, [r4, #20]
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001d50:	6813      	ldr	r3, [r2, #0]
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d58:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001d5a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d5c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d62:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d64:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001d68:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001d6a:	68a1      	ldr	r1, [r4, #8]
 8001d6c:	b949      	cbnz	r1, 8001d82 <HAL_I2C_Init+0xb6>
 8001d6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001d72:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d76:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001d7a:	b163      	cbz	r3, 8001d96 <HAL_I2C_Init+0xca>
 8001d7c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001d80:	e7d9      	b.n	8001d36 <HAL_I2C_Init+0x6a>
 8001d82:	2119      	movs	r1, #25
 8001d84:	434b      	muls	r3, r1
 8001d86:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d8a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001d8e:	b113      	cbz	r3, 8001d96 <HAL_I2C_Init+0xca>
 8001d90:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001d94:	e7cf      	b.n	8001d36 <HAL_I2C_Init+0x6a>
 8001d96:	2001      	movs	r0, #1
 8001d98:	e7cd      	b.n	8001d36 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001d9a:	2001      	movs	r0, #1
}
 8001d9c:	bd70      	pop	{r4, r5, r6, pc}
 8001d9e:	bf00      	nop
 8001da0:	000186a0 	.word	0x000186a0
 8001da4:	000f4240 	.word	0x000f4240

08001da8 <HAL_I2C_Master_Transmit>:
{
 8001da8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001dac:	4604      	mov	r4, r0
 8001dae:	461f      	mov	r7, r3
 8001db0:	460d      	mov	r5, r1
 8001db2:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001db4:	f7ff fc66 	bl	8001684 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001db8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001dbc:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001dbe:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001dc0:	d004      	beq.n	8001dcc <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001dc2:	2502      	movs	r5, #2
}
 8001dc4:	4628      	mov	r0, r5
 8001dc6:	b004      	add	sp, #16
 8001dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dcc:	9000      	str	r0, [sp, #0]
 8001dce:	2319      	movs	r3, #25
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	495d      	ldr	r1, [pc, #372]	; (8001f48 <HAL_I2C_Master_Transmit+0x1a0>)
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f7ff fefe 	bl	8001bd6 <I2C_WaitOnFlagUntilTimeout>
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	d1f1      	bne.n	8001dc2 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001dde:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d0ed      	beq.n	8001dc2 <HAL_I2C_Master_Transmit+0x1a>
 8001de6:	2301      	movs	r3, #1
 8001de8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001df2:	bf5e      	ittt	pl
 8001df4:	681a      	ldrpl	r2, [r3, #0]
 8001df6:	f042 0201 	orrpl.w	r2, r2, #1
 8001dfa:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e02:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e04:	2221      	movs	r2, #33	; 0x21
 8001e06:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e0a:	2210      	movs	r2, #16
 8001e0c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e10:	2200      	movs	r2, #0
 8001e12:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e14:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001e18:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e1a:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001e1c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e1e:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8001e22:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e26:	2a04      	cmp	r2, #4
 8001e28:	d004      	beq.n	8001e34 <HAL_I2C_Master_Transmit+0x8c>
 8001e2a:	2a01      	cmp	r2, #1
 8001e2c:	d002      	beq.n	8001e34 <HAL_I2C_Master_Transmit+0x8c>
 8001e2e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001e32:	d104      	bne.n	8001e3e <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	e002      	b.n	8001e44 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e3e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e40:	2a12      	cmp	r2, #18
 8001e42:	d0f7      	beq.n	8001e34 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e44:	9600      	str	r6, [sp, #0]
 8001e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e4e:	4620      	mov	r0, r4
 8001e50:	f7ff fec1 	bl	8001bd6 <I2C_WaitOnFlagUntilTimeout>
 8001e54:	bb28      	cbnz	r0, 8001ea2 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e56:	6923      	ldr	r3, [r4, #16]
 8001e58:	6822      	ldr	r2, [r4, #0]
 8001e5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e5e:	d112      	bne.n	8001e86 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e60:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001e64:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e66:	4633      	mov	r3, r6
 8001e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001e6a:	4938      	ldr	r1, [pc, #224]	; (8001f4c <HAL_I2C_Master_Transmit+0x1a4>)
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	f7ff fe72 	bl	8001b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e72:	4605      	mov	r5, r0
 8001e74:	b9a0      	cbnz	r0, 8001ea0 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e76:	6823      	ldr	r3, [r4, #0]
 8001e78:	9003      	str	r0, [sp, #12]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	9203      	str	r2, [sp, #12]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	9303      	str	r3, [sp, #12]
 8001e82:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001e84:	e050      	b.n	8001f28 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e86:	11eb      	asrs	r3, r5, #7
 8001e88:	f003 0306 	and.w	r3, r3, #6
 8001e8c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001e90:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e92:	492f      	ldr	r1, [pc, #188]	; (8001f50 <HAL_I2C_Master_Transmit+0x1a8>)
 8001e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001e96:	4633      	mov	r3, r6
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f7ff fe5c 	bl	8001b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e9e:	b148      	cbz	r0, 8001eb4 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ea0:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	d107      	bne.n	8001ebc <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8001eac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001eb0:	2501      	movs	r5, #1
 8001eb2:	e787      	b.n	8001dc4 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	b2ed      	uxtb	r5, r5
 8001eb8:	611d      	str	r5, [r3, #16]
 8001eba:	e7d4      	b.n	8001e66 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8001ebc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001ec0:	2503      	movs	r5, #3
 8001ec2:	e77f      	b.n	8001dc4 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ec4:	4632      	mov	r2, r6
 8001ec6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f7ff feb2 	bl	8001c32 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ece:	b140      	cbz	r0, 8001ee2 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ed0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d1f4      	bne.n	8001ec0 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ed6:	6822      	ldr	r2, [r4, #0]
 8001ed8:	6813      	ldr	r3, [r2, #0]
 8001eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	e7e6      	b.n	8001eb0 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001ee2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001ee4:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize--;
 8001ee6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001ee8:	1c4b      	adds	r3, r1, #1
 8001eea:	6263      	str	r3, [r4, #36]	; 0x24
 8001eec:	780b      	ldrb	r3, [r1, #0]
 8001eee:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8001ef0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ef8:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001efa:	1e53      	subs	r3, r2, #1
 8001efc:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001efe:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001f00:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f02:	d50a      	bpl.n	8001f1a <HAL_I2C_Master_Transmit+0x172>
 8001f04:	b14b      	cbz	r3, 8001f1a <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001f06:	1c8b      	adds	r3, r1, #2
 8001f08:	6263      	str	r3, [r4, #36]	; 0x24
 8001f0a:	784b      	ldrb	r3, [r1, #1]
 8001f0c:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8001f0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001f14:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001f16:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001f18:	8522      	strh	r2, [r4, #40]	; 0x28
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f1a:	4632      	mov	r2, r6
 8001f1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f7ff fead 	bl	8001c7e <I2C_WaitOnBTFFlagUntilTimeout>
 8001f24:	2800      	cmp	r0, #0
 8001f26:	d1d3      	bne.n	8001ed0 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8001f28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1ca      	bne.n	8001ec4 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001f2e:	6821      	ldr	r1, [r4, #0]
 8001f30:	680a      	ldr	r2, [r1, #0]
 8001f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f36:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001f3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001f46:	e73d      	b.n	8001dc4 <HAL_I2C_Master_Transmit+0x1c>
 8001f48:	00100002 	.word	0x00100002
 8001f4c:	00010002 	.word	0x00010002
 8001f50:	00010008 	.word	0x00010008

08001f54 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001f54:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	2a20      	cmp	r2, #32
{
 8001f5c:	b510      	push	{r4, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001f5e:	d116      	bne.n	8001f8e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f60:	2324      	movs	r3, #36	; 0x24
 8001f62:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 8001f66:	6803      	ldr	r3, [r0, #0]
 8001f68:	681c      	ldr	r4, [r3, #0]
 8001f6a:	f024 0401 	bic.w	r4, r4, #1
 8001f6e:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001f70:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001f72:	f024 0410 	bic.w	r4, r4, #16
 8001f76:	625c      	str	r4, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001f78:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001f7a:	4321      	orrs	r1, r4
 8001f7c:	6259      	str	r1, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c); 
 8001f7e:	6819      	ldr	r1, [r3, #0]
 8001f80:	f041 0101 	orr.w	r1, r1, #1
 8001f84:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f86:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_OK;
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001f8e:	2002      	movs	r0, #2
  }
}
 8001f90:	bd10      	pop	{r4, pc}

08001f92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f92:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001f94:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001f98:	b2e4      	uxtb	r4, r4
 8001f9a:	2c20      	cmp	r4, #32
 8001f9c:	d116      	bne.n	8001fcc <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);  
 8001f9e:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa0:	2324      	movs	r3, #36	; 0x24
 8001fa2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);  
 8001fa6:	6815      	ldr	r5, [r2, #0]
 8001fa8:	f025 0501 	bic.w	r5, r5, #1
 8001fac:	6015      	str	r5, [r2, #0]
    
    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8001fae:	6a55      	ldr	r5, [r2, #36]	; 0x24
    
    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8001fb0:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001fb4:	402b      	ands	r3, r5
    
    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001fb6:	430b      	orrs	r3, r1
    
    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	6253      	str	r3, [r2, #36]	; 0x24
    
    __HAL_I2C_ENABLE(hi2c); 
 8001fbc:	6813      	ldr	r3, [r2, #0]
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6013      	str	r3, [r2, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 8001fc4:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    
    return HAL_OK; 
 8001fc8:	2000      	movs	r0, #0
 8001fca:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    return HAL_BUSY; 
 8001fcc:	2002      	movs	r0, #2
  }
}  
 8001fce:	bd30      	pop	{r4, r5, pc}

08001fd0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1 = 0U;
  uint32_t tmp2 = 0U;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001fd4:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001fd6:	6804      	ldr	r4, [r0, #0]
 8001fd8:	684f      	ldr	r7, [r1, #4]
 8001fda:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001fdc:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 8001fe0:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001fe4:	3284      	adds	r2, #132	; 0x84
 8001fe6:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001fe8:	f10e 0601 	add.w	r6, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001fec:	6858      	ldr	r0, [r3, #4]
 8001fee:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8001ff2:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001ff4:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001ff6:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001ffa:	f3c0 400b 	ubfx	r0, r0, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001ffe:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002000:	4430      	add	r0, r6
 8002002:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002006:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002008:	68e0      	ldr	r0, [r4, #12]
 800200a:	68cd      	ldr	r5, [r1, #12]
 800200c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002010:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002012:	6898      	ldr	r0, [r3, #8]
 8002014:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8002018:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 800201a:	68e6      	ldr	r6, [r4, #12]
 800201c:	6888      	ldr	r0, [r1, #8]
 800201e:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8002022:	3001      	adds	r0, #1
 8002024:	4430      	add	r0, r6
 8002026:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800202a:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800202c:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800202e:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002030:	f020 0007 	bic.w	r0, r0, #7
 8002034:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002036:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800203a:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800203c:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800203e:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002042:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002046:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800204a:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800204e:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8002052:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8002056:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800205a:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800205c:	6958      	ldr	r0, [r3, #20]
 800205e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8002062:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002064:	6948      	ldr	r0, [r1, #20]
 8002066:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002068:	69d8      	ldr	r0, [r3, #28]
 800206a:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800206e:	f020 0007 	bic.w	r0, r0, #7
 8002072:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002074:	6a08      	ldr	r0, [r1, #32]
 8002076:	69cd      	ldr	r5, [r1, #28]
 8002078:	4305      	orrs	r5, r0
 800207a:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800207c:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800207e:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002080:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002084:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002086:	b31e      	cbz	r6, 80020d0 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002088:	2e01      	cmp	r6, #1
 800208a:	d023      	beq.n	80020d4 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800208c:	1eb0      	subs	r0, r6, #2
 800208e:	2802      	cmp	r0, #2
 8002090:	d922      	bls.n	80020d8 <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002092:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8002094:	bf0c      	ite	eq
 8002096:	2002      	moveq	r0, #2
 8002098:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800209a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800209c:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80020a0:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80020a2:	6a8d      	ldr	r5, [r1, #40]	; 0x28

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80020a4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80020a6:	eba7 070e 	sub.w	r7, r7, lr
 80020aa:	4345      	muls	r5, r0
 80020ac:	4378      	muls	r0, r7
 80020ae:	3003      	adds	r0, #3
 80020b0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80020b4:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80020b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80020b8:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80020bc:	f020 0007 	bic.w	r0, r0, #7
 80020c0:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80020c2:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80020c4:	58a3      	ldr	r3, [r4, r2]
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	50a3      	str	r3, [r4, r2]
 80020cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80020d0:	2004      	movs	r0, #4
 80020d2:	e7e2      	b.n	800209a <LTDC_SetConfig+0xca>
    tmp = 3U;
 80020d4:	2003      	movs	r0, #3
 80020d6:	e7e0      	b.n	800209a <LTDC_SetConfig+0xca>
    tmp = 2U;
 80020d8:	2002      	movs	r0, #2
 80020da:	e7de      	b.n	800209a <LTDC_SetConfig+0xca>

080020dc <HAL_LTDC_Init>:
{
 80020dc:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 80020de:	4604      	mov	r4, r0
 80020e0:	2800      	cmp	r0, #0
 80020e2:	d063      	beq.n	80021ac <HAL_LTDC_Init+0xd0>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80020e4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80020e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020ec:	b91b      	cbnz	r3, 80020f6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80020ee:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80020f2:	f003 fa87 	bl	8005604 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80020f6:	2302      	movs	r3, #2
 80020f8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80020fc:	6823      	ldr	r3, [r4, #0]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80020fe:	68a0      	ldr	r0, [r4, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002100:	699a      	ldr	r2, [r3, #24]
 8002102:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002106:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002108:	6862      	ldr	r2, [r4, #4]
 800210a:	6999      	ldr	r1, [r3, #24]
 800210c:	4302      	orrs	r2, r0
 800210e:	68e0      	ldr	r0, [r4, #12]
 8002110:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002112:	6920      	ldr	r0, [r4, #16]
 8002114:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002116:	430a      	orrs	r2, r1
 8002118:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	4924      	ldr	r1, [pc, #144]	; (80021b0 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800211e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002120:	400a      	ands	r2, r1
 8002122:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800212a:	69a0      	ldr	r0, [r4, #24]
 800212c:	4302      	orrs	r2, r0
 800212e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002130:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002132:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002134:	400a      	ands	r2, r1
 8002136:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800213e:	6a20      	ldr	r0, [r4, #32]
 8002140:	4302      	orrs	r2, r0
 8002142:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002144:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002146:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002148:	400a      	ands	r2, r1
 800214a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800214c:	691a      	ldr	r2, [r3, #16]
 800214e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002152:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002154:	4302      	orrs	r2, r0
 8002156:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	4011      	ands	r1, r2
 800215c:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800215e:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002160:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002162:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002166:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002168:	430a      	orrs	r2, r1
 800216a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800216c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800216e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002172:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002176:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 800217a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800217c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800217e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8002182:	430a      	orrs	r2, r1
 8002184:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002188:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800218c:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800218e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002190:	f042 0206 	orr.w	r2, r2, #6
 8002194:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002196:	699a      	ldr	r2, [r3, #24]
 8002198:	f042 0201 	orr.w	r2, r2, #1
 800219c:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800219e:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80021a0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80021a2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80021a6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 80021aa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80021ac:	2001      	movs	r0, #1
}
 80021ae:	bd38      	pop	{r3, r4, r5, pc}
 80021b0:	f000f800 	.word	0xf000f800

080021b4 <HAL_LTDC_ConfigLayer>:
{   
 80021b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80021b6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80021ba:	2b01      	cmp	r3, #1
{   
 80021bc:	4606      	mov	r6, r0
 80021be:	468e      	mov	lr, r1
 80021c0:	4694      	mov	ip, r2
 80021c2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 80021c6:	d01d      	beq.n	8002204 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80021c8:	2434      	movs	r4, #52	; 0x34
 80021ca:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80021cc:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80021d0:	fb04 6402 	mla	r4, r4, r2, r6
 80021d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  __HAL_LOCK(hltdc);
 80021d6:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80021d8:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 80021da:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80021de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e8:	682b      	ldr	r3, [r5, #0]
 80021ea:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80021ec:	4630      	mov	r0, r6
 80021ee:	4662      	mov	r2, ip
 80021f0:	4671      	mov	r1, lr
 80021f2:	f7ff feed 	bl	8001fd0 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80021f6:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80021f8:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80021fa:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80021fc:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002200:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8002204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002206 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8002206:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8002208:	4606      	mov	r6, r0
{ 
 800220a:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 800220c:	2800      	cmp	r0, #0
 800220e:	d064      	beq.n	80022da <HAL_PCD_Init+0xd4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002210:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8002212:	4634      	mov	r4, r6
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002214:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 8002218:	f003 fd6a 	bl	8005cf0 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 800221c:	f854 0b10 	ldr.w	r0, [r4], #16
 8002220:	f001 f9b2 	bl	8003588 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002226:	466d      	mov	r5, sp
 8002228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002232:	e885 0003 	stmia.w	r5, {r0, r1}
 8002236:	1d37      	adds	r7, r6, #4
 8002238:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800223c:	6830      	ldr	r0, [r6, #0]
 800223e:	f001 f963 	bl	8003508 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8002242:	2100      	movs	r1, #0
 8002244:	6830      	ldr	r0, [r6, #0]
 8002246:	f001 f9a5 	bl	8003594 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 800224a:	2100      	movs	r1, #0
 800224c:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 800224e:	4632      	mov	r2, r6
 8002250:	f106 0410 	add.w	r4, r6, #16
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8002254:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002256:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 8002258:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 800225c:	87d1      	strh	r1, [r2, #62]	; 0x3e
 for (i = 0U; i < 15U; i++)
 800225e:	3101      	adds	r1, #1
 8002260:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].is_in = 1U;
 8002262:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002266:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 800226a:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 800226c:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 800226e:	64d0      	str	r0, [r2, #76]	; 0x4c
 8002270:	f102 021c 	add.w	r2, r2, #28
 for (i = 0U; i < 15U; i++)
 8002274:	d1f0      	bne.n	8002258 <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8002276:	2200      	movs	r2, #0
 8002278:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0U;
 800227c:	4611      	mov	r1, r2
   hpcd->Instance->DIEPTXF[i] = 0U;
 800227e:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->OUT_ep[i].num = i;
 8002282:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 8002286:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->Instance->DIEPTXF[i] = 0U;
 8002288:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 for (i = 0U; i < 15U; i++)
 800228c:	3201      	adds	r2, #1
 800228e:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].is_in = 0U;
 8002290:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002294:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 8002298:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 800229c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 80022a0:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   hpcd->Instance->DIEPTXF[i] = 0U;
 80022a4:	6041      	str	r1, [r0, #4]
 80022a6:	f103 031c 	add.w	r3, r3, #28
 for (i = 0U; i < 15U; i++)
 80022aa:	d1e8      	bne.n	800227e <HAL_PCD_Init+0x78>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80022ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ae:	466d      	mov	r5, sp
 80022b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80022be:	4670      	mov	r0, lr
 80022c0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80022c4:	f001 f97e 	bl	80035c4 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 80022c8:	2301      	movs	r3, #1
 80022ca:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 80022ce:	6830      	ldr	r0, [r6, #0]
 80022d0:	f001 fc9b 	bl	8003c0a <USB_DevDisconnect>
 return HAL_OK;
 80022d4:	2000      	movs	r0, #0
}
 80022d6:	b00b      	add	sp, #44	; 0x2c
 80022d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80022da:	2001      	movs	r0, #1
 80022dc:	e7fb      	b.n	80022d6 <HAL_PCD_Init+0xd0>

080022de <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 80022de:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80022e2:	2b01      	cmp	r3, #1
{ 
 80022e4:	b510      	push	{r4, lr}
 80022e6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80022e8:	d00c      	beq.n	8002304 <HAL_PCD_Start+0x26>
 80022ea:	2301      	movs	r3, #1
 80022ec:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 80022f0:	6800      	ldr	r0, [r0, #0]
 80022f2:	f001 fc7e 	bl	8003bf2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80022f6:	6820      	ldr	r0, [r4, #0]
 80022f8:	f001 f940 	bl	800357c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 80022fc:	2000      	movs	r0, #0
 80022fe:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8002302:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8002304:	2002      	movs	r0, #2
}
 8002306:	bd10      	pop	{r4, pc}

08002308 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800230c:	f8d0 9000 	ldr.w	r9, [r0]
{
 8002310:	b087      	sub	sp, #28
 8002312:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002314:	4648      	mov	r0, r9
 8002316:	f001 fcb2 	bl	8003c7e <USB_GetMode>
 800231a:	9002      	str	r0, [sp, #8]
 800231c:	2800      	cmp	r0, #0
 800231e:	f040 812e 	bne.w	800257e <HAL_PCD_IRQHandler+0x276>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8002322:	6820      	ldr	r0, [r4, #0]
 8002324:	f001 fc7d 	bl	8003c22 <USB_ReadInterrupts>
 8002328:	2800      	cmp	r0, #0
 800232a:	f000 8128 	beq.w	800257e <HAL_PCD_IRQHandler+0x276>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800232e:	6820      	ldr	r0, [r4, #0]
 8002330:	f001 fc77 	bl	8003c22 <USB_ReadInterrupts>
 8002334:	0785      	lsls	r5, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002336:	bf48      	it	mi
 8002338:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800233a:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800233c:	bf42      	ittt	mi
 800233e:	6953      	ldrmi	r3, [r2, #20]
 8002340:	f003 0302 	andmi.w	r3, r3, #2
 8002344:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002346:	f001 fc6c 	bl	8003c22 <USB_ReadInterrupts>
 800234a:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 800234e:	d00a      	beq.n	8002366 <HAL_PCD_IRQHandler+0x5e>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002350:	6820      	ldr	r0, [r4, #0]
 8002352:	f001 fc6a 	bl	8003c2a <USB_ReadDevAllOutEpInterrupt>
 8002356:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 800235a:	4607      	mov	r7, r0
 800235c:	46a2      	mov	sl, r4
      epnum = 0U;
 800235e:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8002360:	2f00      	cmp	r7, #0
 8002362:	f040 810f 	bne.w	8002584 <HAL_PCD_IRQHandler+0x27c>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002366:	6820      	ldr	r0, [r4, #0]
 8002368:	f001 fc5b 	bl	8003c22 <USB_ReadInterrupts>
 800236c:	0341      	lsls	r1, r0, #13
 800236e:	d50b      	bpl.n	8002388 <HAL_PCD_IRQHandler+0x80>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002370:	6820      	ldr	r0, [r4, #0]
 8002372:	f001 fc62 	bl	8003c3a <USB_ReadDevAllInEpInterrupt>
 8002376:	4626      	mov	r6, r4
 8002378:	9003      	str	r0, [sp, #12]
 800237a:	f509 6810 	add.w	r8, r9, #2304	; 0x900
      
      epnum = 0U;
 800237e:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8002380:	9b03      	ldr	r3, [sp, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f040 813f 	bne.w	8002606 <HAL_PCD_IRQHandler+0x2fe>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002388:	6820      	ldr	r0, [r4, #0]
 800238a:	f001 fc4a 	bl	8003c22 <USB_ReadInterrupts>
 800238e:	2800      	cmp	r0, #0
 8002390:	da0d      	bge.n	80023ae <HAL_PCD_IRQHandler+0xa6>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002392:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 800239e:	4620      	mov	r0, r4
 80023a0:	f003 fd24 	bl	8005dec <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023a4:	6822      	ldr	r2, [r4, #0]
 80023a6:	6953      	ldr	r3, [r2, #20]
 80023a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023ac:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023ae:	6820      	ldr	r0, [r4, #0]
 80023b0:	f001 fc37 	bl	8003c22 <USB_ReadInterrupts>
 80023b4:	0506      	lsls	r6, r0, #20
 80023b6:	d50b      	bpl.n	80023d0 <HAL_PCD_IRQHandler+0xc8>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80023b8:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 80023bc:	07d8      	lsls	r0, r3, #31
 80023be:	d502      	bpl.n	80023c6 <HAL_PCD_IRQHandler+0xbe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 80023c0:	4620      	mov	r0, r4
 80023c2:	f003 fcfb 	bl	8005dbc <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80023c6:	6822      	ldr	r2, [r4, #0]
 80023c8:	6953      	ldr	r3, [r2, #20]
 80023ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ce:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80023d0:	6820      	ldr	r0, [r4, #0]
 80023d2:	f001 fc26 	bl	8003c22 <USB_ReadInterrupts>
 80023d6:	04c1      	lsls	r1, r0, #19
 80023d8:	d537      	bpl.n	800244a <HAL_PCD_IRQHandler+0x142>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80023da:	f509 6600 	add.w	r6, r9, #2048	; 0x800
 80023de:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 80023e0:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80023e2:	f023 0301 	bic.w	r3, r3, #1
 80023e6:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 80023e8:	2110      	movs	r1, #16
 80023ea:	f001 f987 	bl	80036fc <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ee:	6861      	ldr	r1, [r4, #4]
 80023f0:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 80023f4:	22ff      	movs	r2, #255	; 0xff
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f6:	9802      	ldr	r0, [sp, #8]
 80023f8:	4288      	cmp	r0, r1
 80023fa:	f040 8192 	bne.w	8002722 <HAL_PCD_IRQHandler+0x41a>
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002402:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002404:	69f3      	ldr	r3, [r6, #28]
 8002406:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800240a:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 800240c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 818f 	beq.w	8002732 <HAL_PCD_IRQHandler+0x42a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8002414:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8002418:	f043 030b 	orr.w	r3, r3, #11
 800241c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8002420:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8002422:	f043 030b 	orr.w	r3, r3, #11
 8002426:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002428:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800242c:	7c21      	ldrb	r1, [r4, #16]
 800242e:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002430:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002434:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002438:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 800243c:	f001 fc3e 	bl	8003cbc <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002440:	6822      	ldr	r2, [r4, #0]
 8002442:	6953      	ldr	r3, [r2, #20]
 8002444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002448:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800244a:	6820      	ldr	r0, [r4, #0]
 800244c:	f001 fbe9 	bl	8003c22 <USB_ReadInterrupts>
 8002450:	0482      	lsls	r2, r0, #18
 8002452:	d51d      	bpl.n	8002490 <HAL_PCD_IRQHandler+0x188>
    {
      USB_ActivateSetup(hpcd->Instance);
 8002454:	6820      	ldr	r0, [r4, #0]
 8002456:	f001 fc16 	bl	8003c86 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800245a:	6820      	ldr	r0, [r4, #0]
 800245c:	68c3      	ldr	r3, [r0, #12]
 800245e:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8002462:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8002464:	f001 f973 	bl	800374e <USB_GetDevSpeed>
 8002468:	2800      	cmp	r0, #0
 800246a:	f040 816b 	bne.w	8002744 <HAL_PCD_IRQHandler+0x43c>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 800246e:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8002470:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8002472:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002476:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002478:	68d3      	ldr	r3, [r2, #12]
 800247a:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 800247e:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8002480:	4620      	mov	r0, r4
 8002482:	f003 fc8a 	bl	8005d9a <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002486:	6822      	ldr	r2, [r4, #0]
 8002488:	6953      	ldr	r3, [r2, #20]
 800248a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800248e:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002490:	6820      	ldr	r0, [r4, #0]
 8002492:	f001 fbc6 	bl	8003c22 <USB_ReadInterrupts>
 8002496:	06c3      	lsls	r3, r0, #27
 8002498:	d52b      	bpl.n	80024f2 <HAL_PCD_IRQHandler+0x1ea>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800249a:	6822      	ldr	r2, [r4, #0]
 800249c:	6993      	ldr	r3, [r2, #24]
 800249e:	f023 0310 	bic.w	r3, r3, #16
 80024a2:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 80024a4:	f8d9 6020 	ldr.w	r6, [r9, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 80024a8:	f3c6 4343 	ubfx	r3, r6, #17, #4
 80024ac:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80024ae:	f006 080f 	and.w	r8, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 80024b2:	f040 81a8 	bne.w	8002806 <HAL_PCD_IRQHandler+0x4fe>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80024b6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80024ba:	421e      	tst	r6, r3
 80024bc:	d014      	beq.n	80024e8 <HAL_PCD_IRQHandler+0x1e0>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 80024be:	271c      	movs	r7, #28
 80024c0:	fb07 4708 	mla	r7, r7, r8, r4
 80024c4:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80024c8:	4632      	mov	r2, r6
 80024ca:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 80024ce:	4648      	mov	r0, r9
 80024d0:	f001 fb39 	bl	8003b46 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80024d4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80024d8:	4433      	add	r3, r6
 80024da:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80024de:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80024e2:	441e      	add	r6, r3
 80024e4:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024e8:	6822      	ldr	r2, [r4, #0]
 80024ea:	6993      	ldr	r3, [r2, #24]
 80024ec:	f043 0310 	orr.w	r3, r3, #16
 80024f0:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80024f2:	6820      	ldr	r0, [r4, #0]
 80024f4:	f001 fb95 	bl	8003c22 <USB_ReadInterrupts>
 80024f8:	0707      	lsls	r7, r0, #28
 80024fa:	d507      	bpl.n	800250c <HAL_PCD_IRQHandler+0x204>
    {
      HAL_PCD_SOFCallback(hpcd);
 80024fc:	4620      	mov	r0, r4
 80024fe:	f003 fc48 	bl	8005d92 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002502:	6822      	ldr	r2, [r4, #0]
 8002504:	6953      	ldr	r3, [r2, #20]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800250c:	6820      	ldr	r0, [r4, #0]
 800250e:	f001 fb88 	bl	8003c22 <USB_ReadInterrupts>
 8002512:	02c6      	lsls	r6, r0, #11
 8002514:	d508      	bpl.n	8002528 <HAL_PCD_IRQHandler+0x220>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8002516:	b2e9      	uxtb	r1, r5
 8002518:	4620      	mov	r0, r4
 800251a:	f003 fc6f 	bl	8005dfc <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800251e:	6822      	ldr	r2, [r4, #0]
 8002520:	6953      	ldr	r3, [r2, #20]
 8002522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002526:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002528:	6820      	ldr	r0, [r4, #0]
 800252a:	f001 fb7a 	bl	8003c22 <USB_ReadInterrupts>
 800252e:	0280      	lsls	r0, r0, #10
 8002530:	d508      	bpl.n	8002544 <HAL_PCD_IRQHandler+0x23c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8002532:	b2e9      	uxtb	r1, r5
 8002534:	4620      	mov	r0, r4
 8002536:	f003 fc5d 	bl	8005df4 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800253a:	6822      	ldr	r2, [r4, #0]
 800253c:	6953      	ldr	r3, [r2, #20]
 800253e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002542:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002544:	6820      	ldr	r0, [r4, #0]
 8002546:	f001 fb6c 	bl	8003c22 <USB_ReadInterrupts>
 800254a:	0041      	lsls	r1, r0, #1
 800254c:	d507      	bpl.n	800255e <HAL_PCD_IRQHandler+0x256>
    {
      HAL_PCD_ConnectCallback(hpcd);
 800254e:	4620      	mov	r0, r4
 8002550:	f003 fc58 	bl	8005e04 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002554:	6822      	ldr	r2, [r4, #0]
 8002556:	6953      	ldr	r3, [r2, #20]
 8002558:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800255c:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800255e:	6820      	ldr	r0, [r4, #0]
 8002560:	f001 fb5f 	bl	8003c22 <USB_ReadInterrupts>
 8002564:	0742      	lsls	r2, r0, #29
 8002566:	d50a      	bpl.n	800257e <HAL_PCD_IRQHandler+0x276>
    {
      temp = hpcd->Instance->GOTGINT;
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800256c:	076b      	lsls	r3, r5, #29
 800256e:	d502      	bpl.n	8002576 <HAL_PCD_IRQHandler+0x26e>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8002570:	4620      	mov	r0, r4
 8002572:	f003 fc4b 	bl	8005e0c <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8002576:	6823      	ldr	r3, [r4, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4315      	orrs	r5, r2
 800257c:	605d      	str	r5, [r3, #4]
    }
  }
}
 800257e:	b007      	add	sp, #28
 8002580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1U)
 8002584:	07f8      	lsls	r0, r7, #31
 8002586:	d538      	bpl.n	80025fa <HAL_PCD_IRQHandler+0x2f2>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8002588:	fa5f fb85 	uxtb.w	fp, r5
 800258c:	4659      	mov	r1, fp
 800258e:	6820      	ldr	r0, [r4, #0]
 8002590:	f001 fb5b 	bl	8003c4a <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002594:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8002598:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800259a:	d021      	beq.n	80025e0 <HAL_PCD_IRQHandler+0x2d8>
            if(hpcd->Init.dma_enable == 1U)
 800259c:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800259e:	2301      	movs	r3, #1
            if(hpcd->Init.dma_enable == 1U)
 80025a0:	4299      	cmp	r1, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025a2:	60b3      	str	r3, [r6, #8]
            if(hpcd->Init.dma_enable == 1U)
 80025a4:	d10c      	bne.n	80025c0 <HAL_PCD_IRQHandler+0x2b8>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 80025a6:	6931      	ldr	r1, [r6, #16]
 80025a8:	f8da 0200 	ldr.w	r0, [sl, #512]	; 0x200
 80025ac:	f3c1 0112 	ubfx	r1, r1, #0, #19
 80025b0:	1a41      	subs	r1, r0, r1
 80025b2:	f8ca 1210 	str.w	r1, [sl, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 80025b6:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
 80025ba:	4408      	add	r0, r1
 80025bc:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 80025c0:	4659      	mov	r1, fp
 80025c2:	4620      	mov	r0, r4
 80025c4:	f003 fbd4 	bl	8005d70 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 80025c8:	6921      	ldr	r1, [r4, #16]
 80025ca:	2901      	cmp	r1, #1
 80025cc:	d108      	bne.n	80025e0 <HAL_PCD_IRQHandler+0x2d8>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025ce:	b93d      	cbnz	r5, 80025e0 <HAL_PCD_IRQHandler+0x2d8>
 80025d0:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 80025d4:	b922      	cbnz	r2, 80025e0 <HAL_PCD_IRQHandler+0x2d8>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025d6:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80025da:	6820      	ldr	r0, [r4, #0]
 80025dc:	f001 fb6e 	bl	8003cbc <USB_EP0_OutStart>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025e0:	f018 0f08 	tst.w	r8, #8
 80025e4:	d004      	beq.n	80025f0 <HAL_PCD_IRQHandler+0x2e8>
            HAL_PCD_SetupStageCallback(hpcd);
 80025e6:	4620      	mov	r0, r4
 80025e8:	f003 fbbc 	bl	8005d64 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80025ec:	2308      	movs	r3, #8
 80025ee:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80025f0:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80025f4:	bf1c      	itt	ne
 80025f6:	2310      	movne	r3, #16
 80025f8:	60b3      	strne	r3, [r6, #8]
        epnum++;
 80025fa:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80025fc:	087f      	lsrs	r7, r7, #1
 80025fe:	3620      	adds	r6, #32
 8002600:	f10a 0a1c 	add.w	sl, sl, #28
 8002604:	e6ac      	b.n	8002360 <HAL_PCD_IRQHandler+0x58>
        if (ep_intr & 0x1U) /* In ITR */
 8002606:	9b03      	ldr	r3, [sp, #12]
 8002608:	07da      	lsls	r2, r3, #31
 800260a:	d558      	bpl.n	80026be <HAL_PCD_IRQHandler+0x3b6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 800260c:	fa5f fb85 	uxtb.w	fp, r5
 8002610:	4659      	mov	r1, fp
 8002612:	6820      	ldr	r0, [r4, #0]
 8002614:	f001 fb23 	bl	8003c5e <USB_ReadDevInEPInterrupt>
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002618:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 800261a:	4607      	mov	r7, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800261c:	d520      	bpl.n	8002660 <HAL_PCD_IRQHandler+0x358>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800261e:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = 0x1U << epnum;
 8002622:	2101      	movs	r1, #1
 8002624:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002626:	ea23 0301 	bic.w	r3, r3, r1
 800262a:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800262e:	2301      	movs	r3, #1
 8002630:	f8c8 3008 	str.w	r3, [r8, #8]
            if (hpcd->Init.dma_enable == 1U)
 8002634:	6923      	ldr	r3, [r4, #16]
 8002636:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8002638:	bf01      	itttt	eq
 800263a:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 800263c:	6c32      	ldreq	r2, [r6, #64]	; 0x40
 800263e:	189b      	addeq	r3, r3, r2
 8002640:	6473      	streq	r3, [r6, #68]	; 0x44
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8002642:	4659      	mov	r1, fp
 8002644:	4620      	mov	r0, r4
 8002646:	f003 fb9c 	bl	8005d82 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 800264a:	6921      	ldr	r1, [r4, #16]
 800264c:	2901      	cmp	r1, #1
 800264e:	d107      	bne.n	8002660 <HAL_PCD_IRQHandler+0x358>
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002650:	b935      	cbnz	r5, 8002660 <HAL_PCD_IRQHandler+0x358>
 8002652:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002654:	b923      	cbnz	r3, 8002660 <HAL_PCD_IRQHandler+0x358>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002656:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 800265a:	6820      	ldr	r0, [r4, #0]
 800265c:	f001 fb2e 	bl	8003cbc <USB_EP0_OutStart>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002660:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002662:	bf44      	itt	mi
 8002664:	2308      	movmi	r3, #8
 8002666:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800266a:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800266c:	bf44      	itt	mi
 800266e:	2310      	movmi	r3, #16
 8002670:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002674:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002676:	bf44      	itt	mi
 8002678:	2340      	movmi	r3, #64	; 0x40
 800267a:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800267e:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002680:	bf44      	itt	mi
 8002682:	2302      	movmi	r3, #2
 8002684:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002688:	063f      	lsls	r7, r7, #24
 800268a:	d518      	bpl.n	80026be <HAL_PCD_IRQHandler+0x3b6>
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8002690:	6cf7      	ldr	r7, [r6, #76]	; 0x4c
 8002692:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002694:	1aff      	subs	r7, r7, r3
 8002696:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002698:	429f      	cmp	r7, r3
 800269a:	bf28      	it	cs
 800269c:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800269e:	9b04      	ldr	r3, [sp, #16]
 80026a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 80026a4:	f107 0a03 	add.w	sl, r7, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80026a8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 80026ac:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80026b0:	9305      	str	r3, [sp, #20]
 80026b2:	9b05      	ldr	r3, [sp, #20]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	4553      	cmp	r3, sl
 80026ba:	d808      	bhi.n	80026ce <HAL_PCD_IRQHandler+0x3c6>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 80026bc:	b32f      	cbz	r7, 800270a <HAL_PCD_IRQHandler+0x402>
        ep_intr >>= 1U;
 80026be:	9b03      	ldr	r3, [sp, #12]
 80026c0:	085b      	lsrs	r3, r3, #1
        epnum++;
 80026c2:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80026c4:	9303      	str	r3, [sp, #12]
 80026c6:	361c      	adds	r6, #28
 80026c8:	f108 0820 	add.w	r8, r8, #32
 80026cc:	e658      	b.n	8002380 <HAL_PCD_IRQHandler+0x78>
          (ep->xfer_count < ep->xfer_len) &&
 80026ce:	6d32      	ldr	r2, [r6, #80]	; 0x50
 80026d0:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d9f2      	bls.n	80026bc <HAL_PCD_IRQHandler+0x3b4>
          (ep->xfer_count < ep->xfer_len) &&
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_PCD_IRQHandler+0x3b4>
 80026da:	6c37      	ldr	r7, [r6, #64]	; 0x40
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80026dc:	9804      	ldr	r0, [sp, #16]
    len = ep->xfer_len - ep->xfer_count;
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	429f      	cmp	r7, r3
 80026e2:	bf28      	it	cs
 80026e4:	461f      	movcs	r7, r3
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80026e6:	7c23      	ldrb	r3, [r4, #16]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	465a      	mov	r2, fp
 80026ec:	b2bb      	uxth	r3, r7
 80026ee:	6c71      	ldr	r1, [r6, #68]	; 0x44
 80026f0:	f001 fa15 	bl	8003b1e <USB_WritePacket>
    ep->xfer_buff  += len;
 80026f4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80026f6:	443b      	add	r3, r7
 80026f8:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 80026fa:	6d33      	ldr	r3, [r6, #80]	; 0x50
    len32b = (len + 3U) / 4U;
 80026fc:	f107 0a03 	add.w	sl, r7, #3
    ep->xfer_count += len;
 8002700:	443b      	add	r3, r7
    len32b = (len + 3U) / 4U;
 8002702:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_count += len;
 8002706:	6533      	str	r3, [r6, #80]	; 0x50
 8002708:	e7d3      	b.n	80026b2 <HAL_PCD_IRQHandler+0x3aa>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800270a:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = 0x1U << epnum;
 800270c:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800270e:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 8002712:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1U << epnum;
 8002716:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002718:	ea23 0302 	bic.w	r3, r3, r2
 800271c:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 8002720:	e7cd      	b.n	80026be <HAL_PCD_IRQHandler+0x3b6>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002722:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8002724:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002726:	3001      	adds	r0, #1
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8002728:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800272c:	9002      	str	r0, [sp, #8]
 800272e:	3320      	adds	r3, #32
 8002730:	e661      	b.n	80023f6 <HAL_PCD_IRQHandler+0xee>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8002732:	6973      	ldr	r3, [r6, #20]
 8002734:	f043 030b 	orr.w	r3, r3, #11
 8002738:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 800273a:	6933      	ldr	r3, [r6, #16]
 800273c:	f043 030b 	orr.w	r3, r3, #11
 8002740:	6133      	str	r3, [r6, #16]
 8002742:	e671      	b.n	8002428 <HAL_PCD_IRQHandler+0x120>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8002744:	2303      	movs	r3, #3
 8002746:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8002748:	2340      	movs	r3, #64	; 0x40
 800274a:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 800274c:	f000 fbf0 	bl	8002f30 <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8002750:	4b34      	ldr	r3, [pc, #208]	; (8002824 <HAL_PCD_IRQHandler+0x51c>)
 8002752:	4a35      	ldr	r2, [pc, #212]	; (8002828 <HAL_PCD_IRQHandler+0x520>)
 8002754:	4403      	add	r3, r0
 8002756:	4293      	cmp	r3, r2
 8002758:	6823      	ldr	r3, [r4, #0]
 800275a:	d804      	bhi.n	8002766 <HAL_PCD_IRQHandler+0x45e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002762:	60da      	str	r2, [r3, #12]
 8002764:	e68c      	b.n	8002480 <HAL_PCD_IRQHandler+0x178>
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8002766:	4a31      	ldr	r2, [pc, #196]	; (800282c <HAL_PCD_IRQHandler+0x524>)
 8002768:	4931      	ldr	r1, [pc, #196]	; (8002830 <HAL_PCD_IRQHandler+0x528>)
 800276a:	4402      	add	r2, r0
 800276c:	428a      	cmp	r2, r1
 800276e:	d803      	bhi.n	8002778 <HAL_PCD_IRQHandler+0x470>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8002776:	e7f4      	b.n	8002762 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8002778:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 800277c:	492d      	ldr	r1, [pc, #180]	; (8002834 <HAL_PCD_IRQHandler+0x52c>)
 800277e:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8002782:	428a      	cmp	r2, r1
 8002784:	d803      	bhi.n	800278e <HAL_PCD_IRQHandler+0x486>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 800278c:	e7e9      	b.n	8002762 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 800278e:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8002792:	4929      	ldr	r1, [pc, #164]	; (8002838 <HAL_PCD_IRQHandler+0x530>)
 8002794:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8002798:	428a      	cmp	r2, r1
 800279a:	d803      	bhi.n	80027a4 <HAL_PCD_IRQHandler+0x49c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80027a2:	e7de      	b.n	8002762 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 80027a4:	4a25      	ldr	r2, [pc, #148]	; (800283c <HAL_PCD_IRQHandler+0x534>)
 80027a6:	4926      	ldr	r1, [pc, #152]	; (8002840 <HAL_PCD_IRQHandler+0x538>)
 80027a8:	4402      	add	r2, r0
 80027aa:	428a      	cmp	r2, r1
 80027ac:	d803      	bhi.n	80027b6 <HAL_PCD_IRQHandler+0x4ae>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 80027b4:	e7d5      	b.n	8002762 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 80027b6:	4a23      	ldr	r2, [pc, #140]	; (8002844 <HAL_PCD_IRQHandler+0x53c>)
 80027b8:	4923      	ldr	r1, [pc, #140]	; (8002848 <HAL_PCD_IRQHandler+0x540>)
 80027ba:	4402      	add	r2, r0
 80027bc:	428a      	cmp	r2, r1
 80027be:	d803      	bhi.n	80027c8 <HAL_PCD_IRQHandler+0x4c0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 80027c6:	e7cc      	b.n	8002762 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 80027c8:	4a20      	ldr	r2, [pc, #128]	; (800284c <HAL_PCD_IRQHandler+0x544>)
 80027ca:	4921      	ldr	r1, [pc, #132]	; (8002850 <HAL_PCD_IRQHandler+0x548>)
 80027cc:	4402      	add	r2, r0
 80027ce:	428a      	cmp	r2, r1
 80027d0:	d803      	bhi.n	80027da <HAL_PCD_IRQHandler+0x4d2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80027d8:	e7c3      	b.n	8002762 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 80027da:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 80027de:	491d      	ldr	r1, [pc, #116]	; (8002854 <HAL_PCD_IRQHandler+0x54c>)
 80027e0:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 80027e4:	428a      	cmp	r2, r1
 80027e6:	d803      	bhi.n	80027f0 <HAL_PCD_IRQHandler+0x4e8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027ee:	e7b8      	b.n	8002762 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 80027f0:	4a19      	ldr	r2, [pc, #100]	; (8002858 <HAL_PCD_IRQHandler+0x550>)
 80027f2:	491a      	ldr	r1, [pc, #104]	; (800285c <HAL_PCD_IRQHandler+0x554>)
 80027f4:	4402      	add	r2, r0
 80027f6:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	bf94      	ite	ls
 80027fc:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002800:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8002804:	e7ad      	b.n	8002762 <HAL_PCD_IRQHandler+0x45a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8002806:	2b06      	cmp	r3, #6
 8002808:	f47f ae6e 	bne.w	80024e8 <HAL_PCD_IRQHandler+0x1e0>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800280c:	2208      	movs	r2, #8
 800280e:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 8002812:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8002814:	271c      	movs	r7, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002816:	f001 f996 	bl	8003b46 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 800281a:	fb07 4708 	mla	r7, r7, r8, r4
 800281e:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8002822:	e65c      	b.n	80024de <HAL_PCD_IRQHandler+0x1d6>
 8002824:	ff275340 	.word	0xff275340
 8002828:	000c34ff 	.word	0x000c34ff
 800282c:	ff1b1e40 	.word	0xff1b1e40
 8002830:	000f423f 	.word	0x000f423f
 8002834:	00124f7f 	.word	0x00124f7f
 8002838:	0013d61f 	.word	0x0013d61f
 800283c:	fee5b660 	.word	0xfee5b660
 8002840:	0016e35f 	.word	0x0016e35f
 8002844:	feced300 	.word	0xfeced300
 8002848:	001b773f 	.word	0x001b773f
 800284c:	feb35bc0 	.word	0xfeb35bc0
 8002850:	002191bf 	.word	0x002191bf
 8002854:	0038751f 	.word	0x0038751f
 8002858:	fe5954e0 	.word	0xfe5954e0
 800285c:	00419cdf 	.word	0x00419cdf

08002860 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8002860:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8002864:	2b01      	cmp	r3, #1
{
 8002866:	b510      	push	{r4, lr}
 8002868:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 800286a:	d009      	beq.n	8002880 <HAL_PCD_SetAddress+0x20>
 800286c:	2301      	movs	r3, #1
 800286e:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8002872:	6800      	ldr	r0, [r0, #0]
 8002874:	f001 f9ad 	bl	8003bd2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8002878:	2000      	movs	r0, #0
 800287a:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 800287e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8002880:	2002      	movs	r0, #2
}
 8002882:	bd10      	pop	{r4, pc}

08002884 <HAL_PCD_EP_Open>:
{
 8002884:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 8002886:	b24e      	sxtb	r6, r1
 8002888:	2e00      	cmp	r6, #0
{
 800288a:	4604      	mov	r4, r0
 800288c:	f04f 051c 	mov.w	r5, #28
 8002890:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002894:	bfb5      	itete	lt
 8002896:	fb05 4100 	mlalt	r1, r5, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800289a:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800289e:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80028a0:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->num   = ep_addr & 0x7F;
 80028a4:	b2c0      	uxtb	r0, r0
  if (ep->is_in)
 80028a6:	2e00      	cmp	r6, #0
    ep->tx_fifo_num = ep->num;
 80028a8:	bfb8      	it	lt
 80028aa:	80c8      	strhlt	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK )
 80028ac:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 80028ae:	70cb      	strb	r3, [r1, #3]
  ep->is_in = (0x80 & ep_addr) != 0;
 80028b0:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->data_pid_start = 0U;
 80028b4:	bf04      	itt	eq
 80028b6:	2300      	moveq	r3, #0
 80028b8:	710b      	strbeq	r3, [r1, #4]
  ep->num   = ep_addr & 0x7F;
 80028ba:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80028bc:	704d      	strb	r5, [r1, #1]
  __HAL_LOCK(hpcd); 
 80028be:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
  ep->maxpacket = ep_mps;
 80028c2:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd); 
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d009      	beq.n	80028dc <HAL_PCD_EP_Open+0x58>
 80028c8:	2301      	movs	r3, #1
 80028ca:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80028ce:	6820      	ldr	r0, [r4, #0]
 80028d0:	f000 ff58 	bl	8003784 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80028d4:	2000      	movs	r0, #0
 80028d6:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 80028da:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 80028dc:	2002      	movs	r0, #2
}
 80028de:	bd70      	pop	{r4, r5, r6, pc}

080028e0 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 80028e0:	b24b      	sxtb	r3, r1
 80028e2:	2b00      	cmp	r3, #0
{  
 80028e4:	b510      	push	{r4, lr}
 80028e6:	f04f 021c 	mov.w	r2, #28
 80028ea:	4604      	mov	r4, r0
 80028ec:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80028f0:	bfb5      	itete	lt
 80028f2:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80028f6:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80028fa:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80028fc:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = (0x80 & ep_addr) != 0;
 8002900:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8002902:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8002904:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8002906:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 800290a:	2b01      	cmp	r3, #1
 800290c:	d009      	beq.n	8002922 <HAL_PCD_EP_Close+0x42>
 800290e:	2301      	movs	r3, #1
 8002910:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8002914:	6820      	ldr	r0, [r4, #0]
 8002916:	f000 ff74 	bl	8003802 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 800291a:	2000      	movs	r0, #0
 800291c:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8002920:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8002922:	2002      	movs	r0, #2
}
 8002924:	bd10      	pop	{r4, pc}

08002926 <HAL_PCD_EP_Receive>:
{
 8002926:	b538      	push	{r3, r4, r5, lr}
 8002928:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800292c:	241c      	movs	r4, #28
 800292e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8002932:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002936:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_len = len;
 800293a:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 800293e:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 8002940:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0U;
 8002944:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 8002948:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 800294c:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1U)
 8002950:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002952:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8002954:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8002956:	bf08      	it	eq
 8002958:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
 800295c:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 800295e:	b91d      	cbnz	r5, 8002968 <HAL_PCD_EP_Receive+0x42>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002960:	f001 f870 	bl	8003a44 <USB_EP0StartXfer>
}
 8002964:	2000      	movs	r0, #0
 8002966:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002968:	f000 ffa6 	bl	80038b8 <USB_EPStartXfer>
 800296c:	e7fa      	b.n	8002964 <HAL_PCD_EP_Receive+0x3e>

0800296e <HAL_PCD_EP_Transmit>:
{
 800296e:	b538      	push	{r3, r4, r5, lr}
 8002970:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002974:	241c      	movs	r4, #28
 8002976:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 800297a:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800297e:	3138      	adds	r1, #56	; 0x38
  ep->xfer_len = len;
 8002980:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 8002986:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 8002988:	6462      	str	r2, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800298a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 800298e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (hpcd->Init.dma_enable == 1U)
 8002992:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002994:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8002996:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8002998:	bf08      	it	eq
 800299a:	64a2      	streq	r2, [r4, #72]	; 0x48
 800299c:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 800299e:	b91d      	cbnz	r5, 80029a8 <HAL_PCD_EP_Transmit+0x3a>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80029a0:	f001 f850 	bl	8003a44 <USB_EP0StartXfer>
}
 80029a4:	2000      	movs	r0, #0
 80029a6:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80029a8:	f000 ff86 	bl	80038b8 <USB_EPStartXfer>
 80029ac:	e7fa      	b.n	80029a4 <HAL_PCD_EP_Transmit+0x36>

080029ae <HAL_PCD_EP_SetStall>:
{
 80029ae:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 80029b0:	b24b      	sxtb	r3, r1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80029b8:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80029bc:	bfb5      	itete	lt
 80029be:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80029c2:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80029c6:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 80029c8:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 1U;
 80029cc:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80029ce:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80029d0:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 80029d2:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80029d4:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80029d6:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80029d8:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80029dc:	4293      	cmp	r3, r2
{
 80029de:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80029e0:	d00f      	beq.n	8002a02 <HAL_PCD_EP_SetStall+0x54>
 80029e2:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 80029e6:	6800      	ldr	r0, [r0, #0]
 80029e8:	f001 f8bb 	bl	8003b62 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80029ec:	b92d      	cbnz	r5, 80029fa <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80029ee:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80029f2:	7c21      	ldrb	r1, [r4, #16]
 80029f4:	6820      	ldr	r0, [r4, #0]
 80029f6:	f001 f961 	bl	8003cbc <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 80029fa:	2000      	movs	r0, #0
 80029fc:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8002a00:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8002a02:	2002      	movs	r0, #2
}
 8002a04:	bd38      	pop	{r3, r4, r5, pc}

08002a06 <HAL_PCD_EP_ClrStall>:
{
 8002a06:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8002a08:	b24b      	sxtb	r3, r1
 8002a0a:	2b00      	cmp	r3, #0
{
 8002a0c:	4605      	mov	r5, r0
 8002a0e:	f04f 021c 	mov.w	r2, #28
 8002a12:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002a16:	bfb5      	itete	lt
 8002a18:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 8002a1c:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002a20:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 8002a22:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002a26:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8002a28:	2400      	movs	r4, #0
 8002a2a:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8002a2c:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002a2e:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8002a30:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d009      	beq.n	8002a4c <HAL_PCD_EP_ClrStall+0x46>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8002a3e:	6828      	ldr	r0, [r5, #0]
 8002a40:	f001 f8ae 	bl	8003ba0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8002a44:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 8002a48:	4620      	mov	r0, r4
 8002a4a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8002a4c:	2002      	movs	r0, #2
}
 8002a4e:	bd38      	pop	{r3, r4, r5, pc}

08002a50 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a50:	6800      	ldr	r0, [r0, #0]
{
 8002a52:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a54:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 8002a56:	b921      	cbnz	r1, 8002a62 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8002a58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a5c:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
  }
  
  return HAL_OK;
}
 8002a5e:	2000      	movs	r0, #0
 8002a60:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8002a62:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 8002a64:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8002a66:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 8002a6a:	1e4e      	subs	r6, r1, #1
 8002a6c:	b2ec      	uxtb	r4, r5
 8002a6e:	42b4      	cmp	r4, r6
 8002a70:	f105 0501 	add.w	r5, r5, #1
 8002a74:	db06      	blt.n	8002a84 <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8002a76:	313f      	adds	r1, #63	; 0x3f
 8002a78:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8002a7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a80:	6043      	str	r3, [r0, #4]
 8002a82:	e7ec      	b.n	8002a5e <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8002a84:	3440      	adds	r4, #64	; 0x40
 8002a86:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8002a8a:	6864      	ldr	r4, [r4, #4]
 8002a8c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8002a90:	e7ec      	b.n	8002a6c <HAL_PCDEx_SetTxFiFo+0x1c>

08002a92 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002a92:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8002a94:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8002a96:	6259      	str	r1, [r3, #36]	; 0x24
}
 8002a98:	4770      	bx	lr
	...

08002a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	b918      	cbnz	r0, 8002aac <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002aa4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002aa6:	b002      	add	sp, #8
 8002aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aac:	6803      	ldr	r3, [r0, #0]
 8002aae:	07dd      	lsls	r5, r3, #31
 8002ab0:	d410      	bmi.n	8002ad4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	0798      	lsls	r0, r3, #30
 8002ab6:	d458      	bmi.n	8002b6a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	071a      	lsls	r2, r3, #28
 8002abc:	f100 809a 	bmi.w	8002bf4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	075b      	lsls	r3, r3, #29
 8002ac4:	f100 80b8 	bmi.w	8002c38 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac8:	69a2      	ldr	r2, [r4, #24]
 8002aca:	2a00      	cmp	r2, #0
 8002acc:	f040 8119 	bne.w	8002d02 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	e7e8      	b.n	8002aa6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ad4:	4ba6      	ldr	r3, [pc, #664]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	f002 020c 	and.w	r2, r2, #12
 8002adc:	2a04      	cmp	r2, #4
 8002ade:	d007      	beq.n	8002af0 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ae6:	2a08      	cmp	r2, #8
 8002ae8:	d10a      	bne.n	8002b00 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	0259      	lsls	r1, r3, #9
 8002aee:	d507      	bpl.n	8002b00 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	4b9f      	ldr	r3, [pc, #636]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	039a      	lsls	r2, r3, #14
 8002af6:	d5dc      	bpl.n	8002ab2 <HAL_RCC_OscConfig+0x16>
 8002af8:	6863      	ldr	r3, [r4, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1d9      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x16>
 8002afe:	e7d1      	b.n	8002aa4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b00:	6863      	ldr	r3, [r4, #4]
 8002b02:	4d9b      	ldr	r5, [pc, #620]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
 8002b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b08:	d111      	bne.n	8002b2e <HAL_RCC_OscConfig+0x92>
 8002b0a:	682b      	ldr	r3, [r5, #0]
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b10:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b12:	f7fe fdb7 	bl	8001684 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	4d96      	ldr	r5, [pc, #600]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002b18:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	682b      	ldr	r3, [r5, #0]
 8002b1c:	039b      	lsls	r3, r3, #14
 8002b1e:	d4c8      	bmi.n	8002ab2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe fdb0 	bl	8001684 <HAL_GetTick>
 8002b24:	1b80      	subs	r0, r0, r6
 8002b26:	2864      	cmp	r0, #100	; 0x64
 8002b28:	d9f7      	bls.n	8002b1a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002b2a:	2003      	movs	r0, #3
 8002b2c:	e7bb      	b.n	8002aa6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b32:	d104      	bne.n	8002b3e <HAL_RCC_OscConfig+0xa2>
 8002b34:	682b      	ldr	r3, [r5, #0]
 8002b36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b3a:	602b      	str	r3, [r5, #0]
 8002b3c:	e7e5      	b.n	8002b0a <HAL_RCC_OscConfig+0x6e>
 8002b3e:	682a      	ldr	r2, [r5, #0]
 8002b40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b44:	602a      	str	r2, [r5, #0]
 8002b46:	682a      	ldr	r2, [r5, #0]
 8002b48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b4c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1df      	bne.n	8002b12 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8002b52:	f7fe fd97 	bl	8001684 <HAL_GetTick>
 8002b56:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b58:	682b      	ldr	r3, [r5, #0]
 8002b5a:	039f      	lsls	r7, r3, #14
 8002b5c:	d5a9      	bpl.n	8002ab2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b5e:	f7fe fd91 	bl	8001684 <HAL_GetTick>
 8002b62:	1b80      	subs	r0, r0, r6
 8002b64:	2864      	cmp	r0, #100	; 0x64
 8002b66:	d9f7      	bls.n	8002b58 <HAL_RCC_OscConfig+0xbc>
 8002b68:	e7df      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b6a:	4b81      	ldr	r3, [pc, #516]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	f012 0f0c 	tst.w	r2, #12
 8002b72:	d007      	beq.n	8002b84 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b7a:	2a08      	cmp	r2, #8
 8002b7c:	d111      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	025e      	lsls	r6, r3, #9
 8002b82:	d40e      	bmi.n	8002ba2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b84:	4b7a      	ldr	r3, [pc, #488]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	0795      	lsls	r5, r2, #30
 8002b8a:	d502      	bpl.n	8002b92 <HAL_RCC_OscConfig+0xf6>
 8002b8c:	68e2      	ldr	r2, [r4, #12]
 8002b8e:	2a01      	cmp	r2, #1
 8002b90:	d188      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	6921      	ldr	r1, [r4, #16]
 8002b96:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002b9a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002b9e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba0:	e78a      	b.n	8002ab8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ba2:	68e2      	ldr	r2, [r4, #12]
 8002ba4:	4b73      	ldr	r3, [pc, #460]	; (8002d74 <HAL_RCC_OscConfig+0x2d8>)
 8002ba6:	b1b2      	cbz	r2, 8002bd6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002ba8:	2201      	movs	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bac:	f7fe fd6a 	bl	8001684 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb0:	4d6f      	ldr	r5, [pc, #444]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002bb2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb4:	682b      	ldr	r3, [r5, #0]
 8002bb6:	0798      	lsls	r0, r3, #30
 8002bb8:	d507      	bpl.n	8002bca <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bba:	682b      	ldr	r3, [r5, #0]
 8002bbc:	6922      	ldr	r2, [r4, #16]
 8002bbe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002bc2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002bc6:	602b      	str	r3, [r5, #0]
 8002bc8:	e776      	b.n	8002ab8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bca:	f7fe fd5b 	bl	8001684 <HAL_GetTick>
 8002bce:	1b80      	subs	r0, r0, r6
 8002bd0:	2802      	cmp	r0, #2
 8002bd2:	d9ef      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x118>
 8002bd4:	e7a9      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002bd6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fd54 	bl	8001684 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bdc:	4d64      	ldr	r5, [pc, #400]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002bde:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be0:	682b      	ldr	r3, [r5, #0]
 8002be2:	0799      	lsls	r1, r3, #30
 8002be4:	f57f af68 	bpl.w	8002ab8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be8:	f7fe fd4c 	bl	8001684 <HAL_GetTick>
 8002bec:	1b80      	subs	r0, r0, r6
 8002bee:	2802      	cmp	r0, #2
 8002bf0:	d9f6      	bls.n	8002be0 <HAL_RCC_OscConfig+0x144>
 8002bf2:	e79a      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bf4:	6962      	ldr	r2, [r4, #20]
 8002bf6:	4b60      	ldr	r3, [pc, #384]	; (8002d78 <HAL_RCC_OscConfig+0x2dc>)
 8002bf8:	b17a      	cbz	r2, 8002c1a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002bfe:	f7fe fd41 	bl	8001684 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c02:	4d5b      	ldr	r5, [pc, #364]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002c04:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c06:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002c08:	079f      	lsls	r7, r3, #30
 8002c0a:	f53f af59 	bmi.w	8002ac0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c0e:	f7fe fd39 	bl	8001684 <HAL_GetTick>
 8002c12:	1b80      	subs	r0, r0, r6
 8002c14:	2802      	cmp	r0, #2
 8002c16:	d9f6      	bls.n	8002c06 <HAL_RCC_OscConfig+0x16a>
 8002c18:	e787      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002c1a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002c1c:	f7fe fd32 	bl	8001684 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c20:	4d53      	ldr	r5, [pc, #332]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002c22:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c24:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002c26:	0798      	lsls	r0, r3, #30
 8002c28:	f57f af4a 	bpl.w	8002ac0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7fe fd2a 	bl	8001684 <HAL_GetTick>
 8002c30:	1b80      	subs	r0, r0, r6
 8002c32:	2802      	cmp	r0, #2
 8002c34:	d9f6      	bls.n	8002c24 <HAL_RCC_OscConfig+0x188>
 8002c36:	e778      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c38:	4b4d      	ldr	r3, [pc, #308]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
 8002c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c3c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002c40:	d128      	bne.n	8002c94 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c42:	9201      	str	r2, [sp, #4]
 8002c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c56:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	4d48      	ldr	r5, [pc, #288]	; (8002d7c <HAL_RCC_OscConfig+0x2e0>)
 8002c5a:	682b      	ldr	r3, [r5, #0]
 8002c5c:	05d9      	lsls	r1, r3, #23
 8002c5e:	d51b      	bpl.n	8002c98 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c60:	68a3      	ldr	r3, [r4, #8]
 8002c62:	4d43      	ldr	r5, [pc, #268]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d127      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x21c>
 8002c68:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002c70:	f7fe fd08 	bl	8001684 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c74:	4d3e      	ldr	r5, [pc, #248]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002c76:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c78:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c7e:	079b      	lsls	r3, r3, #30
 8002c80:	d539      	bpl.n	8002cf6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002c82:	2e00      	cmp	r6, #0
 8002c84:	f43f af20 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c88:	4a39      	ldr	r2, [pc, #228]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
 8002c8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	e719      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002c94:	2600      	movs	r6, #0
 8002c96:	e7df      	b.n	8002c58 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002ca0:	f7fe fcf0 	bl	8001684 <HAL_GetTick>
 8002ca4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca6:	682b      	ldr	r3, [r5, #0]
 8002ca8:	05da      	lsls	r2, r3, #23
 8002caa:	d4d9      	bmi.n	8002c60 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cac:	f7fe fcea 	bl	8001684 <HAL_GetTick>
 8002cb0:	1bc0      	subs	r0, r0, r7
 8002cb2:	2802      	cmp	r0, #2
 8002cb4:	d9f7      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x20a>
 8002cb6:	e738      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb8:	2b05      	cmp	r3, #5
 8002cba:	d104      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x22a>
 8002cbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	672b      	str	r3, [r5, #112]	; 0x70
 8002cc4:	e7d0      	b.n	8002c68 <HAL_RCC_OscConfig+0x1cc>
 8002cc6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002cc8:	f022 0201 	bic.w	r2, r2, #1
 8002ccc:	672a      	str	r2, [r5, #112]	; 0x70
 8002cce:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002cd0:	f022 0204 	bic.w	r2, r2, #4
 8002cd4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1ca      	bne.n	8002c70 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8002cda:	f7fe fcd3 	bl	8001684 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002ce2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002ce6:	0798      	lsls	r0, r3, #30
 8002ce8:	d5cb      	bpl.n	8002c82 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7fe fccb 	bl	8001684 <HAL_GetTick>
 8002cee:	1bc0      	subs	r0, r0, r7
 8002cf0:	4540      	cmp	r0, r8
 8002cf2:	d9f7      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x248>
 8002cf4:	e719      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf6:	f7fe fcc5 	bl	8001684 <HAL_GetTick>
 8002cfa:	1bc0      	subs	r0, r0, r7
 8002cfc:	4540      	cmp	r0, r8
 8002cfe:	d9bd      	bls.n	8002c7c <HAL_RCC_OscConfig+0x1e0>
 8002d00:	e713      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d02:	4d1b      	ldr	r5, [pc, #108]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
 8002d04:	68ab      	ldr	r3, [r5, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	f43f aeca 	beq.w	8002aa4 <HAL_RCC_OscConfig+0x8>
 8002d10:	4e1b      	ldr	r6, [pc, #108]	; (8002d80 <HAL_RCC_OscConfig+0x2e4>)
 8002d12:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d14:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002d16:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d18:	d134      	bne.n	8002d84 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002d1a:	f7fe fcb3 	bl	8001684 <HAL_GetTick>
 8002d1e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d20:	682b      	ldr	r3, [r5, #0]
 8002d22:	0199      	lsls	r1, r3, #6
 8002d24:	d41e      	bmi.n	8002d64 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d26:	6a22      	ldr	r2, [r4, #32]
 8002d28:	69e3      	ldr	r3, [r4, #28]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002d2e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002d32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002d38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3a:	4c0d      	ldr	r4, [pc, #52]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d3c:	0852      	lsrs	r2, r2, #1
 8002d3e:	3a01      	subs	r2, #1
 8002d40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d44:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002d46:	2301      	movs	r3, #1
 8002d48:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002d4a:	f7fe fc9b 	bl	8001684 <HAL_GetTick>
 8002d4e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d50:	6823      	ldr	r3, [r4, #0]
 8002d52:	019a      	lsls	r2, r3, #6
 8002d54:	f53f aebc 	bmi.w	8002ad0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d58:	f7fe fc94 	bl	8001684 <HAL_GetTick>
 8002d5c:	1b40      	subs	r0, r0, r5
 8002d5e:	2802      	cmp	r0, #2
 8002d60:	d9f6      	bls.n	8002d50 <HAL_RCC_OscConfig+0x2b4>
 8002d62:	e6e2      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe fc8e 	bl	8001684 <HAL_GetTick>
 8002d68:	1bc0      	subs	r0, r0, r7
 8002d6a:	2802      	cmp	r0, #2
 8002d6c:	d9d8      	bls.n	8002d20 <HAL_RCC_OscConfig+0x284>
 8002d6e:	e6dc      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
 8002d70:	40023800 	.word	0x40023800
 8002d74:	42470000 	.word	0x42470000
 8002d78:	42470e80 	.word	0x42470e80
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002d84:	f7fe fc7e 	bl	8001684 <HAL_GetTick>
 8002d88:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	682b      	ldr	r3, [r5, #0]
 8002d8c:	019b      	lsls	r3, r3, #6
 8002d8e:	f57f ae9f 	bpl.w	8002ad0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d92:	f7fe fc77 	bl	8001684 <HAL_GetTick>
 8002d96:	1b00      	subs	r0, r0, r4
 8002d98:	2802      	cmp	r0, #2
 8002d9a:	d9f6      	bls.n	8002d8a <HAL_RCC_OscConfig+0x2ee>
 8002d9c:	e6c5      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
 8002d9e:	bf00      	nop

08002da0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002da0:	4913      	ldr	r1, [pc, #76]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002da2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002da4:	688b      	ldr	r3, [r1, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d003      	beq.n	8002db6 <HAL_RCC_GetSysClockFreq+0x16>
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d003      	beq.n	8002dba <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db2:	4810      	ldr	r0, [pc, #64]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002db4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002db6:	4810      	ldr	r0, [pc, #64]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x58>)
 8002db8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dbc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dbe:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dc0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc4:	bf14      	ite	ne
 8002dc6:	480c      	ldrne	r0, [pc, #48]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc8:	480a      	ldreq	r0, [pc, #40]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002dce:	bf18      	it	ne
 8002dd0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd6:	fba1 0100 	umull	r0, r1, r1, r0
 8002dda:	f7fd fa13 	bl	8000204 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dde:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x50>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002de6:	3301      	adds	r3, #1
 8002de8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002dea:	fbb0 f0f3 	udiv	r0, r0, r3
 8002dee:	bd08      	pop	{r3, pc}
 8002df0:	40023800 	.word	0x40023800
 8002df4:	00f42400 	.word	0x00f42400
 8002df8:	017d7840 	.word	0x017d7840

08002dfc <HAL_RCC_ClockConfig>:
{
 8002dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e00:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002e02:	4604      	mov	r4, r0
 8002e04:	b910      	cbnz	r0, 8002e0c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002e06:	2001      	movs	r0, #1
 8002e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b44      	ldr	r3, [pc, #272]	; (8002f20 <HAL_RCC_ClockConfig+0x124>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	f002 020f 	and.w	r2, r2, #15
 8002e14:	428a      	cmp	r2, r1
 8002e16:	d328      	bcc.n	8002e6a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e18:	6821      	ldr	r1, [r4, #0]
 8002e1a:	078f      	lsls	r7, r1, #30
 8002e1c:	d42d      	bmi.n	8002e7a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e1e:	07c8      	lsls	r0, r1, #31
 8002e20:	d440      	bmi.n	8002ea4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e22:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <HAL_RCC_ClockConfig+0x124>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	f002 020f 	and.w	r2, r2, #15
 8002e2a:	4295      	cmp	r5, r2
 8002e2c:	d366      	bcc.n	8002efc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2e:	6822      	ldr	r2, [r4, #0]
 8002e30:	0751      	lsls	r1, r2, #29
 8002e32:	d46c      	bmi.n	8002f0e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e34:	0713      	lsls	r3, r2, #28
 8002e36:	d507      	bpl.n	8002e48 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e38:	4a3a      	ldr	r2, [pc, #232]	; (8002f24 <HAL_RCC_ClockConfig+0x128>)
 8002e3a:	6921      	ldr	r1, [r4, #16]
 8002e3c:	6893      	ldr	r3, [r2, #8]
 8002e3e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002e42:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e46:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e48:	f7ff ffaa 	bl	8002da0 <HAL_RCC_GetSysClockFreq>
 8002e4c:	4b35      	ldr	r3, [pc, #212]	; (8002f24 <HAL_RCC_ClockConfig+0x128>)
 8002e4e:	4a36      	ldr	r2, [pc, #216]	; (8002f28 <HAL_RCC_ClockConfig+0x12c>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e56:	5cd3      	ldrb	r3, [r2, r3]
 8002e58:	40d8      	lsrs	r0, r3
 8002e5a:	4b34      	ldr	r3, [pc, #208]	; (8002f2c <HAL_RCC_ClockConfig+0x130>)
 8002e5c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f002 fe4e 	bl	8005b00 <HAL_InitTick>
  return HAL_OK;
 8002e64:	2000      	movs	r0, #0
 8002e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6a:	b2ca      	uxtb	r2, r1
 8002e6c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	4299      	cmp	r1, r3
 8002e76:	d1c6      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xa>
 8002e78:	e7ce      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1c>
 8002e7a:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e80:	bf1e      	ittt	ne
 8002e82:	689a      	ldrne	r2, [r3, #8]
 8002e84:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002e88:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e8c:	bf42      	ittt	mi
 8002e8e:	689a      	ldrmi	r2, [r3, #8]
 8002e90:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002e94:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	68a0      	ldr	r0, [r4, #8]
 8002e9a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002e9e:	4302      	orrs	r2, r0
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	e7bc      	b.n	8002e1e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea4:	6862      	ldr	r2, [r4, #4]
 8002ea6:	4b1f      	ldr	r3, [pc, #124]	; (8002f24 <HAL_RCC_ClockConfig+0x128>)
 8002ea8:	2a01      	cmp	r2, #1
 8002eaa:	d11d      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb2:	d0a8      	beq.n	8002e06 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb4:	4e1b      	ldr	r6, [pc, #108]	; (8002f24 <HAL_RCC_ClockConfig+0x128>)
 8002eb6:	68b3      	ldr	r3, [r6, #8]
 8002eb8:	f023 0303 	bic.w	r3, r3, #3
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002ec0:	f7fe fbe0 	bl	8001684 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002ec8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	68b3      	ldr	r3, [r6, #8]
 8002ecc:	6862      	ldr	r2, [r4, #4]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002ed6:	d0a4      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed8:	f7fe fbd4 	bl	8001684 <HAL_GetTick>
 8002edc:	1bc0      	subs	r0, r0, r7
 8002ede:	4540      	cmp	r0, r8
 8002ee0:	d9f3      	bls.n	8002eca <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002ee2:	2003      	movs	r0, #3
}
 8002ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ee8:	1e91      	subs	r1, r2, #2
 8002eea:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eec:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eee:	d802      	bhi.n	8002ef6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ef4:	e7dd      	b.n	8002eb2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef6:	f013 0f02 	tst.w	r3, #2
 8002efa:	e7da      	b.n	8002eb2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efc:	b2ea      	uxtb	r2, r5
 8002efe:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	429d      	cmp	r5, r3
 8002f08:	f47f af7d 	bne.w	8002e06 <HAL_RCC_ClockConfig+0xa>
 8002f0c:	e78f      	b.n	8002e2e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f0e:	4905      	ldr	r1, [pc, #20]	; (8002f24 <HAL_RCC_ClockConfig+0x128>)
 8002f10:	68e0      	ldr	r0, [r4, #12]
 8002f12:	688b      	ldr	r3, [r1, #8]
 8002f14:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002f18:	4303      	orrs	r3, r0
 8002f1a:	608b      	str	r3, [r1, #8]
 8002f1c:	e78a      	b.n	8002e34 <HAL_RCC_ClockConfig+0x38>
 8002f1e:	bf00      	nop
 8002f20:	40023c00 	.word	0x40023c00
 8002f24:	40023800 	.word	0x40023800
 8002f28:	080068d2 	.word	0x080068d2
 8002f2c:	2000008c 	.word	0x2000008c

08002f30 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002f30:	4b01      	ldr	r3, [pc, #4]	; (8002f38 <HAL_RCC_GetHCLKFreq+0x8>)
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	2000008c 	.word	0x2000008c

08002f3c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002f3e:	4a05      	ldr	r2, [pc, #20]	; (8002f54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002f46:	5cd3      	ldrb	r3, [r2, r3]
 8002f48:	4a03      	ldr	r2, [pc, #12]	; (8002f58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002f4a:	6810      	ldr	r0, [r2, #0]
}
 8002f4c:	40d8      	lsrs	r0, r3
 8002f4e:	4770      	bx	lr
 8002f50:	40023800 	.word	0x40023800
 8002f54:	080068e2 	.word	0x080068e2
 8002f58:	2000008c 	.word	0x2000008c

08002f5c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002f5e:	4a05      	ldr	r2, [pc, #20]	; (8002f74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002f66:	5cd3      	ldrb	r3, [r2, r3]
 8002f68:	4a03      	ldr	r2, [pc, #12]	; (8002f78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002f6a:	6810      	ldr	r0, [r2, #0]
}
 8002f6c:	40d8      	lsrs	r0, r3
 8002f6e:	4770      	bx	lr
 8002f70:	40023800 	.word	0x40023800
 8002f74:	080068e2 	.word	0x080068e2
 8002f78:	2000008c 	.word	0x2000008c

08002f7c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f7c:	230f      	movs	r3, #15
 8002f7e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_RCC_GetClockConfig+0x34>)
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	f002 0203 	and.w	r2, r2, #3
 8002f88:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002f90:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002f98:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	08db      	lsrs	r3, r3, #3
 8002f9e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002fa2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002fa4:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <HAL_RCC_GetClockConfig+0x38>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	600b      	str	r3, [r1, #0]
 8002fae:	4770      	bx	lr
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40023c00 	.word	0x40023c00

08002fb8 <HAL_RCCEx_PeriphCLKConfig>:

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fb8:	6803      	ldr	r3, [r0, #0]
{
 8002fba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fbc:	079a      	lsls	r2, r3, #30
{
 8002fbe:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fc0:	f040 8088 	bne.w	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x11c>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	f013 0f0c 	tst.w	r3, #12
 8002fca:	d044      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002fcc:	4d80      	ldr	r5, [pc, #512]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fce:	4e81      	ldr	r6, [pc, #516]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLSAI_DISABLE();
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002fd4:	f7fe fb56 	bl	8001684 <HAL_GetTick>
 8002fd8:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fda:	6833      	ldr	r3, [r6, #0]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	f100 80bd 	bmi.w	800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002fe2:	6821      	ldr	r1, [r4, #0]
 8002fe4:	074f      	lsls	r7, r1, #29
 8002fe6:	d515      	bpl.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002fe8:	6963      	ldr	r3, [r4, #20]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fea:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002fee:	6920      	ldr	r0, [r4, #16]
 8002ff0:	061b      	lsls	r3, r3, #24
 8002ff2:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8002ff6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003000:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8003004:	6a22      	ldr	r2, [r4, #32]
 8003006:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800300a:	3a01      	subs	r2, #1
 800300c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003010:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003014:	070e      	lsls	r6, r1, #28
 8003016:	d514      	bpl.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003018:	4a6e      	ldr	r2, [pc, #440]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800301a:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800301c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003020:	6920      	ldr	r0, [r4, #16]
 8003022:	071b      	lsls	r3, r3, #28
 8003024:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003028:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800302c:	430b      	orrs	r3, r1
 800302e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003032:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003036:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003038:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800303c:	430b      	orrs	r3, r1
 800303e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003042:	2301      	movs	r3, #1
 8003044:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003046:	f7fe fb1d 	bl	8001684 <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800304a:	4d62      	ldr	r5, [pc, #392]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 800304c:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800304e:	682b      	ldr	r3, [r5, #0]
 8003050:	0098      	lsls	r0, r3, #2
 8003052:	f140 808a 	bpl.w	800316a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	069a      	lsls	r2, r3, #26
 800305a:	d531      	bpl.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800305c:	2300      	movs	r3, #0
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	4b5c      	ldr	r3, [pc, #368]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003062:	4d5d      	ldr	r5, [pc, #372]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003066:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800306a:	641a      	str	r2, [r3, #64]	; 0x40
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8003076:	682b      	ldr	r3, [r5, #0]
 8003078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307c:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800307e:	f7fe fb01 	bl	8001684 <HAL_GetTick>
 8003082:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003084:	682b      	ldr	r3, [r5, #0]
 8003086:	05d9      	lsls	r1, r3, #23
 8003088:	d576      	bpl.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800308a:	4d52      	ldr	r5, [pc, #328]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800308c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800308e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003092:	d177      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003094:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003096:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800309a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800309e:	4a4d      	ldr	r2, [pc, #308]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80030a0:	f040 8091 	bne.w	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 80030a4:	6891      	ldr	r1, [r2, #8]
 80030a6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80030aa:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80030ae:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80030b2:	4301      	orrs	r1, r0
 80030b4:	6091      	str	r1, [r2, #8]
 80030b6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80030b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030bc:	430b      	orrs	r3, r1
 80030be:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030c0:	6820      	ldr	r0, [r4, #0]
 80030c2:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030c6:	bf1f      	itttt	ne
 80030c8:	4b44      	ldrne	r3, [pc, #272]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80030ca:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 80030ce:	601a      	strne	r2, [r3, #0]
  }
  return HAL_OK;
 80030d0:	2000      	movne	r0, #0
 80030d2:	e041      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_PLLI2S_DISABLE();
 80030d4:	4d42      	ldr	r5, [pc, #264]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030d6:	4e3f      	ldr	r6, [pc, #252]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLI2S_DISABLE();
 80030d8:	2300      	movs	r3, #0
 80030da:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80030dc:	f7fe fad2 	bl	8001684 <HAL_GetTick>
 80030e0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030e2:	6833      	ldr	r3, [r6, #0]
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	d431      	bmi.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x194>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80030e8:	6822      	ldr	r2, [r4, #0]
 80030ea:	07d7      	lsls	r7, r2, #31
 80030ec:	d506      	bpl.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80030ee:	68a3      	ldr	r3, [r4, #8]
 80030f0:	6861      	ldr	r1, [r4, #4]
 80030f2:	071b      	lsls	r3, r3, #28
 80030f4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80030f8:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80030fc:	0790      	lsls	r0, r2, #30
 80030fe:	d515      	bpl.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x174>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003100:	4a34      	ldr	r2, [pc, #208]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003102:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003104:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003108:	6860      	ldr	r0, [r4, #4]
 800310a:	061b      	lsls	r3, r3, #24
 800310c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003110:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003114:	430b      	orrs	r3, r1
 8003116:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800311a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800311e:	69e3      	ldr	r3, [r4, #28]
 8003120:	f021 011f 	bic.w	r1, r1, #31
 8003124:	3b01      	subs	r3, #1
 8003126:	430b      	orrs	r3, r1
 8003128:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLI2S_ENABLE();
 800312c:	2301      	movs	r3, #1
 800312e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003130:	f7fe faa8 	bl	8001684 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003134:	4d27      	ldr	r5, [pc, #156]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 8003136:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003138:	682b      	ldr	r3, [r5, #0]
 800313a:	0119      	lsls	r1, r3, #4
 800313c:	f53f af42 	bmi.w	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003140:	f7fe faa0 	bl	8001684 <HAL_GetTick>
 8003144:	1b80      	subs	r0, r0, r6
 8003146:	2802      	cmp	r0, #2
 8003148:	d9f6      	bls.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800314a:	e004      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800314c:	f7fe fa9a 	bl	8001684 <HAL_GetTick>
 8003150:	1bc0      	subs	r0, r0, r7
 8003152:	2802      	cmp	r0, #2
 8003154:	d9c5      	bls.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        return HAL_TIMEOUT;
 8003156:	2003      	movs	r0, #3
}
 8003158:	b003      	add	sp, #12
 800315a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800315c:	f7fe fa92 	bl	8001684 <HAL_GetTick>
 8003160:	1bc0      	subs	r0, r0, r7
 8003162:	2802      	cmp	r0, #2
 8003164:	f67f af39 	bls.w	8002fda <HAL_RCCEx_PeriphCLKConfig+0x22>
 8003168:	e7f5      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800316a:	f7fe fa8b 	bl	8001684 <HAL_GetTick>
 800316e:	1b80      	subs	r0, r0, r6
 8003170:	2802      	cmp	r0, #2
 8003172:	f67f af6c 	bls.w	800304e <HAL_RCCEx_PeriphCLKConfig+0x96>
 8003176:	e7ee      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003178:	f7fe fa84 	bl	8001684 <HAL_GetTick>
 800317c:	1b80      	subs	r0, r0, r6
 800317e:	2802      	cmp	r0, #2
 8003180:	d980      	bls.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003182:	e7e8      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003184:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003186:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800318a:	4293      	cmp	r3, r2
 800318c:	d082      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800318e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003190:	4a14      	ldr	r2, [pc, #80]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003192:	2101      	movs	r1, #1
 8003194:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800319a:	2100      	movs	r1, #0
 800319c:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 800319e:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80031a2:	07da      	lsls	r2, r3, #31
 80031a4:	f57f af76 	bpl.w	8003094 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        tickstart = HAL_GetTick();
 80031a8:	f7fe fa6c 	bl	8001684 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ac:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80031b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80031b4:	079b      	lsls	r3, r3, #30
 80031b6:	f53f af6d 	bmi.w	8003094 <HAL_RCCEx_PeriphCLKConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7fe fa63 	bl	8001684 <HAL_GetTick>
 80031be:	1b80      	subs	r0, r0, r6
 80031c0:	42b8      	cmp	r0, r7
 80031c2:	d9f6      	bls.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80031c4:	e7c7      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031c6:	6891      	ldr	r1, [r2, #8]
 80031c8:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80031cc:	e772      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80031ce:	bf00      	nop
 80031d0:	42470070 	.word	0x42470070
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40007000 	.word	0x40007000
 80031dc:	424711e0 	.word	0x424711e0
 80031e0:	42470068 	.word	0x42470068
 80031e4:	42470e40 	.word	0x42470e40

080031e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031e8:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80031ea:	4604      	mov	r4, r0
 80031ec:	2800      	cmp	r0, #0
 80031ee:	d036      	beq.n	800325e <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031f0:	2300      	movs	r3, #0
 80031f2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80031f4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80031f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80031fc:	b91b      	cbnz	r3, 8003206 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031fe:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003202:	f002 fbf9 	bl	80059f8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003206:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003208:	68a0      	ldr	r0, [r4, #8]
 800320a:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800320c:	2302      	movs	r3, #2
 800320e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003212:	680b      	ldr	r3, [r1, #0]
 8003214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003218:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800321a:	6863      	ldr	r3, [r4, #4]
 800321c:	4303      	orrs	r3, r0
 800321e:	68e0      	ldr	r0, [r4, #12]
 8003220:	4303      	orrs	r3, r0
 8003222:	6920      	ldr	r0, [r4, #16]
 8003224:	4303      	orrs	r3, r0
 8003226:	6960      	ldr	r0, [r4, #20]
 8003228:	4303      	orrs	r3, r0
 800322a:	69e0      	ldr	r0, [r4, #28]
 800322c:	4303      	orrs	r3, r0
 800322e:	6a20      	ldr	r0, [r4, #32]
 8003230:	4303      	orrs	r3, r0
 8003232:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003234:	4303      	orrs	r3, r0
 8003236:	f402 7000 	and.w	r0, r2, #512	; 0x200
 800323a:	4303      	orrs	r3, r0
 800323c:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800323e:	0c12      	lsrs	r2, r2, #16
 8003240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003242:	f002 0204 	and.w	r2, r2, #4
 8003246:	431a      	orrs	r2, r3
 8003248:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800324a:	69cb      	ldr	r3, [r1, #28]
 800324c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003250:	61cb      	str	r3, [r1, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003252:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003254:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003256:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003258:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 800325c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800325e:	2001      	movs	r0, #1
}
 8003260:	bd10      	pop	{r4, pc}

08003262 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003262:	6803      	ldr	r3, [r0, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8003274:	2000      	movs	r0, #0
 8003276:	4770      	bx	lr

08003278 <HAL_TIM_OC_DelayElapsedCallback>:
 8003278:	4770      	bx	lr

0800327a <HAL_TIM_IC_CaptureCallback>:
 800327a:	4770      	bx	lr

0800327c <HAL_TIM_PWM_PulseFinishedCallback>:
 800327c:	4770      	bx	lr

0800327e <HAL_TIM_TriggerCallback>:
 800327e:	4770      	bx	lr

08003280 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003280:	6803      	ldr	r3, [r0, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	0791      	lsls	r1, r2, #30
{
 8003286:	b510      	push	{r4, lr}
 8003288:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800328a:	d50e      	bpl.n	80032aa <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	0792      	lsls	r2, r2, #30
 8003290:	d50b      	bpl.n	80032aa <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003292:	f06f 0202 	mvn.w	r2, #2
 8003296:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003298:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800329a:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800329c:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800329e:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032a0:	d077      	beq.n	8003392 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80032a2:	f7ff ffea 	bl	800327a <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a6:	2300      	movs	r3, #0
 80032a8:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	0750      	lsls	r0, r2, #29
 80032b0:	d510      	bpl.n	80032d4 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	0751      	lsls	r1, r2, #29
 80032b6:	d50d      	bpl.n	80032d4 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032b8:	f06f 0204 	mvn.w	r2, #4
 80032bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032be:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032c0:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032c2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032c6:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80032c8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032ca:	d068      	beq.n	800339e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80032cc:	f7ff ffd5 	bl	800327a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d0:	2300      	movs	r3, #0
 80032d2:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	0712      	lsls	r2, r2, #28
 80032da:	d50f      	bpl.n	80032fc <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	0710      	lsls	r0, r2, #28
 80032e0:	d50c      	bpl.n	80032fc <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032e2:	f06f 0208 	mvn.w	r2, #8
 80032e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032e8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ea:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032ec:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ee:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80032f0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032f2:	d05a      	beq.n	80033aa <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80032f4:	f7ff ffc1 	bl	800327a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f8:	2300      	movs	r3, #0
 80032fa:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	06d2      	lsls	r2, r2, #27
 8003302:	d510      	bpl.n	8003326 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	06d0      	lsls	r0, r2, #27
 8003308:	d50d      	bpl.n	8003326 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800330a:	f06f 0210 	mvn.w	r2, #16
 800330e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003310:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003312:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003314:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003318:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800331a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800331c:	d04b      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800331e:	f7ff ffac 	bl	800327a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003322:	2300      	movs	r3, #0
 8003324:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	07d1      	lsls	r1, r2, #31
 800332c:	d508      	bpl.n	8003340 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	07d2      	lsls	r2, r2, #31
 8003332:	d505      	bpl.n	8003340 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003334:	f06f 0201 	mvn.w	r2, #1
 8003338:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800333a:	4620      	mov	r0, r4
 800333c:	f002 fad6 	bl	80058ec <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	0610      	lsls	r0, r2, #24
 8003346:	d508      	bpl.n	800335a <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	0611      	lsls	r1, r2, #24
 800334c:	d505      	bpl.n	800335a <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800334e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003352:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003354:	4620      	mov	r0, r4
 8003356:	f000 f8d6 	bl	8003506 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	0652      	lsls	r2, r2, #25
 8003360:	d508      	bpl.n	8003374 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	0650      	lsls	r0, r2, #25
 8003366:	d505      	bpl.n	8003374 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003368:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800336c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800336e:	4620      	mov	r0, r4
 8003370:	f7ff ff85 	bl	800327e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	0691      	lsls	r1, r2, #26
 800337a:	d522      	bpl.n	80033c2 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	0692      	lsls	r2, r2, #26
 8003380:	d51f      	bpl.n	80033c2 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003382:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8003386:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003388:	611a      	str	r2, [r3, #16]
    }
  }
}
 800338a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800338e:	f000 b8b9 	b.w	8003504 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	f7ff ff71 	bl	8003278 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003396:	4620      	mov	r0, r4
 8003398:	f7ff ff70 	bl	800327c <HAL_TIM_PWM_PulseFinishedCallback>
 800339c:	e783      	b.n	80032a6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339e:	f7ff ff6b 	bl	8003278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a2:	4620      	mov	r0, r4
 80033a4:	f7ff ff6a 	bl	800327c <HAL_TIM_PWM_PulseFinishedCallback>
 80033a8:	e792      	b.n	80032d0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033aa:	f7ff ff65 	bl	8003278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80033ae:	4620      	mov	r0, r4
 80033b0:	f7ff ff64 	bl	800327c <HAL_TIM_PWM_PulseFinishedCallback>
 80033b4:	e7a0      	b.n	80032f8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	f7ff ff5f 	bl	8003278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ba:	4620      	mov	r0, r4
 80033bc:	f7ff ff5e 	bl	800327c <HAL_TIM_PWM_PulseFinishedCallback>
 80033c0:	e7af      	b.n	8003322 <HAL_TIM_IRQHandler+0xa2>
 80033c2:	bd10      	pop	{r4, pc}

080033c4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80033c4:	4a2e      	ldr	r2, [pc, #184]	; (8003480 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80033c6:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80033c8:	4290      	cmp	r0, r2
 80033ca:	d012      	beq.n	80033f2 <TIM_Base_SetConfig+0x2e>
 80033cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80033d0:	d00f      	beq.n	80033f2 <TIM_Base_SetConfig+0x2e>
 80033d2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80033d6:	4290      	cmp	r0, r2
 80033d8:	d00b      	beq.n	80033f2 <TIM_Base_SetConfig+0x2e>
 80033da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033de:	4290      	cmp	r0, r2
 80033e0:	d007      	beq.n	80033f2 <TIM_Base_SetConfig+0x2e>
 80033e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033e6:	4290      	cmp	r0, r2
 80033e8:	d003      	beq.n	80033f2 <TIM_Base_SetConfig+0x2e>
 80033ea:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80033ee:	4290      	cmp	r0, r2
 80033f0:	d11d      	bne.n	800342e <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80033f2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80033f8:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80033fa:	4a21      	ldr	r2, [pc, #132]	; (8003480 <TIM_Base_SetConfig+0xbc>)
 80033fc:	4290      	cmp	r0, r2
 80033fe:	d104      	bne.n	800340a <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003400:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003406:	4313      	orrs	r3, r2
 8003408:	e028      	b.n	800345c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800340a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800340e:	d0f7      	beq.n	8003400 <TIM_Base_SetConfig+0x3c>
 8003410:	4a1c      	ldr	r2, [pc, #112]	; (8003484 <TIM_Base_SetConfig+0xc0>)
 8003412:	4290      	cmp	r0, r2
 8003414:	d0f4      	beq.n	8003400 <TIM_Base_SetConfig+0x3c>
 8003416:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800341a:	4290      	cmp	r0, r2
 800341c:	d0f0      	beq.n	8003400 <TIM_Base_SetConfig+0x3c>
 800341e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003422:	4290      	cmp	r0, r2
 8003424:	d0ec      	beq.n	8003400 <TIM_Base_SetConfig+0x3c>
 8003426:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800342a:	4290      	cmp	r0, r2
 800342c:	d0e8      	beq.n	8003400 <TIM_Base_SetConfig+0x3c>
 800342e:	4a16      	ldr	r2, [pc, #88]	; (8003488 <TIM_Base_SetConfig+0xc4>)
 8003430:	4290      	cmp	r0, r2
 8003432:	d0e5      	beq.n	8003400 <TIM_Base_SetConfig+0x3c>
 8003434:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003438:	4290      	cmp	r0, r2
 800343a:	d0e1      	beq.n	8003400 <TIM_Base_SetConfig+0x3c>
 800343c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003440:	4290      	cmp	r0, r2
 8003442:	d0dd      	beq.n	8003400 <TIM_Base_SetConfig+0x3c>
 8003444:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003448:	4290      	cmp	r0, r2
 800344a:	d0d9      	beq.n	8003400 <TIM_Base_SetConfig+0x3c>
 800344c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003450:	4290      	cmp	r0, r2
 8003452:	d0d5      	beq.n	8003400 <TIM_Base_SetConfig+0x3c>
 8003454:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003458:	4290      	cmp	r0, r2
 800345a:	d0d1      	beq.n	8003400 <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 800345c:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800345e:	688b      	ldr	r3, [r1, #8]
 8003460:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003462:	680b      	ldr	r3, [r1, #0]
 8003464:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003466:	4b06      	ldr	r3, [pc, #24]	; (8003480 <TIM_Base_SetConfig+0xbc>)
 8003468:	4298      	cmp	r0, r3
 800346a:	d006      	beq.n	800347a <TIM_Base_SetConfig+0xb6>
 800346c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003470:	4298      	cmp	r0, r3
 8003472:	d002      	beq.n	800347a <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003474:	2301      	movs	r3, #1
 8003476:	6143      	str	r3, [r0, #20]
}
 8003478:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800347a:	690b      	ldr	r3, [r1, #16]
 800347c:	6303      	str	r3, [r0, #48]	; 0x30
 800347e:	e7f9      	b.n	8003474 <TIM_Base_SetConfig+0xb0>
 8003480:	40010000 	.word	0x40010000
 8003484:	40000400 	.word	0x40000400
 8003488:	40014000 	.word	0x40014000

0800348c <HAL_TIM_Base_Init>:
{ 
 800348c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800348e:	4604      	mov	r4, r0
 8003490:	b1a0      	cbz	r0, 80034bc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003492:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003496:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800349a:	b91b      	cbnz	r3, 80034a4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800349c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80034a0:	f002 fbe0 	bl	8005c64 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80034a4:	2302      	movs	r3, #2
 80034a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80034aa:	6820      	ldr	r0, [r4, #0]
 80034ac:	1d21      	adds	r1, r4, #4
 80034ae:	f7ff ff89 	bl	80033c4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80034b8:	2000      	movs	r0, #0
 80034ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80034bc:	2001      	movs	r0, #1
}
 80034be:	bd10      	pop	{r4, pc}

080034c0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80034c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80034c4:	2b01      	cmp	r3, #1
{
 80034c6:	b510      	push	{r4, lr}
 80034c8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80034cc:	d018      	beq.n	8003500 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80034ce:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80034d2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80034d4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80034d6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80034d8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80034da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034de:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	4322      	orrs	r2, r4
 80034e4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ec:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80034f4:	2301      	movs	r3, #1
 80034f6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80034fa:	2300      	movs	r3, #0
 80034fc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8003500:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8003502:	bd10      	pop	{r4, pc}

08003504 <HAL_TIMEx_CommutationCallback>:
 8003504:	4770      	bx	lr

08003506 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003506:	4770      	bx	lr

08003508 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003508:	b084      	sub	sp, #16
 800350a:	b538      	push	{r3, r4, r5, lr}
 800350c:	ad05      	add	r5, sp, #20
 800350e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003514:	2b01      	cmp	r3, #1
{
 8003516:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003518:	d126      	bne.n	8003568 <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800351a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800351c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003520:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003522:	68c3      	ldr	r3, [r0, #12]
 8003524:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800352c:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800352e:	68c3      	ldr	r3, [r0, #12]
 8003530:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003534:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8003536:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003538:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800353a:	bf02      	ittt	eq
 800353c:	68c3      	ldreq	r3, [r0, #12]
 800353e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8003542:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8003544:	f000 fbde 	bl	8003d04 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 8003548:	9b08      	ldr	r3, [sp, #32]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d107      	bne.n	800355e <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800354e:	68a3      	ldr	r3, [r4, #8]
 8003550:	f043 0306 	orr.w	r3, r3, #6
 8003554:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003556:	68a3      	ldr	r3, [r4, #8]
 8003558:	f043 0320 	orr.w	r3, r3, #32
 800355c:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 800355e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003562:	2000      	movs	r0, #0
 8003564:	b004      	add	sp, #16
 8003566:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003568:	68c3      	ldr	r3, [r0, #12]
 800356a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800356e:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8003570:	f000 fbc8 	bl	8003d04 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8003574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003578:	63a3      	str	r3, [r4, #56]	; 0x38
 800357a:	e7e5      	b.n	8003548 <USB_CoreInit+0x40>

0800357c <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800357c:	6883      	ldr	r3, [r0, #8]
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8003584:	2000      	movs	r0, #0
 8003586:	4770      	bx	lr

08003588 <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003588:	6883      	ldr	r3, [r0, #8]
 800358a:	f023 0301 	bic.w	r3, r3, #1
 800358e:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8003590:	2000      	movs	r0, #0
 8003592:	4770      	bx	lr

08003594 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8003594:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8003596:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8003598:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800359a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800359e:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80035a0:	d108      	bne.n	80035b4 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80035a2:	68c3      	ldr	r3, [r0, #12]
 80035a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035a8:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 80035aa:	2032      	movs	r0, #50	; 0x32
 80035ac:	f7fe f870 	bl	8001690 <HAL_Delay>
  
  return HAL_OK;
}
 80035b0:	2000      	movs	r0, #0
 80035b2:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 80035b4:	2900      	cmp	r1, #0
 80035b6:	d1f8      	bne.n	80035aa <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 80035b8:	68c3      	ldr	r3, [r0, #12]
 80035ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035be:	60c3      	str	r3, [r0, #12]
 80035c0:	e7f3      	b.n	80035aa <USB_SetCurrentMode+0x16>
	...

080035c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035c4:	b084      	sub	sp, #16
 80035c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ca:	4604      	mov	r4, r0
 80035cc:	a807      	add	r0, sp, #28
 80035ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80035d2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80035d4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80035d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035d8:	4688      	mov	r8, r1
  if (cfg.vbus_sensing_enable == 0U)
 80035da:	b9a6      	cbnz	r6, 8003606 <USB_DevInit+0x42>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80035dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035e0:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80035e8:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80035ec:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80035f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80035f2:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80035f4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80035f8:	d15e      	bne.n	80036b8 <USB_DevInit+0xf4>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80035fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80035fc:	b939      	cbnz	r1, 800360e <USB_DevInit+0x4a>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80035fe:	4620      	mov	r0, r4
 8003600:	f000 f89e 	bl	8003740 <USB_SetDevSpeed>
 8003604:	e007      	b.n	8003616 <USB_DevInit+0x52>
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800360a:	63a3      	str	r3, [r4, #56]	; 0x38
 800360c:	e7e9      	b.n	80035e2 <USB_DevInit+0x1e>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 800360e:	4619      	mov	r1, r3
 8003610:	4620      	mov	r0, r4
 8003612:	f000 f895 	bl	8003740 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8003616:	2110      	movs	r1, #16
 8003618:	4620      	mov	r0, r4
 800361a:	f000 f86f 	bl	80036fc <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800361e:	4620      	mov	r0, r4
 8003620:	f000 f87e 	bl	8003720 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003624:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8003626:	f04f 32ff 	mov.w	r2, #4294967295
  USBx_DEVICE->DIEPMSK = 0U;
 800362a:	612b      	str	r3, [r5, #16]
 800362c:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0U;
 800362e:	616b      	str	r3, [r5, #20]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8003630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8003634:	61aa      	str	r2, [r5, #24]
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8003636:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0U;
 800363a:	61eb      	str	r3, [r5, #28]
 800363c:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003640:	4543      	cmp	r3, r8
 8003642:	d13b      	bne.n	80036bc <USB_DevInit+0xf8>
 8003644:	2100      	movs	r1, #0
 8003646:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
 800364a:	4608      	mov	r0, r1
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800364c:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8003650:	f04f 0cff 	mov.w	ip, #255	; 0xff
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003654:	428b      	cmp	r3, r1
 8003656:	d13e      	bne.n	80036d6 <USB_DevInit+0x112>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003658:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 800365a:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800365c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003660:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8003662:	d108      	bne.n	8003676 <USB_DevInit+0xb2>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8003664:	4b23      	ldr	r3, [pc, #140]	; (80036f4 <USB_DevInit+0x130>)
 8003666:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8003668:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800366a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366e:	f043 0303 	orr.w	r3, r3, #3
 8003672:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8003674:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800367a:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800367e:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8003680:	b91f      	cbnz	r7, 800368a <USB_DevInit+0xc6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8003682:	69a3      	ldr	r3, [r4, #24]
 8003684:	f043 0310 	orr.w	r3, r3, #16
 8003688:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800368a:	69a2      	ldr	r2, [r4, #24]
 800368c:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <USB_DevInit+0x134>)
 800368e:	4313      	orrs	r3, r2
 8003690:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8003692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003694:	b11b      	cbz	r3, 800369e <USB_DevInit+0xda>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003696:	69a3      	ldr	r3, [r4, #24]
 8003698:	f043 0308 	orr.w	r3, r3, #8
 800369c:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 800369e:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 80036a0:	bf01      	itttt	eq
 80036a2:	69a3      	ldreq	r3, [r4, #24]
 80036a4:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80036a8:	f043 0304 	orreq.w	r3, r3, #4
 80036ac:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 80036ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036b2:	2000      	movs	r0, #0
 80036b4:	b004      	add	sp, #16
 80036b6:	4770      	bx	lr
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80036b8:	2103      	movs	r1, #3
 80036ba:	e7a0      	b.n	80035fe <USB_DevInit+0x3a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80036bc:	f8d2 c000 	ldr.w	ip, [r2]
 80036c0:	f1bc 0f00 	cmp.w	ip, #0
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80036c4:	bfb4      	ite	lt
 80036c6:	6010      	strlt	r0, [r2, #0]
      USBx_INEP(i)->DIEPCTL = 0U;
 80036c8:	6011      	strge	r1, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036ca:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80036cc:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 80036ce:	f8c2 e008 	str.w	lr, [r2, #8]
 80036d2:	3220      	adds	r2, #32
 80036d4:	e7b4      	b.n	8003640 <USB_DevInit+0x7c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80036d6:	f8d2 8000 	ldr.w	r8, [r2]
 80036da:	f1b8 0f00 	cmp.w	r8, #0
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80036de:	bfb4      	ite	lt
 80036e0:	f8c2 e000 	strlt.w	lr, [r2]
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80036e4:	6010      	strge	r0, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036e6:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80036e8:	6110      	str	r0, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 80036ea:	f8c2 c008 	str.w	ip, [r2, #8]
 80036ee:	3220      	adds	r2, #32
 80036f0:	e7b0      	b.n	8003654 <USB_DevInit+0x90>
 80036f2:	bf00      	nop
 80036f4:	00800100 	.word	0x00800100
 80036f8:	803c3800 	.word	0x803c3800

080036fc <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80036fc:	0189      	lsls	r1, r1, #6
 80036fe:	f041 0120 	orr.w	r1, r1, #32
 8003702:	4a06      	ldr	r2, [pc, #24]	; (800371c <USB_FlushTxFifo+0x20>)
 8003704:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8003706:	3a01      	subs	r2, #1
 8003708:	d005      	beq.n	8003716 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800370a:	6903      	ldr	r3, [r0, #16]
 800370c:	f013 0320 	ands.w	r3, r3, #32
 8003710:	d1f9      	bne.n	8003706 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8003712:	4618      	mov	r0, r3
 8003714:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003716:	2003      	movs	r0, #3
}
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	00030d41 	.word	0x00030d41

08003720 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003720:	2310      	movs	r3, #16
 8003722:	4a06      	ldr	r2, [pc, #24]	; (800373c <USB_FlushRxFifo+0x1c>)
 8003724:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8003726:	3a01      	subs	r2, #1
 8003728:	d005      	beq.n	8003736 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800372a:	6903      	ldr	r3, [r0, #16]
 800372c:	f013 0310 	ands.w	r3, r3, #16
 8003730:	d1f9      	bne.n	8003726 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8003732:	4618      	mov	r0, r3
 8003734:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003736:	2003      	movs	r0, #3
}
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	00030d41 	.word	0x00030d41

08003740 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8003740:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003744:	4319      	orrs	r1, r3
 8003746:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 800374a:	2000      	movs	r0, #0
 800374c:	4770      	bx	lr

0800374e <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800374e:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8003752:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 8003756:	f010 0006 	ands.w	r0, r0, #6
 800375a:	d012      	beq.n	8003782 <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800375c:	6893      	ldr	r3, [r2, #8]
 800375e:	f003 0306 	and.w	r3, r3, #6
 8003762:	2b02      	cmp	r3, #2
 8003764:	d00c      	beq.n	8003780 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8003766:	6893      	ldr	r3, [r2, #8]
 8003768:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800376c:	2b06      	cmp	r3, #6
 800376e:	d007      	beq.n	8003780 <USB_GetDevSpeed+0x32>
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003770:	6893      	ldr	r3, [r2, #8]
 8003772:	f003 0306 	and.w	r3, r3, #6
 8003776:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 8003778:	bf14      	ite	ne
 800377a:	2000      	movne	r0, #0
 800377c:	2002      	moveq	r0, #2
 800377e:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 8003780:	2003      	movs	r0, #3
  }
  
  return speed;
}
 8003782:	4770      	bx	lr

08003784 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003784:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 8003786:	784b      	ldrb	r3, [r1, #1]
 8003788:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 800378a:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 800378e:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8003792:	2b01      	cmp	r3, #1
 8003794:	d11b      	bne.n	80037ce <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8003796:	40a3      	lsls	r3, r4
 8003798:	b29b      	uxth	r3, r3
 800379a:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800379c:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 80037a0:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80037a2:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	0412      	lsls	r2, r2, #16
 80037aa:	d40e      	bmi.n	80037ca <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80037ac:	688a      	ldr	r2, [r1, #8]
 80037ae:	78c8      	ldrb	r0, [r1, #3]
 80037b0:	681d      	ldr	r5, [r3, #0]
 80037b2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80037b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037be:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 80037c2:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 80037c6:	4328      	orrs	r0, r5
 80037c8:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 80037ca:	2000      	movs	r0, #0
 80037cc:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80037ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037d2:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80037d4:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80037d8:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80037da:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80037de:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80037e0:	6803      	ldr	r3, [r0, #0]
 80037e2:	041b      	lsls	r3, r3, #16
 80037e4:	d4f1      	bmi.n	80037ca <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80037e6:	688b      	ldr	r3, [r1, #8]
 80037e8:	78c9      	ldrb	r1, [r1, #3]
 80037ea:	6802      	ldr	r2, [r0, #0]
 80037ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037f8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80037fc:	4313      	orrs	r3, r2
 80037fe:	6003      	str	r3, [r0, #0]
 8003800:	e7e3      	b.n	80037ca <USB_ActivateEndpoint+0x46>

08003802 <USB_DeactivateEndpoint>:
 8003802:	f000 b801 	b.w	8003808 <USB_DeactivateDedicatedEndpoint>
	...

08003808 <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003808:	b570      	push	{r4, r5, r6, lr}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 800380a:	784b      	ldrb	r3, [r1, #1]
 800380c:	2b01      	cmp	r3, #1
{
 800380e:	460e      	mov	r6, r1
 8003810:	4605      	mov	r5, r0
 8003812:	7809      	ldrb	r1, [r1, #0]
 8003814:	f04f 0320 	mov.w	r3, #32
  if (ep->is_in == 1U)
 8003818:	d126      	bne.n	8003868 <USB_DeactivateDedicatedEndpoint+0x60>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 800381a:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 800381e:	fb13 2301 	smlabb	r3, r3, r1, r2
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003828:	601a      	str	r2, [r3, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800382a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800382e:	601a      	str	r2, [r3, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8003830:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	4a1f      	ldr	r2, [pc, #124]	; (80038b4 <USB_DeactivateDedicatedEndpoint+0xac>)
    
    do
    {
      if (++count > 200000U)
 8003838:	3a01      	subs	r2, #1
 800383a:	d101      	bne.n	8003840 <USB_DeactivateDedicatedEndpoint+0x38>
      {
        return HAL_TIMEOUT;
 800383c:	2003      	movs	r0, #3
 800383e:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8003840:	689c      	ldr	r4, [r3, #8]
 8003842:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 8003846:	d1f7      	bne.n	8003838 <USB_DeactivateDedicatedEndpoint+0x30>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8003848:	2110      	movs	r1, #16
 800384a:	4628      	mov	r0, r5
 800384c:	f7ff ff56 	bl	80036fc <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8003850:	7831      	ldrb	r1, [r6, #0]
 8003852:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 8003856:	2301      	movs	r3, #1
 8003858:	408b      	lsls	r3, r1
 800385a:	b29b      	uxth	r3, r3
 800385c:	ea22 0303 	bic.w	r3, r2, r3
 8003860:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
 8003864:	4620      	mov	r0, r4
 8003866:	bd70      	pop	{r4, r5, r6, pc}
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8003868:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 800386c:	fb13 2301 	smlabb	r3, r3, r1, r2
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003876:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003878:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800387c:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 800387e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	4a0b      	ldr	r2, [pc, #44]	; (80038b4 <USB_DeactivateDedicatedEndpoint+0xac>)
      if (++count > 200000U)
 8003886:	3a01      	subs	r2, #1
 8003888:	d0d8      	beq.n	800383c <USB_DeactivateDedicatedEndpoint+0x34>
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 800388a:	6898      	ldr	r0, [r3, #8]
 800388c:	f010 0010 	ands.w	r0, r0, #16
 8003890:	d1f9      	bne.n	8003886 <USB_DeactivateDedicatedEndpoint+0x7e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003892:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8003896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800389a:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 800389e:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 80038a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038a6:	408a      	lsls	r2, r1
 80038a8:	ea23 0302 	bic.w	r3, r3, r2
 80038ac:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c

}
 80038b0:	bd70      	pop	{r4, r5, r6, pc}
 80038b2:	bf00      	nop
 80038b4:	00030d41 	.word	0x00030d41

080038b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80038b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 80038ba:	784b      	ldrb	r3, [r1, #1]
 80038bc:	780c      	ldrb	r4, [r1, #0]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	694b      	ldr	r3, [r1, #20]
 80038c2:	d177      	bne.n	80039b4 <USB_EPStartXfer+0xfc>
 80038c4:	2620      	movs	r6, #32
 80038c6:	f500 6510 	add.w	r5, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80038ca:	fb16 5404 	smlabb	r4, r6, r4, r5
 80038ce:	6926      	ldr	r6, [r4, #16]
    if (ep->xfer_len == 0U)
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d138      	bne.n	8003946 <USB_EPStartXfer+0x8e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80038d4:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 80038d8:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 80038dc:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80038de:	6926      	ldr	r6, [r4, #16]
 80038e0:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 80038e4:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80038e6:	6926      	ldr	r6, [r4, #16]
 80038e8:	0cf6      	lsrs	r6, r6, #19
 80038ea:	04f6      	lsls	r6, r6, #19
 80038ec:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 80038ee:	2a01      	cmp	r2, #1
 80038f0:	d150      	bne.n	8003994 <USB_EPStartXfer+0xdc>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038f2:	780c      	ldrb	r4, [r1, #0]
 80038f4:	690e      	ldr	r6, [r1, #16]
 80038f6:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 80038fa:	6166      	str	r6, [r4, #20]
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80038fc:	78ce      	ldrb	r6, [r1, #3]
 80038fe:	2e01      	cmp	r6, #1
 8003900:	d10f      	bne.n	8003922 <USB_EPStartXfer+0x6a>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8003902:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8003906:	780f      	ldrb	r7, [r1, #0]
 8003908:	f414 7f80 	tst.w	r4, #256	; 0x100
 800390c:	f04f 0420 	mov.w	r4, #32
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003910:	fb14 5407 	smlabb	r4, r4, r7, r5
 8003914:	6827      	ldr	r7, [r4, #0]
 8003916:	bf0c      	ite	eq
 8003918:	f047 5700 	orreq.w	r7, r7, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800391c:	f047 5780 	orrne.w	r7, r7, #268435456	; 0x10000000
 8003920:	6027      	str	r7, [r4, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003922:	780f      	ldrb	r7, [r1, #0]
 8003924:	eb05 1547 	add.w	r5, r5, r7, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 8003928:	2e01      	cmp	r6, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800392a:	682c      	ldr	r4, [r5, #0]
 800392c:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003930:	602c      	str	r4, [r5, #0]
    if (ep->type == EP_TYPE_ISOC)
 8003932:	d105      	bne.n	8003940 <USB_EPStartXfer+0x88>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8003934:	9200      	str	r2, [sp, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	463a      	mov	r2, r7
 800393a:	68c9      	ldr	r1, [r1, #12]
 800393c:	f000 f8ef 	bl	8003b1e <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8003940:	2000      	movs	r0, #0
 8003942:	b003      	add	sp, #12
 8003944:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003946:	0cf6      	lsrs	r6, r6, #19
 8003948:	04f6      	lsls	r6, r6, #19
 800394a:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800394c:	6926      	ldr	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 800394e:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003950:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8003954:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8003958:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 800395a:	19de      	adds	r6, r3, r7
 800395c:	3e01      	subs	r6, #1
 800395e:	fbb6 f7f7 	udiv	r7, r6, r7
 8003962:	4e37      	ldr	r6, [pc, #220]	; (8003a40 <USB_EPStartXfer+0x188>)
 8003964:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8003968:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 800396c:	ea46 060e 	orr.w	r6, r6, lr
 8003970:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003972:	6927      	ldr	r7, [r4, #16]
 8003974:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8003978:	433e      	orrs	r6, r7
 800397a:	6126      	str	r6, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 800397c:	78ce      	ldrb	r6, [r1, #3]
 800397e:	2e01      	cmp	r6, #1
 8003980:	d15a      	bne.n	8003a38 <USB_EPStartXfer+0x180>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8003982:	6926      	ldr	r6, [r4, #16]
 8003984:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8003988:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 800398a:	6926      	ldr	r6, [r4, #16]
 800398c:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8003990:	6126      	str	r6, [r4, #16]
 8003992:	e7ac      	b.n	80038ee <USB_EPStartXfer+0x36>
      if (ep->type != EP_TYPE_ISOC)
 8003994:	78ce      	ldrb	r6, [r1, #3]
 8003996:	2e01      	cmp	r6, #1
 8003998:	d0b3      	beq.n	8003902 <USB_EPStartXfer+0x4a>
        if (ep->xfer_len > 0U)
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0ae      	beq.n	80038fc <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 800399e:	f891 e000 	ldrb.w	lr, [r1]
 80039a2:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 80039a6:	2401      	movs	r4, #1
 80039a8:	fa04 f40e 	lsl.w	r4, r4, lr
 80039ac:	433c      	orrs	r4, r7
 80039ae:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 80039b2:	e7a3      	b.n	80038fc <USB_EPStartXfer+0x44>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80039b4:	f500 6530 	add.w	r5, r0, #2816	; 0xb00
 80039b8:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 80039bc:	6925      	ldr	r5, [r4, #16]
 80039be:	0ced      	lsrs	r5, r5, #19
 80039c0:	04ed      	lsls	r5, r5, #19
 80039c2:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80039c4:	6925      	ldr	r5, [r4, #16]
 80039c6:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80039ca:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80039ce:	6125      	str	r5, [r4, #16]
 80039d0:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 80039d2:	b9fb      	cbnz	r3, 8003a14 <USB_EPStartXfer+0x15c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80039d4:	6923      	ldr	r3, [r4, #16]
 80039d6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80039da:	431d      	orrs	r5, r3
 80039dc:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80039de:	6923      	ldr	r3, [r4, #16]
 80039e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039e4:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 80039e6:	2a01      	cmp	r2, #1
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 80039e8:	bf04      	itt	eq
 80039ea:	68cb      	ldreq	r3, [r1, #12]
 80039ec:	6163      	streq	r3, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 80039ee:	78cb      	ldrb	r3, [r1, #3]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d10a      	bne.n	8003a0a <USB_EPStartXfer+0x152>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80039f4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80039f8:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	bf0c      	ite	eq
 8003a00:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003a04:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8003a08:	6023      	str	r3, [r4, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a10:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8003a12:	e795      	b.n	8003940 <USB_EPStartXfer+0x88>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8003a14:	4e0a      	ldr	r6, [pc, #40]	; (8003a40 <USB_EPStartXfer+0x188>)
 8003a16:	6927      	ldr	r7, [r4, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8003a18:	442b      	add	r3, r5
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8003a20:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8003a24:	433e      	orrs	r6, r7
 8003a26:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	6926      	ldr	r6, [r4, #16]
 8003a2c:	435d      	muls	r5, r3
 8003a2e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003a32:	4335      	orrs	r5, r6
 8003a34:	6125      	str	r5, [r4, #16]
 8003a36:	e7d6      	b.n	80039e6 <USB_EPStartXfer+0x12e>
    if (dma == 1U)
 8003a38:	2a01      	cmp	r2, #1
 8003a3a:	d1ae      	bne.n	800399a <USB_EPStartXfer+0xe2>
 8003a3c:	e759      	b.n	80038f2 <USB_EPStartXfer+0x3a>
 8003a3e:	bf00      	nop
 8003a40:	1ff80000 	.word	0x1ff80000

08003a44 <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a44:	784b      	ldrb	r3, [r1, #1]
 8003a46:	2b01      	cmp	r3, #1
{
 8003a48:	b570      	push	{r4, r5, r6, lr}
 8003a4a:	780b      	ldrb	r3, [r1, #0]
 8003a4c:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1U)
 8003a4e:	d143      	bne.n	8003ad8 <USB_EP0StartXfer+0x94>
 8003a50:	2420      	movs	r4, #32
 8003a52:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003a56:	fb14 6303 	smlabb	r3, r4, r3, r6
 8003a5a:	691c      	ldr	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8003a5c:	b9cd      	cbnz	r5, 8003a92 <USB_EP0StartXfer+0x4e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003a5e:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8003a62:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8003a66:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003a68:	691c      	ldr	r4, [r3, #16]
 8003a6a:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003a6e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003a70:	691c      	ldr	r4, [r3, #16]
 8003a72:	0ce4      	lsrs	r4, r4, #19
 8003a74:	04e4      	lsls	r4, r4, #19
 8003a76:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8003a78:	780d      	ldrb	r5, [r1, #0]
 8003a7a:	eb06 1345 	add.w	r3, r6, r5, lsl #5
    
    if (dma == 1)
 8003a7e:	2a01      	cmp	r2, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8003a80:	681c      	ldr	r4, [r3, #0]
 8003a82:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003a86:	601c      	str	r4, [r3, #0]
    if (dma == 1)
 8003a88:	d11b      	bne.n	8003ac2 <USB_EP0StartXfer+0x7e>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a8a:	690a      	ldr	r2, [r1, #16]
 8003a8c:	615a      	str	r2, [r3, #20]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8003a8e:	2000      	movs	r0, #0
 8003a90:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a92:	0ce4      	lsrs	r4, r4, #19
 8003a94:	04e4      	lsls	r4, r4, #19
 8003a96:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003a98:	691c      	ldr	r4, [r3, #16]
 8003a9a:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8003a9e:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8003aa2:	611c      	str	r4, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8003aa4:	688c      	ldr	r4, [r1, #8]
 8003aa6:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8003aa8:	bf88      	it	hi
 8003aaa:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003aac:	691c      	ldr	r4, [r3, #16]
 8003aae:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003ab2:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003ab4:	694c      	ldr	r4, [r1, #20]
 8003ab6:	691d      	ldr	r5, [r3, #16]
 8003ab8:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003abc:	432c      	orrs	r4, r5
 8003abe:	611c      	str	r4, [r3, #16]
 8003ac0:	e7da      	b.n	8003a78 <USB_EP0StartXfer+0x34>
      if (ep->xfer_len > 0U)
 8003ac2:	694b      	ldr	r3, [r1, #20]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0e2      	beq.n	8003a8e <USB_EP0StartXfer+0x4a>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8003ac8:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8003acc:	2301      	movs	r3, #1
 8003ace:	40ab      	lsls	r3, r5
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8003ad6:	e7da      	b.n	8003a8e <USB_EP0StartXfer+0x4a>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003ad8:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8003adc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003ae0:	6903      	ldr	r3, [r0, #16]
 8003ae2:	0cdb      	lsrs	r3, r3, #19
 8003ae4:	04db      	lsls	r3, r3, #19
 8003ae6:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8003ae8:	6903      	ldr	r3, [r0, #16]
 8003aea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003aee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003af2:	6103      	str	r3, [r0, #16]
 8003af4:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0U)
 8003af6:	b105      	cbz	r5, 8003afa <USB_EP0StartXfer+0xb6>
      ep->xfer_len = ep->maxpacket;
 8003af8:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003afa:	6904      	ldr	r4, [r0, #16]
 8003afc:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003b00:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8003b02:	6904      	ldr	r4, [r0, #16]
 8003b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b08:	4323      	orrs	r3, r4
    if (dma == 1U)
 8003b0a:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8003b0c:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b0e:	bf04      	itt	eq
 8003b10:	68cb      	ldreq	r3, [r1, #12]
 8003b12:	6143      	streq	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8003b14:	6803      	ldr	r3, [r0, #0]
 8003b16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b1a:	6003      	str	r3, [r0, #0]
 8003b1c:	e7b7      	b.n	8003a8e <USB_EP0StartXfer+0x4a>

08003b1e <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003b1e:	b510      	push	{r4, lr}
 8003b20:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8003b24:	b94c      	cbnz	r4, 8003b3a <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 8003b26:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003b28:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8003b2c:	f023 0303 	bic.w	r3, r3, #3
 8003b30:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8003b34:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 8003b36:	4299      	cmp	r1, r3
 8003b38:	d101      	bne.n	8003b3e <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003b3e:	f851 0b04 	ldr.w	r0, [r1], #4
 8003b42:	6010      	str	r0, [r2, #0]
 8003b44:	e7f7      	b.n	8003b36 <USB_WritePacket+0x18>

08003b46 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8003b46:	3203      	adds	r2, #3
 8003b48:	f022 0203 	bic.w	r2, r2, #3
 8003b4c:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8003b4e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003b52:	4291      	cmp	r1, r2
 8003b54:	d101      	bne.n	8003b5a <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8003b56:	4608      	mov	r0, r1
 8003b58:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8003b5a:	6803      	ldr	r3, [r0, #0]
 8003b5c:	f841 3b04 	str.w	r3, [r1], #4
 8003b60:	e7f7      	b.n	8003b52 <USB_ReadPacket+0xc>

08003b62 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8003b62:	784b      	ldrb	r3, [r1, #1]
 8003b64:	780a      	ldrb	r2, [r1, #0]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	f04f 0320 	mov.w	r3, #32
 8003b6c:	d10b      	bne.n	8003b86 <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8003b6e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8003b72:	fb13 0002 	smlabb	r0, r3, r2, r0
 8003b76:	6803      	ldr	r3, [r0, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	db0b      	blt.n	8003b94 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8003b7c:	6803      	ldr	r3, [r0, #0]
 8003b7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b82:	6003      	str	r3, [r0, #0]
 8003b84:	e006      	b.n	8003b94 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8003b86:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8003b8a:	fb13 0002 	smlabb	r0, r3, r2, r0
 8003b8e:	6803      	ldr	r3, [r0, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	daf3      	bge.n	8003b7c <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003b94:	6803      	ldr	r3, [r0, #0]
 8003b96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b9a:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	4770      	bx	lr

08003ba0 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8003ba0:	784b      	ldrb	r3, [r1, #1]
 8003ba2:	780a      	ldrb	r2, [r1, #0]
 8003ba4:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ba6:	bf0c      	ite	eq
 8003ba8:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003bac:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	fb13 0002 	smlabb	r0, r3, r2, r0
 8003bb6:	6803      	ldr	r3, [r0, #0]
 8003bb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bbc:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003bbe:	78cb      	ldrb	r3, [r1, #3]
 8003bc0:	3b02      	subs	r3, #2
 8003bc2:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003bc4:	bf9e      	ittt	ls
 8003bc6:	6803      	ldrls	r3, [r0, #0]
 8003bc8:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8003bce:	2000      	movs	r0, #0
 8003bd0:	4770      	bx	lr

08003bd2 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8003bd2:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003bd6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003bda:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8003bde:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003be2:	0109      	lsls	r1, r1, #4
 8003be4:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8003be8:	4319      	orrs	r1, r3
 8003bea:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8003bee:	2000      	movs	r0, #0
 8003bf0:	4770      	bx	lr

08003bf2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003bf2:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8003bf4:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003bf8:	f023 0302 	bic.w	r3, r3, #2
 8003bfc:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8003c00:	2003      	movs	r0, #3
 8003c02:	f7fd fd45 	bl	8001690 <HAL_Delay>
  
  return HAL_OK;  
}
 8003c06:	2000      	movs	r0, #0
 8003c08:	bd08      	pop	{r3, pc}

08003c0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003c0a:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8003c0c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003c10:	f043 0302 	orr.w	r3, r3, #2
 8003c14:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8003c18:	2003      	movs	r0, #3
 8003c1a:	f7fd fd39 	bl	8001690 <HAL_Delay>
  
  return HAL_OK;  
}
 8003c1e:	2000      	movs	r0, #0
 8003c20:	bd08      	pop	{r3, pc}

08003c22 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8003c22:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8003c24:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8003c26:	4010      	ands	r0, r2
 8003c28:	4770      	bx	lr

08003c2a <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003c2a:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003c2e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8003c32:	69c0      	ldr	r0, [r0, #28]
 8003c34:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 8003c36:	0c00      	lsrs	r0, r0, #16
 8003c38:	4770      	bx	lr

08003c3a <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003c3a:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003c3e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8003c42:	69c0      	ldr	r0, [r0, #28]
 8003c44:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 8003c46:	b280      	uxth	r0, r0
 8003c48:	4770      	bx	lr

08003c4a <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8003c4a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8003c4e:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 8003c52:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8003c56:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8003c58:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8003c5a:	4010      	ands	r0, r2
 8003c5c:	4770      	bx	lr

08003c5e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003c5e:	b510      	push	{r4, lr}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8003c60:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003c64:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003c68:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8003c6c:	40cb      	lsrs	r3, r1
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003c6e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8003c72:	01db      	lsls	r3, r3, #7
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003c74:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	4323      	orrs	r3, r4
  return v;
}
 8003c7a:	4018      	ands	r0, r3
 8003c7c:	bd10      	pop	{r4, pc}

08003c7e <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8003c7e:	6940      	ldr	r0, [r0, #20]
}
 8003c80:	f000 0001 	and.w	r0, r0, #1
 8003c84:	4770      	bx	lr

08003c86 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003c86:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003c8a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c8e:	f023 0307 	bic.w	r3, r3, #7
 8003c92:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003c96:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	f002 0206 	and.w	r2, r2, #6
 8003ca0:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8003ca2:	bf02      	ittt	eq
 8003ca4:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8003ca8:	f042 0203 	orreq.w	r2, r2, #3
 8003cac:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cb6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8003cb8:	2000      	movs	r0, #0
 8003cba:	4770      	bx	lr

08003cbc <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003cbc:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003cbe:	2400      	movs	r4, #0
 8003cc0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003cc4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003cc8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003ccc:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003cd0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003cd4:	f044 0418 	orr.w	r4, r4, #24
 8003cd8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8003cdc:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 8003ce0:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003ce2:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8003ce6:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8003cea:	bf08      	it	eq
 8003cec:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8003cf0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003cf4:	bf04      	itt	eq
 8003cf6:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8003cfa:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 8003cfe:	2000      	movs	r0, #0
 8003d00:	bd10      	pop	{r4, pc}
	...

08003d04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d04:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003d06:	3b01      	subs	r3, #1
 8003d08:	d101      	bne.n	8003d0e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8003d0a:	2003      	movs	r0, #3
 8003d0c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d0e:	6902      	ldr	r2, [r0, #16]
 8003d10:	2a00      	cmp	r2, #0
 8003d12:	daf8      	bge.n	8003d06 <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d14:	6903      	ldr	r3, [r0, #16]
 8003d16:	4a06      	ldr	r2, [pc, #24]	; (8003d30 <USB_CoreReset+0x2c>)
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8003d1e:	3a01      	subs	r2, #1
 8003d20:	d0f3      	beq.n	8003d0a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d22:	6903      	ldr	r3, [r0, #16]
 8003d24:	f013 0301 	ands.w	r3, r3, #1
 8003d28:	d1f9      	bne.n	8003d1e <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8003d2a:	4618      	mov	r0, r3
}
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	00030d41 	.word	0x00030d41

08003d34 <USBD_CUSTOM_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgDesc);
 8003d34:	2329      	movs	r3, #41	; 0x29
 8003d36:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgDesc;
}
 8003d38:	4800      	ldr	r0, [pc, #0]	; (8003d3c <USBD_CUSTOM_HID_GetCfgDesc+0x8>)
 8003d3a:	4770      	bx	lr
 8003d3c:	20000044 	.word	0x20000044

08003d40 <USBD_CUSTOM_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8003d40:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8003d44:	2000      	movs	r0, #0
 8003d46:	7518      	strb	r0, [r3, #20]

  return USBD_OK;
}
 8003d48:	4770      	bx	lr

08003d4a <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003d4a:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 8003d4c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218

  if (hhid->IsReportAvailable == 1)
 8003d50:	6923      	ldr	r3, [r4, #16]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d107      	bne.n	8003d66 <USBD_CUSTOM_HID_EP0_RxReady+0x1c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8003d56:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8003d5a:	7861      	ldrb	r1, [r4, #1]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	7820      	ldrb	r0, [r4, #0]
 8003d60:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0;      
 8003d62:	2300      	movs	r3, #0
 8003d64:	6123      	str	r3, [r4, #16]
  }

  return USBD_OK;
}
 8003d66:	2000      	movs	r0, #0
 8003d68:	bd10      	pop	{r4, pc}
	...

08003d6c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8003d6c:	230a      	movs	r3, #10
 8003d6e:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8003d70:	4800      	ldr	r0, [pc, #0]	; (8003d74 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 8003d72:	4770      	bx	lr
 8003d74:	2000007c 	.word	0x2000007c

08003d78 <USBD_CUSTOM_HID_DataOut>:
{
 8003d78:	b538      	push	{r3, r4, r5, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 8003d7a:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8003d7e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8003d82:	7869      	ldrb	r1, [r5, #1]
 8003d84:	68db      	ldr	r3, [r3, #12]
{
 8003d86:	4604      	mov	r4, r0
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8003d88:	7828      	ldrb	r0, [r5, #0]
 8003d8a:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf, 
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	462a      	mov	r2, r5
 8003d90:	2101      	movs	r1, #1
 8003d92:	4620      	mov	r0, r4
 8003d94:	f002 f8ec 	bl	8005f70 <USBD_LL_PrepareReceive>
}
 8003d98:	2000      	movs	r0, #0
 8003d9a:	bd38      	pop	{r3, r4, r5, pc}

08003d9c <USBD_CUSTOM_HID_Setup>:
{
 8003d9c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d9e:	780c      	ldrb	r4, [r1, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8003da0:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003da4:	f014 0460 	ands.w	r4, r4, #96	; 0x60
{
 8003da8:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003daa:	d02c      	beq.n	8003e06 <USBD_CUSTOM_HID_Setup+0x6a>
 8003dac:	2c20      	cmp	r4, #32
 8003dae:	d10c      	bne.n	8003dca <USBD_CUSTOM_HID_Setup+0x2e>
    switch (req->bRequest)
 8003db0:	784a      	ldrb	r2, [r1, #1]
 8003db2:	3a02      	subs	r2, #2
 8003db4:	2a09      	cmp	r2, #9
 8003db6:	d820      	bhi.n	8003dfa <USBD_CUSTOM_HID_Setup+0x5e>
 8003db8:	e8df f002 	tbb	[pc, r2]
 8003dbc:	1f1f0913 	.word	0x1f1f0913
 8003dc0:	171f1f1f 	.word	0x171f1f1f
 8003dc4:	050f      	.short	0x050f
      hhid->Protocol = (uint8_t)(req->wValue);
 8003dc6:	788a      	ldrb	r2, [r1, #2]
 8003dc8:	605a      	str	r2, [r3, #4]
  return USBD_OK;
 8003dca:	2400      	movs	r4, #0
 8003dcc:	e019      	b.n	8003e02 <USBD_CUSTOM_HID_Setup+0x66>
      USBD_CtlSendData (pdev, 
 8003dce:	2201      	movs	r2, #1
 8003dd0:	1d19      	adds	r1, r3, #4
      USBD_CtlSendData (pdev, 
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	f000 fb76 	bl	80044c4 <USBD_CtlSendData>
 8003dd8:	e7f7      	b.n	8003dca <USBD_CUSTOM_HID_Setup+0x2e>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8003dda:	884a      	ldrh	r2, [r1, #2]
 8003ddc:	0a12      	lsrs	r2, r2, #8
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	e7f3      	b.n	8003dca <USBD_CUSTOM_HID_Setup+0x2e>
      USBD_CtlSendData (pdev, 
 8003de2:	2201      	movs	r2, #1
 8003de4:	f103 0108 	add.w	r1, r3, #8
 8003de8:	e7f3      	b.n	8003dd2 <USBD_CUSTOM_HID_Setup+0x36>
      hhid->IsReportAvailable = 1;
 8003dea:	2201      	movs	r2, #1
 8003dec:	611a      	str	r2, [r3, #16]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, (uint8_t)(req->wLength));
 8003dee:	4628      	mov	r0, r5
 8003df0:	798a      	ldrb	r2, [r1, #6]
 8003df2:	4619      	mov	r1, r3
 8003df4:	f000 fb7b 	bl	80044ee <USBD_CtlPrepareRx>
 8003df8:	e7e7      	b.n	8003dca <USBD_CUSTOM_HID_Setup+0x2e>
      USBD_CtlError (pdev, req);
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	f000 fb3b 	bl	8004476 <USBD_CtlError>
      return USBD_FAIL; 
 8003e00:	2402      	movs	r4, #2
}
 8003e02:	4620      	mov	r0, r4
 8003e04:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 8003e06:	784a      	ldrb	r2, [r1, #1]
 8003e08:	2a0a      	cmp	r2, #10
 8003e0a:	d01a      	beq.n	8003e42 <USBD_CUSTOM_HID_Setup+0xa6>
 8003e0c:	2a0b      	cmp	r2, #11
 8003e0e:	d01e      	beq.n	8003e4e <USBD_CUSTOM_HID_Setup+0xb2>
 8003e10:	2a06      	cmp	r2, #6
 8003e12:	d1f6      	bne.n	8003e02 <USBD_CUSTOM_HID_Setup+0x66>
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8003e14:	884b      	ldrh	r3, [r1, #2]
 8003e16:	0a1b      	lsrs	r3, r3, #8
 8003e18:	2b22      	cmp	r3, #34	; 0x22
 8003e1a:	d107      	bne.n	8003e2c <USBD_CUSTOM_HID_Setup+0x90>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8003e1c:	88ca      	ldrh	r2, [r1, #6]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8003e1e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8003e22:	2a02      	cmp	r2, #2
 8003e24:	bf28      	it	cs
 8003e26:	2202      	movcs	r2, #2
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8003e28:	6819      	ldr	r1, [r3, #0]
 8003e2a:	e7d2      	b.n	8003dd2 <USBD_CUSTOM_HID_Setup+0x36>
      else if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8003e2c:	2b21      	cmp	r3, #33	; 0x21
 8003e2e:	d105      	bne.n	8003e3c <USBD_CUSTOM_HID_Setup+0xa0>
        len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8003e30:	88ca      	ldrh	r2, [r1, #6]
        pbuf = USBD_CUSTOM_HID_Desc;   
 8003e32:	4908      	ldr	r1, [pc, #32]	; (8003e54 <USBD_CUSTOM_HID_Setup+0xb8>)
        len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8003e34:	2a09      	cmp	r2, #9
 8003e36:	bf28      	it	cs
 8003e38:	2209      	movcs	r2, #9
 8003e3a:	e7ca      	b.n	8003dd2 <USBD_CUSTOM_HID_Setup+0x36>
  uint8_t  *pbuf = NULL;
 8003e3c:	4621      	mov	r1, r4
  uint16_t len = 0;
 8003e3e:	4622      	mov	r2, r4
 8003e40:	e7c7      	b.n	8003dd2 <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlSendData (pdev,
 8003e42:	2201      	movs	r2, #1
 8003e44:	f103 010c 	add.w	r1, r3, #12
 8003e48:	f000 fb3c 	bl	80044c4 <USBD_CtlSendData>
      break;
 8003e4c:	e7d9      	b.n	8003e02 <USBD_CUSTOM_HID_Setup+0x66>
      hhid->AltSetting = (uint8_t)(req->wValue);
 8003e4e:	788a      	ldrb	r2, [r1, #2]
 8003e50:	60da      	str	r2, [r3, #12]
      break;
 8003e52:	e7d6      	b.n	8003e02 <USBD_CUSTOM_HID_Setup+0x66>
 8003e54:	20000070 	.word	0x20000070

08003e58 <USBD_CUSTOM_HID_DeInit>:
{
 8003e58:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8003e5a:	2181      	movs	r1, #129	; 0x81
{
 8003e5c:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8003e5e:	f002 f82d 	bl	8005ebc <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8003e62:	2101      	movs	r1, #1
 8003e64:	4620      	mov	r0, r4
 8003e66:	f002 f829 	bl	8005ebc <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8003e6a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8003e6e:	b153      	cbz	r3, 8003e86 <USBD_CUSTOM_HID_DeInit+0x2e>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003e70:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003e78:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8003e7c:	f002 fba8 	bl	80065d0 <free>
    pdev->pClassData = NULL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8003e86:	2000      	movs	r0, #0
 8003e88:	bd10      	pop	{r4, pc}

08003e8a <USBD_CUSTOM_HID_Init>:
{
 8003e8a:	b570      	push	{r4, r5, r6, lr}
  USBD_LL_OpenEP(pdev,
 8003e8c:	2302      	movs	r3, #2
{
 8003e8e:	4605      	mov	r5, r0
  USBD_LL_OpenEP(pdev,
 8003e90:	2203      	movs	r2, #3
 8003e92:	2181      	movs	r1, #129	; 0x81
 8003e94:	f002 f802 	bl	8005e9c <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8003e98:	2302      	movs	r3, #2
 8003e9a:	2203      	movs	r2, #3
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	f001 fffc 	bl	8005e9c <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8003ea4:	2018      	movs	r0, #24
 8003ea6:	f002 fb8b 	bl	80065c0 <malloc>
 8003eaa:	4606      	mov	r6, r0
 8003eac:	f8c5 0218 	str.w	r0, [r5, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8003eb0:	b168      	cbz	r0, 8003ece <USBD_CUSTOM_HID_Init+0x44>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8003eb2:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
    hhid->state = CUSTOM_HID_IDLE;
 8003eb6:	2400      	movs	r4, #0
 8003eb8:	7504      	strb	r4, [r0, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf, 
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	4632      	mov	r2, r6
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	f002 f853 	bl	8005f70 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8003eca:	4620      	mov	r0, r4
 8003ecc:	bd70      	pop	{r4, r5, r6, pc}
    ret = 1; 
 8003ece:	2001      	movs	r0, #1
}
 8003ed0:	bd70      	pop	{r4, r5, r6, pc}

08003ed2 <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8003ed2:	b119      	cbz	r1, 8003edc <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8003ed4:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8003ed8:	2000      	movs	r0, #0
 8003eda:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003edc:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8003ede:	4770      	bx	lr

08003ee0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003ee0:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8003ee2:	b180      	cbz	r0, 8003f06 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003ee4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003ee8:	b113      	cbz	r3, 8003ef0 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003ef0:	b109      	cbz	r1, 8003ef6 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003ef2:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8003efc:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003efe:	f001 ff89 	bl	8005e14 <USBD_LL_Init>
  
  return USBD_OK; 
 8003f02:	2000      	movs	r0, #0
 8003f04:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8003f06:	2002      	movs	r0, #2
}
 8003f08:	bd08      	pop	{r3, pc}

08003f0a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8003f0a:	b119      	cbz	r1, 8003f14 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003f0c:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8003f10:	2000      	movs	r0, #0
 8003f12:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8003f14:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003f16:	4770      	bx	lr

08003f18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003f18:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8003f1a:	f001 ffb1 	bl	8005e80 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8003f1e:	2000      	movs	r0, #0
 8003f20:	bd08      	pop	{r3, pc}

08003f22 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003f22:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003f24:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003f28:	b90b      	cbnz	r3, 8003f2e <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8003f2a:	2002      	movs	r0, #2
 8003f2c:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4798      	blx	r3
 8003f32:	2800      	cmp	r0, #0
 8003f34:	d1f9      	bne.n	8003f2a <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8003f36:	bd08      	pop	{r3, pc}

08003f38 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003f38:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8003f3a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	4798      	blx	r3
  return USBD_OK;
}
 8003f42:	2000      	movs	r0, #0
 8003f44:	bd08      	pop	{r3, pc}

08003f46 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003f46:	b538      	push	{r3, r4, r5, lr}
 8003f48:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003f4a:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8003f4e:	4628      	mov	r0, r5
 8003f50:	f000 fa7d 	bl	800444e <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8003f54:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8003f56:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8003f5a:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8003f5e:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8003f62:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8003f66:	f001 031f 	and.w	r3, r1, #31
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d00e      	beq.n	8003f8c <USBD_LL_SetupStage+0x46>
 8003f6e:	d307      	bcc.n	8003f80 <USBD_LL_SetupStage+0x3a>
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d010      	beq.n	8003f96 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8003f74:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f001 ffad 	bl	8005ed8 <USBD_LL_StallEP>
    break;
 8003f7e:	e003      	b.n	8003f88 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8003f80:	4629      	mov	r1, r5
 8003f82:	4620      	mov	r0, r4
 8003f84:	f000 f8e6 	bl	8004154 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8003f88:	2000      	movs	r0, #0
 8003f8a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	4620      	mov	r0, r4
 8003f90:	f000 f9e2 	bl	8004358 <USBD_StdItfReq>
    break;
 8003f94:	e7f8      	b.n	8003f88 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8003f96:	4629      	mov	r1, r5
 8003f98:	4620      	mov	r0, r4
 8003f9a:	f000 f9f5 	bl	8004388 <USBD_StdEPReq>
    break;
 8003f9e:	e7f3      	b.n	8003f88 <USBD_LL_SetupStage+0x42>

08003fa0 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8003fa0:	b538      	push	{r3, r4, r5, lr}
 8003fa2:	4604      	mov	r4, r0
 8003fa4:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8003fa6:	bb11      	cbnz	r1, 8003fee <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003fa8:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d10f      	bne.n	8003fd0 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8003fb0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8003fb4:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d90b      	bls.n	8003fd4 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8003fbc:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	bf28      	it	cs
 8003fc2:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8003fc4:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8003fc8:	b292      	uxth	r2, r2
 8003fca:	4629      	mov	r1, r5
 8003fcc:	f000 fa9e 	bl	800450c <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003fd4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	b123      	cbz	r3, 8003fe6 <USBD_LL_DataOutStage+0x46>
 8003fdc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003fe0:	2a03      	cmp	r2, #3
 8003fe2:	d100      	bne.n	8003fe6 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8003fe4:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f000 fa98 	bl	800451c <USBD_CtlSendStatus>
 8003fec:	e7f0      	b.n	8003fd0 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8003fee:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0eb      	beq.n	8003fd0 <USBD_LL_DataOutStage+0x30>
 8003ff8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003ffc:	2a03      	cmp	r2, #3
 8003ffe:	d1e7      	bne.n	8003fd0 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8004000:	4798      	blx	r3
 8004002:	e7e5      	b.n	8003fd0 <USBD_LL_DataOutStage+0x30>

08004004 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8004004:	b570      	push	{r4, r5, r6, lr}
 8004006:	4613      	mov	r3, r2
 8004008:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800400a:	460e      	mov	r6, r1
 800400c:	2900      	cmp	r1, #0
 800400e:	d13d      	bne.n	800408c <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004010:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8004014:	2a02      	cmp	r2, #2
 8004016:	d10f      	bne.n	8004038 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8004018:	69c5      	ldr	r5, [r0, #28]
 800401a:	6a02      	ldr	r2, [r0, #32]
 800401c:	4295      	cmp	r5, r2
 800401e:	d914      	bls.n	800404a <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8004020:	1aaa      	subs	r2, r5, r2
 8004022:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8004024:	4619      	mov	r1, r3
 8004026:	b292      	uxth	r2, r2
 8004028:	f000 fa59 	bl	80044de <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800402c:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800402e:	461a      	mov	r2, r3
 8004030:	4619      	mov	r1, r3
 8004032:	4620      	mov	r0, r4
 8004034:	f001 ff9c 	bl	8005f70 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8004038:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800403c:	2b01      	cmp	r3, #1
 800403e:	d102      	bne.n	8004046 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8004040:	2300      	movs	r3, #0
 8004042:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8004046:	2000      	movs	r0, #0
 8004048:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800404a:	6983      	ldr	r3, [r0, #24]
 800404c:	fbb3 f5f2 	udiv	r5, r3, r2
 8004050:	fb02 3515 	mls	r5, r2, r5, r3
 8004054:	b965      	cbnz	r5, 8004070 <USBD_LL_DataInStage+0x6c>
 8004056:	429a      	cmp	r2, r3
 8004058:	d80a      	bhi.n	8004070 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 800405a:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 800405e:	4293      	cmp	r3, r2
 8004060:	d206      	bcs.n	8004070 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004062:	462a      	mov	r2, r5
 8004064:	f000 fa3b 	bl	80044de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004068:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 800406c:	462b      	mov	r3, r5
 800406e:	e7de      	b.n	800402e <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004070:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	b12b      	cbz	r3, 8004084 <USBD_LL_DataInStage+0x80>
 8004078:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 800407c:	2a03      	cmp	r2, #3
 800407e:	d101      	bne.n	8004084 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8004080:	4620      	mov	r0, r4
 8004082:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8004084:	4620      	mov	r0, r4
 8004086:	f000 fa54 	bl	8004532 <USBD_CtlReceiveStatus>
 800408a:	e7d5      	b.n	8004038 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 800408c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0d7      	beq.n	8004046 <USBD_LL_DataInStage+0x42>
 8004096:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800409a:	2a03      	cmp	r2, #3
 800409c:	d1d3      	bne.n	8004046 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 800409e:	4798      	blx	r3
 80040a0:	e7d1      	b.n	8004046 <USBD_LL_DataInStage+0x42>

080040a2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80040a2:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80040a4:	2200      	movs	r2, #0
{
 80040a6:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 80040a8:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80040aa:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80040ac:	2340      	movs	r3, #64	; 0x40
 80040ae:	f001 fef5 	bl	8005e9c <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80040b2:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80040b4:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 80040b8:	2200      	movs	r2, #0
 80040ba:	2180      	movs	r1, #128	; 0x80
 80040bc:	4620      	mov	r0, r4
 80040be:	f001 feed 	bl	8005e9c <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80040c2:	2301      	movs	r3, #1
 80040c4:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80040c8:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80040cc:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80040ce:	b12b      	cbz	r3, 80040dc <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80040d0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80040d4:	7921      	ldrb	r1, [r4, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4620      	mov	r0, r4
 80040da:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80040dc:	2000      	movs	r0, #0
 80040de:	bd38      	pop	{r3, r4, r5, pc}

080040e0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80040e0:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80040e2:	2000      	movs	r0, #0
 80040e4:	4770      	bx	lr

080040e6 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80040e6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80040ea:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80040ee:	2304      	movs	r3, #4
 80040f0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80040f4:	2000      	movs	r0, #0
 80040f6:	4770      	bx	lr

080040f8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80040f8:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 80040fc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8004100:	2000      	movs	r0, #0
 8004102:	4770      	bx	lr

08004104 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004104:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004106:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800410a:	2a03      	cmp	r2, #3
 800410c:	d104      	bne.n	8004118 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800410e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	b103      	cbz	r3, 8004118 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8004116:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8004118:	2000      	movs	r0, #0
 800411a:	bd08      	pop	{r3, pc}

0800411c <USBD_LL_IsoINIncomplete>:
 800411c:	2000      	movs	r0, #0
 800411e:	4770      	bx	lr

08004120 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8004120:	2000      	movs	r0, #0
 8004122:	4770      	bx	lr

08004124 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8004124:	2000      	movs	r0, #0
 8004126:	4770      	bx	lr

08004128 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8004128:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800412a:	2201      	movs	r2, #1
 800412c:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004130:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8004134:	7901      	ldrb	r1, [r0, #4]
 8004136:	6852      	ldr	r2, [r2, #4]
 8004138:	4790      	blx	r2
   
  return USBD_OK;
}
 800413a:	2000      	movs	r0, #0
 800413c:	bd08      	pop	{r3, pc}

0800413e <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800413e:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8004140:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8004142:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8004144:	f001 fec8 	bl	8005ed8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8004148:	4620      	mov	r0, r4
 800414a:	2100      	movs	r1, #0
}
 800414c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8004150:	f001 bec2 	b.w	8005ed8 <USBD_LL_StallEP>

08004154 <USBD_StdDevReq>:
{
 8004154:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8004156:	784b      	ldrb	r3, [r1, #1]
{
 8004158:	4604      	mov	r4, r0
 800415a:	460d      	mov	r5, r1
  switch (req->bRequest) 
 800415c:	2b09      	cmp	r3, #9
 800415e:	f200 8081 	bhi.w	8004264 <USBD_StdDevReq+0x110>
 8004162:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004166:	00d0      	.short	0x00d0
 8004168:	007f00ec 	.word	0x007f00ec
 800416c:	007f00e0 	.word	0x007f00e0
 8004170:	000a0074 	.word	0x000a0074
 8004174:	00c0007f 	.word	0x00c0007f
 8004178:	0094      	.short	0x0094
  switch (req->wValue >> 8)
 800417a:	8849      	ldrh	r1, [r1, #2]
 800417c:	0a0b      	lsrs	r3, r1, #8
 800417e:	3b01      	subs	r3, #1
 8004180:	2b06      	cmp	r3, #6
 8004182:	d86f      	bhi.n	8004264 <USBD_StdDevReq+0x110>
 8004184:	e8df f003 	tbb	[pc, r3]
 8004188:	6e291c04 	.word	0x6e291c04
 800418c:	506e      	.short	0x506e
 800418e:	59          	.byte	0x59
 800418f:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004190:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004194:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8004196:	7c20      	ldrb	r0, [r4, #16]
 8004198:	f10d 0106 	add.w	r1, sp, #6
 800419c:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800419e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80041a2:	2a00      	cmp	r2, #0
 80041a4:	d06e      	beq.n	8004284 <USBD_StdDevReq+0x130>
 80041a6:	88eb      	ldrh	r3, [r5, #6]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d06b      	beq.n	8004284 <USBD_StdDevReq+0x130>
    len = MIN(len , req->wLength);
 80041ac:	429a      	cmp	r2, r3
 80041ae:	bf28      	it	cs
 80041b0:	461a      	movcs	r2, r3
 80041b2:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80041b6:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 80041b8:	4620      	mov	r0, r4
 80041ba:	f000 f983 	bl	80044c4 <USBD_CtlSendData>
 80041be:	e061      	b.n	8004284 <USBD_StdDevReq+0x130>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80041c0:	7c02      	ldrb	r2, [r0, #16]
 80041c2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80041c6:	b932      	cbnz	r2, 80041d6 <USBD_StdDevReq+0x82>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80041ca:	f10d 0006 	add.w	r0, sp, #6
 80041ce:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80041d0:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80041d2:	7043      	strb	r3, [r0, #1]
 80041d4:	e7e3      	b.n	800419e <USBD_StdDevReq+0x4a>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	e7f7      	b.n	80041ca <USBD_StdDevReq+0x76>
    switch ((uint8_t)(req->wValue))
 80041da:	b2c9      	uxtb	r1, r1
 80041dc:	2905      	cmp	r1, #5
 80041de:	d81c      	bhi.n	800421a <USBD_StdDevReq+0xc6>
 80041e0:	e8df f001 	tbb	[pc, r1]
 80041e4:	0f0b0703 	.word	0x0f0b0703
 80041e8:	1713      	.short	0x1713
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80041ea:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	e7d1      	b.n	8004196 <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80041f2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	e7cd      	b.n	8004196 <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80041fa:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	e7c9      	b.n	8004196 <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004202:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	e7c5      	b.n	8004196 <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800420a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	e7c1      	b.n	8004196 <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004212:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	e7bd      	b.n	8004196 <USBD_StdDevReq+0x42>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 800421a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800421e:	f10d 0206 	add.w	r2, sp, #6
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004224:	4798      	blx	r3
 8004226:	e7ba      	b.n	800419e <USBD_StdDevReq+0x4a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004228:	7c03      	ldrb	r3, [r0, #16]
 800422a:	b9db      	cbnz	r3, 8004264 <USBD_StdDevReq+0x110>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800422c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004230:	f10d 0006 	add.w	r0, sp, #6
 8004234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004236:	4798      	blx	r3
 8004238:	e7b1      	b.n	800419e <USBD_StdDevReq+0x4a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800423a:	7c03      	ldrb	r3, [r0, #16]
 800423c:	b993      	cbnz	r3, 8004264 <USBD_StdDevReq+0x110>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800423e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004242:	f10d 0006 	add.w	r0, sp, #6
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800424a:	2307      	movs	r3, #7
 800424c:	e7c1      	b.n	80041d2 <USBD_StdDevReq+0x7e>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800424e:	888b      	ldrh	r3, [r1, #4]
 8004250:	b943      	cbnz	r3, 8004264 <USBD_StdDevReq+0x110>
 8004252:	88cb      	ldrh	r3, [r1, #6]
 8004254:	b933      	cbnz	r3, 8004264 <USBD_StdDevReq+0x110>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004256:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800425a:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800425c:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800425e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004262:	d103      	bne.n	800426c <USBD_StdDevReq+0x118>
    USBD_CtlError(pdev , req);
 8004264:	4620      	mov	r0, r4
 8004266:	f7ff ff6a 	bl	800413e <USBD_CtlError.constprop.0>
    break;
 800426a:	e00b      	b.n	8004284 <USBD_StdDevReq+0x130>
      pdev->dev_address = dev_addr;
 800426c:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8004270:	4629      	mov	r1, r5
 8004272:	f001 fe61 	bl	8005f38 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8004276:	4620      	mov	r0, r4
 8004278:	f000 f950 	bl	800451c <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 800427c:	b12d      	cbz	r5, 800428a <USBD_StdDevReq+0x136>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800427e:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8004280:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8004284:	2000      	movs	r0, #0
 8004286:	b003      	add	sp, #12
 8004288:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800428a:	2301      	movs	r3, #1
 800428c:	e7f8      	b.n	8004280 <USBD_StdDevReq+0x12c>
  cfgidx = (uint8_t)(req->wValue);                 
 800428e:	7889      	ldrb	r1, [r1, #2]
 8004290:	4d30      	ldr	r5, [pc, #192]	; (8004354 <USBD_StdDevReq+0x200>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004292:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8004294:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004296:	d8e5      	bhi.n	8004264 <USBD_StdDevReq+0x110>
    switch (pdev->dev_state) 
 8004298:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800429c:	2b02      	cmp	r3, #2
 800429e:	d00c      	beq.n	80042ba <USBD_StdDevReq+0x166>
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d1df      	bne.n	8004264 <USBD_StdDevReq+0x110>
      if (cfgidx == 0) 
 80042a4:	b9b1      	cbnz	r1, 80042d4 <USBD_StdDevReq+0x180>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80042a6:	2302      	movs	r3, #2
 80042a8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80042ac:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80042ae:	f7ff fe43 	bl	8003f38 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80042b2:	4620      	mov	r0, r4
 80042b4:	f000 f932 	bl	800451c <USBD_CtlSendStatus>
 80042b8:	e7e4      	b.n	8004284 <USBD_StdDevReq+0x130>
      if (cfgidx) 
 80042ba:	2900      	cmp	r1, #0
 80042bc:	d0f9      	beq.n	80042b2 <USBD_StdDevReq+0x15e>
        pdev->dev_config = cfgidx;
 80042be:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80042c0:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80042c2:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80042c4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80042c8:	4620      	mov	r0, r4
 80042ca:	f7ff fe2a 	bl	8003f22 <USBD_SetClassConfig>
 80042ce:	2802      	cmp	r0, #2
 80042d0:	d1ef      	bne.n	80042b2 <USBD_StdDevReq+0x15e>
 80042d2:	e7c7      	b.n	8004264 <USBD_StdDevReq+0x110>
      else  if (cfgidx != pdev->dev_config) 
 80042d4:	6841      	ldr	r1, [r0, #4]
 80042d6:	2901      	cmp	r1, #1
 80042d8:	d0eb      	beq.n	80042b2 <USBD_StdDevReq+0x15e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80042da:	b2c9      	uxtb	r1, r1
 80042dc:	f7ff fe2c 	bl	8003f38 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80042e0:	7829      	ldrb	r1, [r5, #0]
 80042e2:	6061      	str	r1, [r4, #4]
 80042e4:	e7f0      	b.n	80042c8 <USBD_StdDevReq+0x174>
  if (req->wLength != 1) 
 80042e6:	88ca      	ldrh	r2, [r1, #6]
 80042e8:	2a01      	cmp	r2, #1
 80042ea:	d1bb      	bne.n	8004264 <USBD_StdDevReq+0x110>
    switch (pdev->dev_state )  
 80042ec:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d003      	beq.n	80042fc <USBD_StdDevReq+0x1a8>
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d1b5      	bne.n	8004264 <USBD_StdDevReq+0x110>
      USBD_CtlSendData (pdev, 
 80042f8:	1d01      	adds	r1, r0, #4
 80042fa:	e75d      	b.n	80041b8 <USBD_StdDevReq+0x64>
      pdev->dev_default_config = 0;
 80042fc:	4601      	mov	r1, r0
 80042fe:	2300      	movs	r3, #0
 8004300:	f841 3f08 	str.w	r3, [r1, #8]!
 8004304:	e758      	b.n	80041b8 <USBD_StdDevReq+0x64>
  switch (pdev->dev_state) 
 8004306:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800430a:	3b02      	subs	r3, #2
 800430c:	2b01      	cmp	r3, #1
 800430e:	d8a9      	bhi.n	8004264 <USBD_StdDevReq+0x110>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8004310:	2301      	movs	r3, #1
 8004312:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8004314:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8004318:	b10b      	cbz	r3, 800431e <USBD_StdDevReq+0x1ca>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800431a:	2303      	movs	r3, #3
 800431c:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800431e:	2202      	movs	r2, #2
 8004320:	f104 010c 	add.w	r1, r4, #12
 8004324:	e748      	b.n	80041b8 <USBD_StdDevReq+0x64>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004326:	884b      	ldrh	r3, [r1, #2]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d1ab      	bne.n	8004284 <USBD_StdDevReq+0x130>
      pdev->dev_remote_wakeup = 0; 
 800432c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8004330:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004334:	4629      	mov	r1, r5
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	4620      	mov	r0, r4
 800433a:	4798      	blx	r3
 800433c:	e7b9      	b.n	80042b2 <USBD_StdDevReq+0x15e>
  switch (pdev->dev_state)
 800433e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004342:	3b02      	subs	r3, #2
 8004344:	2b01      	cmp	r3, #1
 8004346:	d88d      	bhi.n	8004264 <USBD_StdDevReq+0x110>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8004348:	884b      	ldrh	r3, [r1, #2]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d19a      	bne.n	8004284 <USBD_StdDevReq+0x130>
      pdev->dev_remote_wakeup = 0; 
 800434e:	2300      	movs	r3, #0
 8004350:	e7ec      	b.n	800432c <USBD_StdDevReq+0x1d8>
 8004352:	bf00      	nop
 8004354:	20000158 	.word	0x20000158

08004358 <USBD_StdItfReq>:
{
 8004358:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800435a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800435e:	2b03      	cmp	r3, #3
{
 8004360:	4604      	mov	r4, r0
 8004362:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8004364:	d10d      	bne.n	8004382 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8004366:	790b      	ldrb	r3, [r1, #4]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d80a      	bhi.n	8004382 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 800436c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8004374:	88eb      	ldrh	r3, [r5, #6]
 8004376:	b913      	cbnz	r3, 800437e <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8004378:	4620      	mov	r0, r4
 800437a:	f000 f8cf 	bl	800451c <USBD_CtlSendStatus>
}
 800437e:	2000      	movs	r0, #0
 8004380:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8004382:	f7ff fedc 	bl	800413e <USBD_CtlError.constprop.0>
    break;
 8004386:	e7fa      	b.n	800437e <USBD_StdItfReq+0x26>

08004388 <USBD_StdEPReq>:
{
 8004388:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 800438a:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 800438c:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 800438e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8004392:	2a20      	cmp	r2, #32
{
 8004394:	4604      	mov	r4, r0
 8004396:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8004398:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 800439a:	d105      	bne.n	80043a8 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 800439c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	4798      	blx	r3
}
 80043a4:	2000      	movs	r0, #0
 80043a6:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80043a8:	784a      	ldrb	r2, [r1, #1]
 80043aa:	2a01      	cmp	r2, #1
 80043ac:	d01c      	beq.n	80043e8 <USBD_StdEPReq+0x60>
 80043ae:	d32a      	bcc.n	8004406 <USBD_StdEPReq+0x7e>
 80043b0:	2a03      	cmp	r2, #3
 80043b2:	d1f7      	bne.n	80043a4 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80043b4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80043b8:	2a02      	cmp	r2, #2
 80043ba:	d040      	beq.n	800443e <USBD_StdEPReq+0xb6>
 80043bc:	2a03      	cmp	r2, #3
 80043be:	d002      	beq.n	80043c6 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 80043c0:	f7ff febd 	bl	800413e <USBD_CtlError.constprop.0>
      break;
 80043c4:	e7ee      	b.n	80043a4 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80043c6:	884a      	ldrh	r2, [r1, #2]
 80043c8:	b922      	cbnz	r2, 80043d4 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80043ca:	065e      	lsls	r6, r3, #25
 80043cc:	d002      	beq.n	80043d4 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 80043ce:	4619      	mov	r1, r3
 80043d0:	f001 fd82 	bl	8005ed8 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 80043d4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80043d8:	4629      	mov	r1, r5
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	4620      	mov	r0, r4
 80043de:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80043e0:	4620      	mov	r0, r4
 80043e2:	f000 f89b 	bl	800451c <USBD_CtlSendStatus>
 80043e6:	e7dd      	b.n	80043a4 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80043e8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80043ec:	2a02      	cmp	r2, #2
 80043ee:	d026      	beq.n	800443e <USBD_StdEPReq+0xb6>
 80043f0:	2a03      	cmp	r2, #3
 80043f2:	d1e5      	bne.n	80043c0 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80043f4:	884a      	ldrh	r2, [r1, #2]
 80043f6:	2a00      	cmp	r2, #0
 80043f8:	d1d4      	bne.n	80043a4 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80043fa:	0659      	lsls	r1, r3, #25
 80043fc:	d0f0      	beq.n	80043e0 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80043fe:	4619      	mov	r1, r3
 8004400:	f001 fd78 	bl	8005ef4 <USBD_LL_ClearStallEP>
 8004404:	e7e6      	b.n	80043d4 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8004406:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800440a:	2a02      	cmp	r2, #2
 800440c:	d017      	beq.n	800443e <USBD_StdEPReq+0xb6>
 800440e:	2a03      	cmp	r2, #3
 8004410:	d1d6      	bne.n	80043c0 <USBD_StdEPReq+0x38>
 8004412:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004416:	f016 0f80 	tst.w	r6, #128	; 0x80
 800441a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800441e:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004420:	bf14      	ite	ne
 8004422:	3514      	addne	r5, #20
 8004424:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004428:	f001 fd72 	bl	8005f10 <USBD_LL_IsStallEP>
 800442c:	b168      	cbz	r0, 800444a <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 800442e:	2301      	movs	r3, #1
 8004430:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8004432:	2202      	movs	r2, #2
 8004434:	4629      	mov	r1, r5
 8004436:	4620      	mov	r0, r4
 8004438:	f000 f844 	bl	80044c4 <USBD_CtlSendData>
      break;
 800443c:	e7b2      	b.n	80043a4 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 800443e:	065a      	lsls	r2, r3, #25
 8004440:	d0b0      	beq.n	80043a4 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8004442:	4619      	mov	r1, r3
 8004444:	f001 fd48 	bl	8005ed8 <USBD_LL_StallEP>
 8004448:	e7ac      	b.n	80043a4 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 800444a:	6028      	str	r0, [r5, #0]
 800444c:	e7f1      	b.n	8004432 <USBD_StdEPReq+0xaa>

0800444e <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800444e:	780b      	ldrb	r3, [r1, #0]
 8004450:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8004452:	784b      	ldrb	r3, [r1, #1]
 8004454:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004456:	78ca      	ldrb	r2, [r1, #3]
 8004458:	788b      	ldrb	r3, [r1, #2]
 800445a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800445e:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8004460:	794a      	ldrb	r2, [r1, #5]
 8004462:	790b      	ldrb	r3, [r1, #4]
 8004464:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004468:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800446a:	79ca      	ldrb	r2, [r1, #7]
 800446c:	798b      	ldrb	r3, [r1, #6]
 800446e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004472:	80c3      	strh	r3, [r0, #6]
 8004474:	4770      	bx	lr

08004476 <USBD_CtlError>:
{
 8004476:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 8004478:	2180      	movs	r1, #128	; 0x80
{
 800447a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800447c:	f001 fd2c 	bl	8005ed8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8004480:	4620      	mov	r0, r4
 8004482:	2100      	movs	r1, #0
}
 8004484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8004488:	f001 bd26 	b.w	8005ed8 <USBD_LL_StallEP>

0800448c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800448c:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 800448e:	b188      	cbz	r0, 80044b4 <USBD_GetString+0x28>
 8004490:	4605      	mov	r5, r0
 8004492:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8004494:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2c00      	cmp	r4, #0
 800449c:	d1f9      	bne.n	8004492 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	3302      	adds	r3, #2
 80044a2:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80044a4:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80044a6:	2303      	movs	r3, #3
 80044a8:	704b      	strb	r3, [r1, #1]
 80044aa:	3801      	subs	r0, #1
 80044ac:	2302      	movs	r3, #2
    while (*desc != '\0') 
 80044ae:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80044b2:	b905      	cbnz	r5, 80044b6 <USBD_GetString+0x2a>
 80044b4:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 80044bc:	3302      	adds	r3, #2
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	548c      	strb	r4, [r1, r2]
 80044c2:	e7f4      	b.n	80044ae <USBD_GetString+0x22>

080044c4 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80044c4:	b510      	push	{r4, lr}
 80044c6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80044c8:	2202      	movs	r2, #2
 80044ca:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80044ce:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80044d0:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80044d2:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80044d4:	2100      	movs	r1, #0
 80044d6:	f001 fd3d 	bl	8005f54 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80044da:	2000      	movs	r0, #0
 80044dc:	bd10      	pop	{r4, pc}

080044de <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80044de:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80044e0:	4613      	mov	r3, r2
 80044e2:	460a      	mov	r2, r1
 80044e4:	2100      	movs	r1, #0
 80044e6:	f001 fd35 	bl	8005f54 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80044ea:	2000      	movs	r0, #0
 80044ec:	bd08      	pop	{r3, pc}

080044ee <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80044ee:	b510      	push	{r4, lr}
 80044f0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80044f2:	2203      	movs	r2, #3
 80044f4:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80044f8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80044fc:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80044fe:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8004502:	2100      	movs	r1, #0
 8004504:	f001 fd34 	bl	8005f70 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8004508:	2000      	movs	r0, #0
 800450a:	bd10      	pop	{r4, pc}

0800450c <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800450c:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 800450e:	4613      	mov	r3, r2
 8004510:	460a      	mov	r2, r1
 8004512:	2100      	movs	r1, #0
 8004514:	f001 fd2c 	bl	8005f70 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8004518:	2000      	movs	r0, #0
 800451a:	bd08      	pop	{r3, pc}

0800451c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800451c:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800451e:	2304      	movs	r3, #4
 8004520:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004524:	2300      	movs	r3, #0
 8004526:	461a      	mov	r2, r3
 8004528:	4619      	mov	r1, r3
 800452a:	f001 fd13 	bl	8005f54 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800452e:	2000      	movs	r0, #0
 8004530:	bd08      	pop	{r3, pc}

08004532 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8004532:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8004534:	2305      	movs	r3, #5
 8004536:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800453a:	2300      	movs	r3, #0
 800453c:	461a      	mov	r2, r3
 800453e:	4619      	mov	r1, r3
 8004540:	f001 fd16 	bl	8005f70 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8004544:	2000      	movs	r0, #0
 8004546:	bd08      	pop	{r3, pc}

08004548 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004548:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800454a:	f000 fbdd 	bl	8004d08 <vTaskStartScheduler>
  
  return osOK;
}
 800454e:	2000      	movs	r0, #0
 8004550:	bd08      	pop	{r3, pc}

08004552 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004552:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004554:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8004558:	8a02      	ldrh	r2, [r0, #16]
{
 800455a:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800455c:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8004560:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8004562:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8004564:	bf14      	ite	ne
 8004566:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004568:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800456a:	a803      	add	r0, sp, #12
 800456c:	9001      	str	r0, [sp, #4]
 800456e:	9400      	str	r4, [sp, #0]
 8004570:	4628      	mov	r0, r5
 8004572:	f000 faf9 	bl	8004b68 <xTaskCreate>
 8004576:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004578:	bf0c      	ite	eq
 800457a:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800457c:	2000      	movne	r0, #0
}
 800457e:	b005      	add	sp, #20
 8004580:	bd30      	pop	{r4, r5, pc}

08004582 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004582:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004584:	2800      	cmp	r0, #0
 8004586:	bf08      	it	eq
 8004588:	2001      	moveq	r0, #1
 800458a:	f000 fd0b 	bl	8004fa4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800458e:	2000      	movs	r0, #0
 8004590:	bd08      	pop	{r3, pc}

08004592 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004592:	f100 0308 	add.w	r3, r0, #8
 8004596:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004598:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800459c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800459e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045a0:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045a2:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045a4:	6003      	str	r3, [r0, #0]
 80045a6:	4770      	bx	lr

080045a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	6103      	str	r3, [r0, #16]
 80045ac:	4770      	bx	lr

080045ae <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80045ae:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045b0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045ba:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80045bc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80045be:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80045c0:	3301      	adds	r3, #1
 80045c2:	6003      	str	r3, [r0, #0]
 80045c4:	4770      	bx	lr

080045c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045c6:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045c8:	1c53      	adds	r3, r2, #1
{
 80045ca:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80045cc:	d10a      	bne.n	80045e4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045ce:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045d4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045d6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80045d8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80045da:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80045dc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80045de:	3301      	adds	r3, #1
 80045e0:	6003      	str	r3, [r0, #0]
 80045e2:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045e4:	f100 0308 	add.w	r3, r0, #8
 80045e8:	685c      	ldr	r4, [r3, #4]
 80045ea:	6825      	ldr	r5, [r4, #0]
 80045ec:	42aa      	cmp	r2, r5
 80045ee:	d3ef      	bcc.n	80045d0 <vListInsert+0xa>
 80045f0:	4623      	mov	r3, r4
 80045f2:	e7f9      	b.n	80045e8 <vListInsert+0x22>

080045f4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045f4:	6841      	ldr	r1, [r0, #4]
 80045f6:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80045f8:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045fa:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045fc:	6882      	ldr	r2, [r0, #8]
 80045fe:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004600:	6859      	ldr	r1, [r3, #4]
 8004602:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004604:	bf08      	it	eq
 8004606:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004608:	2200      	movs	r2, #0
 800460a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	3801      	subs	r0, #1
 8004610:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8004612:	4770      	bx	lr

08004614 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004614:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <prvTaskExitError+0x2c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3301      	adds	r3, #1
 800461a:	d008      	beq.n	800462e <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	e7fe      	b.n	800462c <prvTaskExitError+0x18>
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	e7fe      	b.n	800463e <prvTaskExitError+0x2a>
 8004640:	20000088 	.word	0x20000088

08004644 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004644:	4806      	ldr	r0, [pc, #24]	; (8004660 <prvPortStartFirstTask+0x1c>)
 8004646:	6800      	ldr	r0, [r0, #0]
 8004648:	6800      	ldr	r0, [r0, #0]
 800464a:	f380 8808 	msr	MSP, r0
 800464e:	b662      	cpsie	i
 8004650:	b661      	cpsie	f
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	df00      	svc	0
 800465c:	bf00      	nop
 800465e:	0000      	.short	0x0000
 8004660:	e000ed08 	.word	0xe000ed08

08004664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004674 <vPortEnableVFP+0x10>
 8004668:	6801      	ldr	r1, [r0, #0]
 800466a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800466e:	6001      	str	r1, [r0, #0]
 8004670:	4770      	bx	lr
 8004672:	0000      	.short	0x0000
 8004674:	e000ed88 	.word	0xe000ed88

08004678 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800467c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <pxPortInitialiseStack+0x28>)
 8004682:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004686:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800468a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800468e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004692:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8004696:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800469a:	3844      	subs	r0, #68	; 0x44
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	08004615 	.word	0x08004615
	...

080046b0 <SVC_Handler>:
	__asm volatile (
 80046b0:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <pxCurrentTCBConst2>)
 80046b2:	6819      	ldr	r1, [r3, #0]
 80046b4:	6808      	ldr	r0, [r1, #0]
 80046b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ba:	f380 8809 	msr	PSP, r0
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f04f 0000 	mov.w	r0, #0
 80046c6:	f380 8811 	msr	BASEPRI, r0
 80046ca:	4770      	bx	lr
 80046cc:	f3af 8000 	nop.w

080046d0 <pxCurrentTCBConst2>:
 80046d0:	20003d78 	.word	0x20003d78

080046d4 <vPortEnterCritical>:
 80046d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80046e4:	4a0a      	ldr	r2, [pc, #40]	; (8004710 <vPortEnterCritical+0x3c>)
 80046e6:	6813      	ldr	r3, [r2, #0]
 80046e8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80046ea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80046ec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80046ee:	d10d      	bne.n	800470c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046f0:	4b08      	ldr	r3, [pc, #32]	; (8004714 <vPortEnterCritical+0x40>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80046f8:	d008      	beq.n	800470c <vPortEnterCritical+0x38>
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	e7fe      	b.n	800470a <vPortEnterCritical+0x36>
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	20000088 	.word	0x20000088
 8004714:	e000ed04 	.word	0xe000ed04

08004718 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004718:	4a08      	ldr	r2, [pc, #32]	; (800473c <vPortExitCritical+0x24>)
 800471a:	6813      	ldr	r3, [r2, #0]
 800471c:	b943      	cbnz	r3, 8004730 <vPortExitCritical+0x18>
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	e7fe      	b.n	800472e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004730:	3b01      	subs	r3, #1
 8004732:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004734:	b90b      	cbnz	r3, 800473a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	4770      	bx	lr
 800473c:	20000088 	.word	0x20000088

08004740 <PendSV_Handler>:
	__asm volatile
 8004740:	f3ef 8009 	mrs	r0, PSP
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <pxCurrentTCBConst>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	f01e 0f10 	tst.w	lr, #16
 8004750:	bf08      	it	eq
 8004752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475a:	6010      	str	r0, [r2, #0]
 800475c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8004760:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004764:	f380 8811 	msr	BASEPRI, r0
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f000 fc76 	bl	8005060 <vTaskSwitchContext>
 8004774:	f04f 0000 	mov.w	r0, #0
 8004778:	f380 8811 	msr	BASEPRI, r0
 800477c:	bc08      	pop	{r3}
 800477e:	6819      	ldr	r1, [r3, #0]
 8004780:	6808      	ldr	r0, [r1, #0]
 8004782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004786:	f01e 0f10 	tst.w	lr, #16
 800478a:	bf08      	it	eq
 800478c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004790:	f380 8809 	msr	PSP, r0
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	f3af 8000 	nop.w

080047a0 <pxCurrentTCBConst>:
 80047a0:	20003d78 	.word	0x20003d78

080047a4 <SysTick_Handler>:
{
 80047a4:	b508      	push	{r3, lr}
	__asm volatile
 80047a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80047b6:	f000 faeb 	bl	8004d90 <xTaskIncrementTick>
 80047ba:	b118      	cbz	r0, 80047c4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047bc:	4b03      	ldr	r3, [pc, #12]	; (80047cc <SysTick_Handler+0x28>)
 80047be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80047c4:	2300      	movs	r3, #0
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	bd08      	pop	{r3, pc}
 80047cc:	e000ed04 	.word	0xe000ed04

080047d0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047d0:	4b06      	ldr	r3, [pc, #24]	; (80047ec <vPortSetupTimerInterrupt+0x1c>)
 80047d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80047dc:	4a04      	ldr	r2, [pc, #16]	; (80047f0 <vPortSetupTimerInterrupt+0x20>)
 80047de:	3b01      	subs	r3, #1
 80047e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047e2:	4b04      	ldr	r3, [pc, #16]	; (80047f4 <vPortSetupTimerInterrupt+0x24>)
 80047e4:	2207      	movs	r2, #7
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	2000008c 	.word	0x2000008c
 80047f0:	e000e014 	.word	0xe000e014
 80047f4:	e000e010 	.word	0xe000e010

080047f8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047f8:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <xPortStartScheduler+0xc8>)
 80047fa:	4a32      	ldr	r2, [pc, #200]	; (80048c4 <xPortStartScheduler+0xcc>)
{
 80047fc:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047fe:	6819      	ldr	r1, [r3, #0]
 8004800:	4291      	cmp	r1, r2
 8004802:	d108      	bne.n	8004816 <xPortStartScheduler+0x1e>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	e7fe      	b.n	8004814 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	4b2b      	ldr	r3, [pc, #172]	; (80048c8 <xPortStartScheduler+0xd0>)
 800481a:	429a      	cmp	r2, r3
 800481c:	d108      	bne.n	8004830 <xPortStartScheduler+0x38>
 800481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	e7fe      	b.n	800482e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004830:	4b26      	ldr	r3, [pc, #152]	; (80048cc <xPortStartScheduler+0xd4>)
 8004832:	781a      	ldrb	r2, [r3, #0]
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004838:	22ff      	movs	r2, #255	; 0xff
 800483a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800483c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800483e:	4a24      	ldr	r2, [pc, #144]	; (80048d0 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004840:	b2db      	uxtb	r3, r3
 8004842:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004846:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800484a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800484e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004850:	4b20      	ldr	r3, [pc, #128]	; (80048d4 <xPortStartScheduler+0xdc>)
 8004852:	2207      	movs	r2, #7
 8004854:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004856:	2100      	movs	r1, #0
 8004858:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800485c:	0600      	lsls	r0, r0, #24
 800485e:	f102 34ff 	add.w	r4, r2, #4294967295
 8004862:	d423      	bmi.n	80048ac <xPortStartScheduler+0xb4>
 8004864:	b101      	cbz	r1, 8004868 <xPortStartScheduler+0x70>
 8004866:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800486c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004870:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004872:	9b01      	ldr	r3, [sp, #4]
 8004874:	4a15      	ldr	r2, [pc, #84]	; (80048cc <xPortStartScheduler+0xd4>)
 8004876:	b2db      	uxtb	r3, r3
 8004878:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800487a:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <xPortStartScheduler+0xe0>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004882:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800488a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800488c:	f7ff ffa0 	bl	80047d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004890:	4b12      	ldr	r3, [pc, #72]	; (80048dc <xPortStartScheduler+0xe4>)
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8004896:	f7ff fee5 	bl	8004664 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800489a:	4a11      	ldr	r2, [pc, #68]	; (80048e0 <xPortStartScheduler+0xe8>)
 800489c:	6813      	ldr	r3, [r2, #0]
 800489e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80048a2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80048a4:	f7ff fece 	bl	8004644 <prvPortStartFirstTask>
	prvTaskExitError();
 80048a8:	f7ff feb4 	bl	8004614 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048ac:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80048b0:	0052      	lsls	r2, r2, #1
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	f88d 2003 	strb.w	r2, [sp, #3]
 80048b8:	2101      	movs	r1, #1
 80048ba:	4622      	mov	r2, r4
 80048bc:	e7cc      	b.n	8004858 <xPortStartScheduler+0x60>
 80048be:	bf00      	nop
 80048c0:	e000ed00 	.word	0xe000ed00
 80048c4:	410fc271 	.word	0x410fc271
 80048c8:	410fc270 	.word	0x410fc270
 80048cc:	e000e400 	.word	0xe000e400
 80048d0:	20000159 	.word	0x20000159
 80048d4:	2000015c 	.word	0x2000015c
 80048d8:	e000ed20 	.word	0xe000ed20
 80048dc:	20000088 	.word	0x20000088
 80048e0:	e000ef34 	.word	0xe000ef34

080048e4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048e4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048e6:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <prvInsertBlockIntoFreeList+0x40>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4282      	cmp	r2, r0
 80048ec:	d318      	bcc.n	8004920 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048ee:	685c      	ldr	r4, [r3, #4]
 80048f0:	1919      	adds	r1, r3, r4
 80048f2:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048f4:	bf01      	itttt	eq
 80048f6:	6841      	ldreq	r1, [r0, #4]
 80048f8:	4618      	moveq	r0, r3
 80048fa:	1909      	addeq	r1, r1, r4
 80048fc:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048fe:	6844      	ldr	r4, [r0, #4]
 8004900:	1901      	adds	r1, r0, r4
 8004902:	428a      	cmp	r2, r1
 8004904:	d107      	bne.n	8004916 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004906:	4908      	ldr	r1, [pc, #32]	; (8004928 <prvInsertBlockIntoFreeList+0x44>)
 8004908:	6809      	ldr	r1, [r1, #0]
 800490a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800490c:	bf1f      	itttt	ne
 800490e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004910:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004912:	1909      	addne	r1, r1, r4
 8004914:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004916:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004918:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800491a:	bf18      	it	ne
 800491c:	6018      	strne	r0, [r3, #0]
 800491e:	bd10      	pop	{r4, pc}
 8004920:	4613      	mov	r3, r2
 8004922:	e7e1      	b.n	80048e8 <prvInsertBlockIntoFreeList+0x4>
 8004924:	20003d70 	.word	0x20003d70
 8004928:	20000160 	.word	0x20000160

0800492c <pvPortMalloc>:
{
 800492c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004930:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004932:	f000 fa25 	bl	8004d80 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004936:	493e      	ldr	r1, [pc, #248]	; (8004a30 <pvPortMalloc+0x104>)
 8004938:	4d3e      	ldr	r5, [pc, #248]	; (8004a34 <pvPortMalloc+0x108>)
 800493a:	680b      	ldr	r3, [r1, #0]
 800493c:	bb0b      	cbnz	r3, 8004982 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800493e:	4a3e      	ldr	r2, [pc, #248]	; (8004a38 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004940:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004942:	bf1f      	itttt	ne
 8004944:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004946:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800494a:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800494e:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004950:	bf14      	ite	ne
 8004952:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004954:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004958:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800495a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800495c:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004960:	4e36      	ldr	r6, [pc, #216]	; (8004a3c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8004962:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004964:	2000      	movs	r0, #0
 8004966:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004968:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800496a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800496c:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800496e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004970:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004972:	4b33      	ldr	r3, [pc, #204]	; (8004a40 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004974:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004976:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004978:	4b32      	ldr	r3, [pc, #200]	; (8004a44 <pvPortMalloc+0x118>)
 800497a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800497c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004980:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004982:	682f      	ldr	r7, [r5, #0]
 8004984:	4227      	tst	r7, r4
 8004986:	d116      	bne.n	80049b6 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8004988:	2c00      	cmp	r4, #0
 800498a:	d041      	beq.n	8004a10 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 800498c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004990:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004992:	bf1c      	itt	ne
 8004994:	f023 0307 	bicne.w	r3, r3, #7
 8004998:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800499a:	b163      	cbz	r3, 80049b6 <pvPortMalloc+0x8a>
 800499c:	4a29      	ldr	r2, [pc, #164]	; (8004a44 <pvPortMalloc+0x118>)
 800499e:	6816      	ldr	r6, [r2, #0]
 80049a0:	42b3      	cmp	r3, r6
 80049a2:	4690      	mov	r8, r2
 80049a4:	d807      	bhi.n	80049b6 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80049a6:	4a25      	ldr	r2, [pc, #148]	; (8004a3c <pvPortMalloc+0x110>)
 80049a8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049aa:	6868      	ldr	r0, [r5, #4]
 80049ac:	4283      	cmp	r3, r0
 80049ae:	d804      	bhi.n	80049ba <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80049b0:	6809      	ldr	r1, [r1, #0]
 80049b2:	428d      	cmp	r5, r1
 80049b4:	d107      	bne.n	80049c6 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80049b6:	2400      	movs	r4, #0
 80049b8:	e02a      	b.n	8004a10 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049ba:	682c      	ldr	r4, [r5, #0]
 80049bc:	2c00      	cmp	r4, #0
 80049be:	d0f7      	beq.n	80049b0 <pvPortMalloc+0x84>
 80049c0:	462a      	mov	r2, r5
 80049c2:	4625      	mov	r5, r4
 80049c4:	e7f1      	b.n	80049aa <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049c6:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049c8:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049ca:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049cc:	1ac2      	subs	r2, r0, r3
 80049ce:	2a10      	cmp	r2, #16
 80049d0:	d90f      	bls.n	80049f2 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049d2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049d4:	0741      	lsls	r1, r0, #29
 80049d6:	d008      	beq.n	80049ea <pvPortMalloc+0xbe>
 80049d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	e7fe      	b.n	80049e8 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049ea:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049ec:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049ee:	f7ff ff79 	bl	80048e4 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049f2:	4913      	ldr	r1, [pc, #76]	; (8004a40 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049f4:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049f6:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049f8:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049fa:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049fc:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80049fe:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a02:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a06:	bf38      	it	cc
 8004a08:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a0a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a0c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a0e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8004a10:	f000 fa50 	bl	8004eb4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a14:	0763      	lsls	r3, r4, #29
 8004a16:	d008      	beq.n	8004a2a <pvPortMalloc+0xfe>
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	e7fe      	b.n	8004a28 <pvPortMalloc+0xfc>
}
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a30:	20000160 	.word	0x20000160
 8004a34:	20003d64 	.word	0x20003d64
 8004a38:	20000164 	.word	0x20000164
 8004a3c:	20003d70 	.word	0x20003d70
 8004a40:	20003d6c 	.word	0x20003d6c
 8004a44:	20003d68 	.word	0x20003d68

08004a48 <vPortFree>:
{
 8004a48:	b510      	push	{r4, lr}
	if( pv != NULL )
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	b370      	cbz	r0, 8004aac <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a4e:	4a18      	ldr	r2, [pc, #96]	; (8004ab0 <vPortFree+0x68>)
 8004a50:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	4213      	tst	r3, r2
 8004a58:	d108      	bne.n	8004a6c <vPortFree+0x24>
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	e7fe      	b.n	8004a6a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a6c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004a70:	b141      	cbz	r1, 8004a84 <vPortFree+0x3c>
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	e7fe      	b.n	8004a82 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a84:	ea23 0302 	bic.w	r3, r3, r2
 8004a88:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004a8c:	f000 f978 	bl	8004d80 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a90:	4a08      	ldr	r2, [pc, #32]	; (8004ab4 <vPortFree+0x6c>)
 8004a92:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004a96:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a98:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a9c:	440b      	add	r3, r1
 8004a9e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004aa0:	f7ff ff20 	bl	80048e4 <prvInsertBlockIntoFreeList>
}
 8004aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8004aa8:	f000 ba04 	b.w	8004eb4 <xTaskResumeAll>
 8004aac:	bd10      	pop	{r4, pc}
 8004aae:	bf00      	nop
 8004ab0:	20003d64 	.word	0x20003d64
 8004ab4:	20003d68 	.word	0x20003d68

08004ab8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ab8:	4a06      	ldr	r2, [pc, #24]	; (8004ad4 <prvResetNextTaskUnblockTime+0x1c>)
 8004aba:	6813      	ldr	r3, [r2, #0]
 8004abc:	6819      	ldr	r1, [r3, #0]
 8004abe:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <prvResetNextTaskUnblockTime+0x20>)
 8004ac0:	b919      	cbnz	r1, 8004aca <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ac2:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ace:	68d2      	ldr	r2, [r2, #12]
 8004ad0:	6852      	ldr	r2, [r2, #4]
 8004ad2:	e7f8      	b.n	8004ac6 <prvResetNextTaskUnblockTime+0xe>
 8004ad4:	20003d7c 	.word	0x20003d7c
 8004ad8:	20003e54 	.word	0x20003e54

08004adc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ade:	4b1b      	ldr	r3, [pc, #108]	; (8004b4c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ae0:	4e1b      	ldr	r6, [pc, #108]	; (8004b50 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8004ae2:	681d      	ldr	r5, [r3, #0]
{
 8004ae4:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ae6:	6830      	ldr	r0, [r6, #0]
 8004ae8:	3004      	adds	r0, #4
{
 8004aea:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aec:	f7ff fd82 	bl	80045f4 <uxListRemove>
 8004af0:	4633      	mov	r3, r6
 8004af2:	b940      	cbnz	r0, 8004b06 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004af4:	6831      	ldr	r1, [r6, #0]
 8004af6:	4e17      	ldr	r6, [pc, #92]	; (8004b54 <prvAddCurrentTaskToDelayedList+0x78>)
 8004af8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004afa:	6832      	ldr	r2, [r6, #0]
 8004afc:	2001      	movs	r0, #1
 8004afe:	4088      	lsls	r0, r1
 8004b00:	ea22 0200 	bic.w	r2, r2, r0
 8004b04:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b06:	1c62      	adds	r2, r4, #1
 8004b08:	d107      	bne.n	8004b1a <prvAddCurrentTaskToDelayedList+0x3e>
 8004b0a:	b137      	cbz	r7, 8004b1a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b0c:	6819      	ldr	r1, [r3, #0]
 8004b0e:	4812      	ldr	r0, [pc, #72]	; (8004b58 <prvAddCurrentTaskToDelayedList+0x7c>)
 8004b10:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b16:	f7ff bd4a 	b.w	80045ae <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b1a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b1c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8004b1e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b20:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8004b22:	d907      	bls.n	8004b34 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b24:	4a0d      	ldr	r2, [pc, #52]	; (8004b5c <prvAddCurrentTaskToDelayedList+0x80>)
 8004b26:	6810      	ldr	r0, [r2, #0]
 8004b28:	6819      	ldr	r1, [r3, #0]
}
 8004b2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b2e:	3104      	adds	r1, #4
 8004b30:	f7ff bd49 	b.w	80045c6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b34:	4a0a      	ldr	r2, [pc, #40]	; (8004b60 <prvAddCurrentTaskToDelayedList+0x84>)
 8004b36:	6810      	ldr	r0, [r2, #0]
 8004b38:	6819      	ldr	r1, [r3, #0]
 8004b3a:	3104      	adds	r1, #4
 8004b3c:	f7ff fd43 	bl	80045c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b40:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <prvAddCurrentTaskToDelayedList+0x88>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8004b46:	bf38      	it	cc
 8004b48:	601c      	strcc	r4, [r3, #0]
 8004b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b4c:	20003e9c 	.word	0x20003e9c
 8004b50:	20003d78 	.word	0x20003d78
 8004b54:	20003e24 	.word	0x20003e24
 8004b58:	20003e74 	.word	0x20003e74
 8004b5c:	20003d80 	.word	0x20003d80
 8004b60:	20003d7c 	.word	0x20003d7c
 8004b64:	20003e54 	.word	0x20003e54

08004b68 <xTaskCreate>:
	{
 8004b68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b6c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8004b70:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b72:	4650      	mov	r0, sl
	{
 8004b74:	460f      	mov	r7, r1
 8004b76:	4699      	mov	r9, r3
 8004b78:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b7a:	f7ff fed7 	bl	800492c <pvPortMalloc>
			if( pxStack != NULL )
 8004b7e:	4605      	mov	r5, r0
 8004b80:	2800      	cmp	r0, #0
 8004b82:	f000 8096 	beq.w	8004cb2 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004b86:	2054      	movs	r0, #84	; 0x54
 8004b88:	f7ff fed0 	bl	800492c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	f000 808c 	beq.w	8004cac <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004b94:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8004b98:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004b9a:	4455      	add	r5, sl
 8004b9c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004b9e:	f025 0a07 	bic.w	sl, r5, #7
 8004ba2:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8004ba6:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ba8:	7859      	ldrb	r1, [r3, #1]
 8004baa:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8004bae:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8004bb2:	b109      	cbz	r1, 8004bb8 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bb4:	42bb      	cmp	r3, r7
 8004bb6:	d1f7      	bne.n	8004ba8 <xTaskCreate+0x40>
 8004bb8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004bba:	2d06      	cmp	r5, #6
 8004bbc:	bf28      	it	cs
 8004bbe:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bc0:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bc4:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8004bc6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004bc8:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bca:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bcc:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8004bd0:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bd4:	f7ff fce8 	bl	80045a8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bd8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004bdc:	f104 0018 	add.w	r0, r4, #24
 8004be0:	f7ff fce2 	bl	80045a8 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8004be4:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004be8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bea:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bec:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004bee:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bf2:	464a      	mov	r2, r9
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	4650      	mov	r0, sl
 8004bf8:	f7ff fd3e 	bl	8004678 <pxPortInitialiseStack>
 8004bfc:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8004bfe:	b106      	cbz	r6, 8004c02 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c00:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8004c02:	f7ff fd67 	bl	80046d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004c06:	4b32      	ldr	r3, [pc, #200]	; (8004cd0 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8004c08:	4e32      	ldr	r6, [pc, #200]	; (8004cd4 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8004d00 <xTaskCreate+0x198>
 8004c10:	3201      	adds	r2, #1
 8004c12:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004c14:	6835      	ldr	r5, [r6, #0]
 8004c16:	2d00      	cmp	r5, #0
 8004c18:	d14e      	bne.n	8004cb8 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8004c1a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d11d      	bne.n	8004c5e <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c22:	eb08 0005 	add.w	r0, r8, r5
 8004c26:	3514      	adds	r5, #20
 8004c28:	f7ff fcb3 	bl	8004592 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c2c:	2d8c      	cmp	r5, #140	; 0x8c
 8004c2e:	d1f8      	bne.n	8004c22 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8004c30:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004d04 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8004c34:	4d28      	ldr	r5, [pc, #160]	; (8004cd8 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8004c36:	4648      	mov	r0, r9
 8004c38:	f7ff fcab 	bl	8004592 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	f7ff fca8 	bl	8004592 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c42:	4826      	ldr	r0, [pc, #152]	; (8004cdc <xTaskCreate+0x174>)
 8004c44:	f7ff fca5 	bl	8004592 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004c48:	4825      	ldr	r0, [pc, #148]	; (8004ce0 <xTaskCreate+0x178>)
 8004c4a:	f7ff fca2 	bl	8004592 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8004c4e:	4825      	ldr	r0, [pc, #148]	; (8004ce4 <xTaskCreate+0x17c>)
 8004c50:	f7ff fc9f 	bl	8004592 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c54:	4b24      	ldr	r3, [pc, #144]	; (8004ce8 <xTaskCreate+0x180>)
 8004c56:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c5a:	4b24      	ldr	r3, [pc, #144]	; (8004cec <xTaskCreate+0x184>)
 8004c5c:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8004c5e:	4a24      	ldr	r2, [pc, #144]	; (8004cf0 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8004c60:	4924      	ldr	r1, [pc, #144]	; (8004cf4 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8004c62:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004c64:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8004c66:	3301      	adds	r3, #1
 8004c68:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004c6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004c6c:	2501      	movs	r5, #1
 8004c6e:	fa05 f302 	lsl.w	r3, r5, r2
 8004c72:	4303      	orrs	r3, r0
 8004c74:	2014      	movs	r0, #20
 8004c76:	600b      	str	r3, [r1, #0]
 8004c78:	fb00 8002 	mla	r0, r0, r2, r8
 8004c7c:	4639      	mov	r1, r7
 8004c7e:	f7ff fc96 	bl	80045ae <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004c82:	f7ff fd49 	bl	8004718 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004c86:	4b1c      	ldr	r3, [pc, #112]	; (8004cf8 <xTaskCreate+0x190>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	b163      	cbz	r3, 8004ca6 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c8c:	6833      	ldr	r3, [r6, #0]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d207      	bcs.n	8004ca6 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8004c96:	4b19      	ldr	r3, [pc, #100]	; (8004cfc <xTaskCreate+0x194>)
 8004c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	f3bf 8f6f 	isb	sy
	}
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8004cac:	4628      	mov	r0, r5
 8004cae:	f7ff fecb 	bl	8004a48 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cb2:	f04f 35ff 	mov.w	r5, #4294967295
 8004cb6:	e7f6      	b.n	8004ca6 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8004cb8:	4b0f      	ldr	r3, [pc, #60]	; (8004cf8 <xTaskCreate+0x190>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1ce      	bne.n	8004c5e <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cc0:	6833      	ldr	r3, [r6, #0]
 8004cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004cc6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8004cc8:	bf98      	it	ls
 8004cca:	6034      	strls	r4, [r6, #0]
 8004ccc:	e7c7      	b.n	8004c5e <xTaskCreate+0xf6>
 8004cce:	bf00      	nop
 8004cd0:	20003e10 	.word	0x20003e10
 8004cd4:	20003d78 	.word	0x20003d78
 8004cd8:	20003e3c 	.word	0x20003e3c
 8004cdc:	20003e5c 	.word	0x20003e5c
 8004ce0:	20003e88 	.word	0x20003e88
 8004ce4:	20003e74 	.word	0x20003e74
 8004ce8:	20003d7c 	.word	0x20003d7c
 8004cec:	20003d80 	.word	0x20003d80
 8004cf0:	20003e20 	.word	0x20003e20
 8004cf4:	20003e24 	.word	0x20003e24
 8004cf8:	20003e70 	.word	0x20003e70
 8004cfc:	e000ed04 	.word	0xe000ed04
 8004d00:	20003d84 	.word	0x20003d84
 8004d04:	20003e28 	.word	0x20003e28

08004d08 <vTaskStartScheduler>:
{
 8004d08:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8004d0a:	4b17      	ldr	r3, [pc, #92]	; (8004d68 <vTaskStartScheduler+0x60>)
 8004d0c:	9301      	str	r3, [sp, #4]
 8004d0e:	2400      	movs	r4, #0
 8004d10:	9400      	str	r4, [sp, #0]
 8004d12:	4623      	mov	r3, r4
 8004d14:	2280      	movs	r2, #128	; 0x80
 8004d16:	4915      	ldr	r1, [pc, #84]	; (8004d6c <vTaskStartScheduler+0x64>)
 8004d18:	4815      	ldr	r0, [pc, #84]	; (8004d70 <vTaskStartScheduler+0x68>)
 8004d1a:	f7ff ff25 	bl	8004b68 <xTaskCreate>
	if( xReturn == pdPASS )
 8004d1e:	2801      	cmp	r0, #1
 8004d20:	d114      	bne.n	8004d4c <vTaskStartScheduler+0x44>
 8004d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d32:	4b10      	ldr	r3, [pc, #64]	; (8004d74 <vTaskStartScheduler+0x6c>)
 8004d34:	f04f 32ff 	mov.w	r2, #4294967295
 8004d38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d3a:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <vTaskStartScheduler+0x70>)
 8004d3c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004d3e:	4b0f      	ldr	r3, [pc, #60]	; (8004d7c <vTaskStartScheduler+0x74>)
 8004d40:	601c      	str	r4, [r3, #0]
}
 8004d42:	b002      	add	sp, #8
 8004d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004d48:	f7ff bd56 	b.w	80047f8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	d108      	bne.n	8004d62 <vTaskStartScheduler+0x5a>
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	e7fe      	b.n	8004d60 <vTaskStartScheduler+0x58>
}
 8004d62:	b002      	add	sp, #8
 8004d64:	bd10      	pop	{r4, pc}
 8004d66:	bf00      	nop
 8004d68:	20003e50 	.word	0x20003e50
 8004d6c:	080068c1 	.word	0x080068c1
 8004d70:	08004fed 	.word	0x08004fed
 8004d74:	20003e54 	.word	0x20003e54
 8004d78:	20003e70 	.word	0x20003e70
 8004d7c:	20003e9c 	.word	0x20003e9c

08004d80 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004d80:	4a02      	ldr	r2, [pc, #8]	; (8004d8c <vTaskSuspendAll+0xc>)
 8004d82:	6813      	ldr	r3, [r2, #0]
 8004d84:	3301      	adds	r3, #1
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	20003e1c 	.word	0x20003e1c

08004d90 <xTaskIncrementTick>:
{
 8004d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d94:	4b3c      	ldr	r3, [pc, #240]	; (8004e88 <xTaskIncrementTick+0xf8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d153      	bne.n	8004e44 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8004d9c:	4b3b      	ldr	r3, [pc, #236]	; (8004e8c <xTaskIncrementTick+0xfc>)
 8004d9e:	681c      	ldr	r4, [r3, #0]
 8004da0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8004da2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8004da4:	b9bc      	cbnz	r4, 8004dd6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004da6:	4b3a      	ldr	r3, [pc, #232]	; (8004e90 <xTaskIncrementTick+0x100>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	6812      	ldr	r2, [r2, #0]
 8004dac:	b142      	cbz	r2, 8004dc0 <xTaskIncrementTick+0x30>
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	e7fe      	b.n	8004dbe <xTaskIncrementTick+0x2e>
 8004dc0:	4a34      	ldr	r2, [pc, #208]	; (8004e94 <xTaskIncrementTick+0x104>)
 8004dc2:	6819      	ldr	r1, [r3, #0]
 8004dc4:	6810      	ldr	r0, [r2, #0]
 8004dc6:	6018      	str	r0, [r3, #0]
 8004dc8:	6011      	str	r1, [r2, #0]
 8004dca:	4a33      	ldr	r2, [pc, #204]	; (8004e98 <xTaskIncrementTick+0x108>)
 8004dcc:	6813      	ldr	r3, [r2, #0]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	f7ff fe71 	bl	8004ab8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004dd6:	4d31      	ldr	r5, [pc, #196]	; (8004e9c <xTaskIncrementTick+0x10c>)
 8004dd8:	4f31      	ldr	r7, [pc, #196]	; (8004ea0 <xTaskIncrementTick+0x110>)
 8004dda:	682b      	ldr	r3, [r5, #0]
 8004ddc:	429c      	cmp	r4, r3
 8004dde:	f04f 0b00 	mov.w	fp, #0
 8004de2:	d33e      	bcc.n	8004e62 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004de4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004e90 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8004de8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8004eb0 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dec:	f8d8 2000 	ldr.w	r2, [r8]
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	bb72      	cbnz	r2, 8004e52 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df4:	f04f 32ff 	mov.w	r2, #4294967295
 8004df8:	602a      	str	r2, [r5, #0]
					break;
 8004dfa:	e032      	b.n	8004e62 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dfc:	f106 0a04 	add.w	sl, r6, #4
 8004e00:	4650      	mov	r0, sl
 8004e02:	f7ff fbf7 	bl	80045f4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e06:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8004e08:	b119      	cbz	r1, 8004e12 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e0a:	f106 0018 	add.w	r0, r6, #24
 8004e0e:	f7ff fbf1 	bl	80045f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e12:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004e14:	f8d9 3000 	ldr.w	r3, [r9]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	fa02 f100 	lsl.w	r1, r2, r0
 8004e1e:	4319      	orrs	r1, r3
 8004e20:	4b20      	ldr	r3, [pc, #128]	; (8004ea4 <xTaskIncrementTick+0x114>)
 8004e22:	f8c9 1000 	str.w	r1, [r9]
 8004e26:	f04f 0e14 	mov.w	lr, #20
 8004e2a:	4651      	mov	r1, sl
 8004e2c:	fb0e 3000 	mla	r0, lr, r0, r3
 8004e30:	f7ff fbbd 	bl	80045ae <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e34:	6838      	ldr	r0, [r7, #0]
 8004e36:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8004e38:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004e3a:	4291      	cmp	r1, r2
 8004e3c:	bf28      	it	cs
 8004e3e:	f04f 0b01 	movcs.w	fp, #1
 8004e42:	e7d3      	b.n	8004dec <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8004e44:	4a18      	ldr	r2, [pc, #96]	; (8004ea8 <xTaskIncrementTick+0x118>)
 8004e46:	6813      	ldr	r3, [r2, #0]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004e4c:	f04f 0b00 	mov.w	fp, #0
 8004e50:	e011      	b.n	8004e76 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e52:	f8d8 2000 	ldr.w	r2, [r8]
 8004e56:	68d2      	ldr	r2, [r2, #12]
 8004e58:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e5a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004e5c:	428c      	cmp	r4, r1
 8004e5e:	d2cd      	bcs.n	8004dfc <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8004e60:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <xTaskIncrementTick+0x114>)
 8004e66:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004e68:	2214      	movs	r2, #20
 8004e6a:	434a      	muls	r2, r1
 8004e6c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8004e6e:	2a02      	cmp	r2, #2
 8004e70:	bf28      	it	cs
 8004e72:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8004e76:	4a0d      	ldr	r2, [pc, #52]	; (8004eac <xTaskIncrementTick+0x11c>)
 8004e78:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8004e7a:	2a00      	cmp	r2, #0
 8004e7c:	bf18      	it	ne
 8004e7e:	f04f 0b01 	movne.w	fp, #1
}
 8004e82:	4658      	mov	r0, fp
 8004e84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e88:	20003e1c 	.word	0x20003e1c
 8004e8c:	20003e9c 	.word	0x20003e9c
 8004e90:	20003d7c 	.word	0x20003d7c
 8004e94:	20003d80 	.word	0x20003d80
 8004e98:	20003e58 	.word	0x20003e58
 8004e9c:	20003e54 	.word	0x20003e54
 8004ea0:	20003d78 	.word	0x20003d78
 8004ea4:	20003d84 	.word	0x20003d84
 8004ea8:	20003e18 	.word	0x20003e18
 8004eac:	20003ea0 	.word	0x20003ea0
 8004eb0:	20003e24 	.word	0x20003e24

08004eb4 <xTaskResumeAll>:
{
 8004eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8004eb8:	4c31      	ldr	r4, [pc, #196]	; (8004f80 <xTaskResumeAll+0xcc>)
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	b943      	cbnz	r3, 8004ed0 <xTaskResumeAll+0x1c>
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	e7fe      	b.n	8004ece <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8004ed0:	f7ff fc00 	bl	80046d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eda:	6824      	ldr	r4, [r4, #0]
 8004edc:	b12c      	cbz	r4, 8004eea <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8004ede:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004ee0:	f7ff fc1a 	bl	8004718 <vPortExitCritical>
}
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004eea:	4b26      	ldr	r3, [pc, #152]	; (8004f84 <xTaskResumeAll+0xd0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f5      	beq.n	8004ede <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ef2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8004f9c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8004ef6:	4f24      	ldr	r7, [pc, #144]	; (8004f88 <xTaskResumeAll+0xd4>)
 8004ef8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004fa0 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004efc:	f8d9 3000 	ldr.w	r3, [r9]
 8004f00:	b9e3      	cbnz	r3, 8004f3c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8004f02:	b10c      	cbz	r4, 8004f08 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8004f04:	f7ff fdd8 	bl	8004ab8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004f08:	4d20      	ldr	r5, [pc, #128]	; (8004f8c <xTaskResumeAll+0xd8>)
 8004f0a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004f0c:	b144      	cbz	r4, 8004f20 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8004f0e:	4e20      	ldr	r6, [pc, #128]	; (8004f90 <xTaskResumeAll+0xdc>)
 8004f10:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004f12:	f7ff ff3d 	bl	8004d90 <xTaskIncrementTick>
 8004f16:	b100      	cbz	r0, 8004f1a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8004f18:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004f1a:	3c01      	subs	r4, #1
 8004f1c:	d1f9      	bne.n	8004f12 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8004f1e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004f20:	4b1b      	ldr	r3, [pc, #108]	; (8004f90 <xTaskResumeAll+0xdc>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0da      	beq.n	8004ede <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8004f28:	4b1a      	ldr	r3, [pc, #104]	; (8004f94 <xTaskResumeAll+0xe0>)
 8004f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004f38:	2401      	movs	r4, #1
 8004f3a:	e7d1      	b.n	8004ee0 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004f3c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004f40:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f42:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f44:	f104 0018 	add.w	r0, r4, #24
 8004f48:	f7ff fb54 	bl	80045f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f7ff fb51 	bl	80045f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004f54:	6839      	ldr	r1, [r7, #0]
 8004f56:	2501      	movs	r5, #1
 8004f58:	fa05 f302 	lsl.w	r3, r5, r2
 8004f5c:	2014      	movs	r0, #20
 8004f5e:	430b      	orrs	r3, r1
 8004f60:	fb00 8002 	mla	r0, r0, r2, r8
 8004f64:	4631      	mov	r1, r6
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	f7ff fb21 	bl	80045ae <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f6c:	4b0a      	ldr	r3, [pc, #40]	; (8004f98 <xTaskResumeAll+0xe4>)
 8004f6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8004f76:	bf24      	itt	cs
 8004f78:	4b05      	ldrcs	r3, [pc, #20]	; (8004f90 <xTaskResumeAll+0xdc>)
 8004f7a:	601d      	strcs	r5, [r3, #0]
 8004f7c:	e7be      	b.n	8004efc <xTaskResumeAll+0x48>
 8004f7e:	bf00      	nop
 8004f80:	20003e1c 	.word	0x20003e1c
 8004f84:	20003e10 	.word	0x20003e10
 8004f88:	20003e24 	.word	0x20003e24
 8004f8c:	20003e18 	.word	0x20003e18
 8004f90:	20003ea0 	.word	0x20003ea0
 8004f94:	e000ed04 	.word	0xe000ed04
 8004f98:	20003d78 	.word	0x20003d78
 8004f9c:	20003e5c 	.word	0x20003e5c
 8004fa0:	20003d84 	.word	0x20003d84

08004fa4 <vTaskDelay>:
	{
 8004fa4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fa6:	b940      	cbnz	r0, 8004fba <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8004fa8:	4b0e      	ldr	r3, [pc, #56]	; (8004fe4 <vTaskDelay+0x40>)
 8004faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004fba:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <vTaskDelay+0x44>)
 8004fbc:	6819      	ldr	r1, [r3, #0]
 8004fbe:	b141      	cbz	r1, 8004fd2 <vTaskDelay+0x2e>
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	e7fe      	b.n	8004fd0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004fd2:	f7ff fed5 	bl	8004d80 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004fd6:	f7ff fd81 	bl	8004adc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004fda:	f7ff ff6b 	bl	8004eb4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	d0e2      	beq.n	8004fa8 <vTaskDelay+0x4>
 8004fe2:	bd08      	pop	{r3, pc}
 8004fe4:	e000ed04 	.word	0xe000ed04
 8004fe8:	20003e1c 	.word	0x20003e1c

08004fec <prvIdleTask>:
{
 8004fec:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004fee:	4e17      	ldr	r6, [pc, #92]	; (800504c <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ff0:	4c17      	ldr	r4, [pc, #92]	; (8005050 <prvIdleTask+0x64>)
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	b963      	cbnz	r3, 8005010 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ff6:	4b17      	ldr	r3, [pc, #92]	; (8005054 <prvIdleTask+0x68>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d9f8      	bls.n	8004ff0 <prvIdleTask+0x4>
				taskYIELD();
 8004ffe:	4b16      	ldr	r3, [pc, #88]	; (8005058 <prvIdleTask+0x6c>)
 8005000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	e7ef      	b.n	8004ff0 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8005010:	f7ff feb6 	bl	8004d80 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8005014:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8005016:	f7ff ff4d 	bl	8004eb4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800501a:	2d00      	cmp	r5, #0
 800501c:	d0e9      	beq.n	8004ff2 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800501e:	f7ff fb59 	bl	80046d4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005022:	68f3      	ldr	r3, [r6, #12]
 8005024:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005026:	1d28      	adds	r0, r5, #4
 8005028:	f7ff fae4 	bl	80045f4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800502c:	4a0b      	ldr	r2, [pc, #44]	; (800505c <prvIdleTask+0x70>)
 800502e:	6813      	ldr	r3, [r2, #0]
 8005030:	3b01      	subs	r3, #1
 8005032:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	3b01      	subs	r3, #1
 8005038:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800503a:	f7ff fb6d 	bl	8004718 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800503e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8005040:	f7ff fd02 	bl	8004a48 <vPortFree>
			vPortFree( pxTCB );
 8005044:	4628      	mov	r0, r5
 8005046:	f7ff fcff 	bl	8004a48 <vPortFree>
 800504a:	e7d2      	b.n	8004ff2 <prvIdleTask+0x6>
 800504c:	20003e88 	.word	0x20003e88
 8005050:	20003e14 	.word	0x20003e14
 8005054:	20003d84 	.word	0x20003d84
 8005058:	e000ed04 	.word	0xe000ed04
 800505c:	20003e10 	.word	0x20003e10

08005060 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005060:	4b17      	ldr	r3, [pc, #92]	; (80050c0 <vTaskSwitchContext+0x60>)
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	4b17      	ldr	r3, [pc, #92]	; (80050c4 <vTaskSwitchContext+0x64>)
{
 8005066:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005068:	b112      	cbz	r2, 8005070 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800506a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8005070:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005072:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <vTaskSwitchContext+0x68>)
 8005074:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8005076:	fab3 f383 	clz	r3, r3
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f1c3 031f 	rsb	r3, r3, #31
 8005080:	2214      	movs	r2, #20
 8005082:	4912      	ldr	r1, [pc, #72]	; (80050cc <vTaskSwitchContext+0x6c>)
 8005084:	435a      	muls	r2, r3
 8005086:	1888      	adds	r0, r1, r2
 8005088:	588c      	ldr	r4, [r1, r2]
 800508a:	b944      	cbnz	r4, 800509e <vTaskSwitchContext+0x3e>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	e7fe      	b.n	800509c <vTaskSwitchContext+0x3c>
 800509e:	6844      	ldr	r4, [r0, #4]
 80050a0:	3208      	adds	r2, #8
 80050a2:	6864      	ldr	r4, [r4, #4]
 80050a4:	6044      	str	r4, [r0, #4]
 80050a6:	440a      	add	r2, r1
 80050a8:	4294      	cmp	r4, r2
 80050aa:	bf04      	itt	eq
 80050ac:	6862      	ldreq	r2, [r4, #4]
 80050ae:	6042      	streq	r2, [r0, #4]
 80050b0:	2214      	movs	r2, #20
 80050b2:	fb02 1303 	mla	r3, r2, r3, r1
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <vTaskSwitchContext+0x70>)
 80050bc:	e7d6      	b.n	800506c <vTaskSwitchContext+0xc>
 80050be:	bf00      	nop
 80050c0:	20003e1c 	.word	0x20003e1c
 80050c4:	20003ea0 	.word	0x20003ea0
 80050c8:	20003e24 	.word	0x20003e24
 80050cc:	20003d84 	.word	0x20003d84
 80050d0:	20003d78 	.word	0x20003d78

080050d4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80050d4:	b508      	push	{r3, lr}

  hcan1.Instance = CAN1;
 80050d6:	480c      	ldr	r0, [pc, #48]	; (8005108 <MX_CAN1_Init+0x34>)
  hcan1.Init.Prescaler = 16;
 80050d8:	4b0c      	ldr	r3, [pc, #48]	; (800510c <MX_CAN1_Init+0x38>)
 80050da:	f04f 0e10 	mov.w	lr, #16
 80050de:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80050e6:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80050e8:	6103      	str	r3, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80050ea:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80050ec:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80050ee:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80050f0:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80050f2:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80050f4:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80050f6:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80050f8:	f7fc fade 	bl	80016b8 <HAL_CAN_Init>
 80050fc:	b118      	cbz	r0, 8005106 <MX_CAN1_Init+0x32>
  {
    Error_Handler();
  }

}
 80050fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005102:	f000 bc05 	b.w	8005910 <Error_Handler>
 8005106:	bd08      	pop	{r3, pc}
 8005108:	20003f9c 	.word	0x20003f9c
 800510c:	40006400 	.word	0x40006400

08005110 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8005110:	b510      	push	{r4, lr}
 8005112:	4604      	mov	r4, r0
 8005114:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005116:	2214      	movs	r2, #20
 8005118:	2100      	movs	r1, #0
 800511a:	a803      	add	r0, sp, #12
 800511c:	f001 fa6b 	bl	80065f6 <memset>
  if(canHandle->Instance==CAN1)
 8005120:	6822      	ldr	r2, [r4, #0]
 8005122:	4b13      	ldr	r3, [pc, #76]	; (8005170 <HAL_CAN_MspInit+0x60>)
 8005124:	429a      	cmp	r2, r3
 8005126:	d121      	bne.n	800516c <HAL_CAN_MspInit+0x5c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005128:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800512c:	2100      	movs	r1, #0
 800512e:	9101      	str	r1, [sp, #4]
 8005130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005132:	4810      	ldr	r0, [pc, #64]	; (8005174 <HAL_CAN_MspInit+0x64>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005134:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005138:	641a      	str	r2, [r3, #64]	; 0x40
 800513a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800513c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8005140:	9201      	str	r2, [sp, #4]
 8005142:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005144:	9102      	str	r1, [sp, #8]
 8005146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005148:	f042 0208 	orr.w	r2, r2, #8
 800514c:	631a      	str	r2, [r3, #48]	; 0x30
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	9302      	str	r3, [sp, #8]
 8005156:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005158:	2303      	movs	r3, #3
 800515a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800515c:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800515e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005160:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005162:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005164:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005166:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005168:	f7fc fbf4 	bl	8001954 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800516c:	b008      	add	sp, #32
 800516e:	bd10      	pop	{r4, pc}
 8005170:	40006400 	.word	0x40006400
 8005174:	40020c00 	.word	0x40020c00

08005178 <MX_DMA2D_Init>:

/* DMA2D init function */
void MX_DMA2D_Init(void)
{

  hdma2d.Instance = DMA2D;
 8005178:	480d      	ldr	r0, [pc, #52]	; (80051b0 <MX_DMA2D_Init+0x38>)
{
 800517a:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 800517c:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <MX_DMA2D_Init+0x3c>)
 800517e:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8005180:	2300      	movs	r3, #0
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
  hdma2d.Init.OutputOffset = 0;
  hdma2d.LayerCfg[1].InputOffset = 0;
 8005182:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8005184:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005186:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8005188:	6343      	str	r3, [r0, #52]	; 0x34
  hdma2d.Init.Mode = DMA2D_M2M;
 800518a:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800518c:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 800518e:	60c3      	str	r3, [r0, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8005190:	f7fc fb60 	bl	8001854 <HAL_DMA2D_Init>
 8005194:	b108      	cbz	r0, 800519a <MX_DMA2D_Init+0x22>
  {
    Error_Handler();
 8005196:	f000 fbbb 	bl	8005910 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800519a:	2101      	movs	r1, #1
 800519c:	4804      	ldr	r0, [pc, #16]	; (80051b0 <MX_DMA2D_Init+0x38>)
 800519e:	f7fc fb85 	bl	80018ac <HAL_DMA2D_ConfigLayer>
 80051a2:	b118      	cbz	r0, 80051ac <MX_DMA2D_Init+0x34>
  {
    Error_Handler();
  }

}
 80051a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80051a8:	f000 bbb2 	b.w	8005910 <Error_Handler>
 80051ac:	bd08      	pop	{r3, pc}
 80051ae:	bf00      	nop
 80051b0:	20003fc4 	.word	0x20003fc4
 80051b4:	4002b000 	.word	0x4002b000

080051b8 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
 80051b8:	6802      	ldr	r2, [r0, #0]
 80051ba:	4b09      	ldr	r3, [pc, #36]	; (80051e0 <HAL_DMA2D_MspInit+0x28>)
 80051bc:	429a      	cmp	r2, r3
{
 80051be:	b082      	sub	sp, #8
  if(dma2dHandle->Instance==DMA2D)
 80051c0:	d10b      	bne.n	80051da <HAL_DMA2D_MspInit+0x22>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80051c2:	2300      	movs	r3, #0
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <HAL_DMA2D_MspInit+0x2c>)
 80051c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ca:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80051ce:	631a      	str	r2, [r3, #48]	; 0x30
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051d6:	9301      	str	r3, [sp, #4]
 80051d8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80051da:	b002      	add	sp, #8
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	4002b000 	.word	0x4002b000
 80051e4:	40023800 	.word	0x40023800

080051e8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80051e8:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80051ea:	f000 fd65 	bl	8005cb8 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80051ee:	2001      	movs	r0, #1
 80051f0:	f7ff f9c7 	bl	8004582 <osDelay>
 80051f4:	e7fb      	b.n	80051ee <StartDefaultTask+0x6>
	...

080051f8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80051f8:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80051fa:	4d07      	ldr	r5, [pc, #28]	; (8005218 <MX_FREERTOS_Init+0x20>)
 80051fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 80051fe:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8005200:	ac01      	add	r4, sp, #4
 8005202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005204:	682b      	ldr	r3, [r5, #0]
 8005206:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8005208:	2100      	movs	r1, #0
 800520a:	a801      	add	r0, sp, #4
 800520c:	f7ff f9a1 	bl	8004552 <osThreadCreate>
 8005210:	4b02      	ldr	r3, [pc, #8]	; (800521c <MX_FREERTOS_Init+0x24>)
 8005212:	6018      	str	r0, [r3, #0]
}
 8005214:	b007      	add	sp, #28
 8005216:	bd30      	pop	{r4, r5, pc}
 8005218:	08006864 	.word	0x08006864
 800521c:	20004004 	.word	0x20004004

08005220 <MX_GPIO_Init>:
        * EXTI
     PC9   ------> I2C3_SDA
     PA8   ------> I2C3_SCL
*/
void MX_GPIO_Init(void)
{
 8005220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005222:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005224:	2214      	movs	r2, #20
 8005226:	2100      	movs	r1, #0
 8005228:	a809      	add	r0, sp, #36	; 0x24
 800522a:	f001 f9e4 	bl	80065f6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800522e:	4b37      	ldr	r3, [pc, #220]	; (800530c <MX_GPIO_Init+0xec>)
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005230:	4837      	ldr	r0, [pc, #220]	; (8005310 <MX_GPIO_Init+0xf0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005232:	2200      	movs	r2, #0
 8005234:	9201      	str	r2, [sp, #4]
 8005236:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005238:	f041 0104 	orr.w	r1, r1, #4
 800523c:	6319      	str	r1, [r3, #48]	; 0x30
 800523e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005240:	f001 0104 	and.w	r1, r1, #4
 8005244:	9101      	str	r1, [sp, #4]
 8005246:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005248:	9202      	str	r2, [sp, #8]
 800524a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800524c:	f041 0120 	orr.w	r1, r1, #32
 8005250:	6319      	str	r1, [r3, #48]	; 0x30
 8005252:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005254:	f001 0120 	and.w	r1, r1, #32
 8005258:	9102      	str	r1, [sp, #8]
 800525a:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800525c:	9203      	str	r2, [sp, #12]
 800525e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005260:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005264:	6319      	str	r1, [r3, #48]	; 0x30
 8005266:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005268:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800526c:	9103      	str	r1, [sp, #12]
 800526e:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005270:	9204      	str	r2, [sp, #16]
 8005272:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005274:	f041 0101 	orr.w	r1, r1, #1
 8005278:	6319      	str	r1, [r3, #48]	; 0x30
 800527a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800527c:	f001 0101 	and.w	r1, r1, #1
 8005280:	9104      	str	r1, [sp, #16]
 8005282:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005284:	9205      	str	r2, [sp, #20]
 8005286:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005288:	f041 0102 	orr.w	r1, r1, #2
 800528c:	6319      	str	r1, [r3, #48]	; 0x30
 800528e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005290:	f001 0102 	and.w	r1, r1, #2
 8005294:	9105      	str	r1, [sp, #20]
 8005296:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005298:	9206      	str	r2, [sp, #24]
 800529a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800529c:	f041 0110 	orr.w	r1, r1, #16
 80052a0:	6319      	str	r1, [r3, #48]	; 0x30
 80052a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052a4:	f001 0110 	and.w	r1, r1, #16
 80052a8:	9106      	str	r1, [sp, #24]
 80052aa:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80052ac:	9207      	str	r2, [sp, #28]
 80052ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052b0:	f041 0108 	orr.w	r1, r1, #8
 80052b4:	6319      	str	r1, [r3, #48]	; 0x30
 80052b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052b8:	f001 0108 	and.w	r1, r1, #8
 80052bc:	9107      	str	r1, [sp, #28]
 80052be:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80052c0:	9208      	str	r2, [sp, #32]
 80052c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052c8:	631a      	str	r2, [r3, #48]	; 0x30
 80052ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d0:	9308      	str	r3, [sp, #32]
 80052d2:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052d4:	2712      	movs	r7, #18
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80052d6:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052da:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052dc:	2503      	movs	r5, #3
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80052de:	2404      	movs	r4, #4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052e0:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80052e2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052e4:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052e6:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052e8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80052ea:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052ec:	f7fc fb32 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80052f0:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052f4:	a909      	add	r1, sp, #36	; 0x24
 80052f6:	4807      	ldr	r0, [pc, #28]	; (8005314 <MX_GPIO_Init+0xf4>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80052f8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052fa:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052fc:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052fe:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005300:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005302:	f7fc fb27 	bl	8001954 <HAL_GPIO_Init>

}
 8005306:	b00f      	add	sp, #60	; 0x3c
 8005308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800530a:	bf00      	nop
 800530c:	40023800 	.word	0x40023800
 8005310:	40020800 	.word	0x40020800
 8005314:	40020000 	.word	0x40020000

08005318 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005318:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800531a:	4813      	ldr	r0, [pc, #76]	; (8005368 <MX_I2C1_Init+0x50>)
  hi2c1.Init.ClockSpeed = 400000;
 800531c:	4b13      	ldr	r3, [pc, #76]	; (800536c <MX_I2C1_Init+0x54>)
 800531e:	f8df e050 	ldr.w	lr, [pc, #80]	; 8005370 <MX_I2C1_Init+0x58>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005322:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 8005326:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800532a:	2300      	movs	r3, #0
 800532c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800532e:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005330:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005332:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005334:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005336:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005338:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800533a:	f7fc fcc7 	bl	8001ccc <HAL_I2C_Init>
 800533e:	b108      	cbz	r0, 8005344 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8005340:	f000 fae6 	bl	8005910 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005344:	2100      	movs	r1, #0
 8005346:	4808      	ldr	r0, [pc, #32]	; (8005368 <MX_I2C1_Init+0x50>)
 8005348:	f7fc fe04 	bl	8001f54 <HAL_I2CEx_ConfigAnalogFilter>
 800534c:	b108      	cbz	r0, 8005352 <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
 800534e:	f000 fadf 	bl	8005910 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005352:	2100      	movs	r1, #0
 8005354:	4804      	ldr	r0, [pc, #16]	; (8005368 <MX_I2C1_Init+0x50>)
 8005356:	f7fc fe1c 	bl	8001f92 <HAL_I2CEx_ConfigDigitalFilter>
 800535a:	b118      	cbz	r0, 8005364 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
  }

}
 800535c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005360:	f000 bad6 	b.w	8005910 <Error_Handler>
 8005364:	bd08      	pop	{r3, pc}
 8005366:	bf00      	nop
 8005368:	2000405c 	.word	0x2000405c
 800536c:	40005400 	.word	0x40005400
 8005370:	00061a80 	.word	0x00061a80

08005374 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005374:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8005376:	4813      	ldr	r0, [pc, #76]	; (80053c4 <MX_I2C2_Init+0x50>)
  hi2c2.Init.ClockSpeed = 100000;
 8005378:	4b13      	ldr	r3, [pc, #76]	; (80053c8 <MX_I2C2_Init+0x54>)
 800537a:	f8df e050 	ldr.w	lr, [pc, #80]	; 80053cc <MX_I2C2_Init+0x58>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800537e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 100000;
 8005382:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005386:	2300      	movs	r3, #0
 8005388:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800538a:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800538c:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800538e:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005390:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005392:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005394:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005396:	f7fc fc99 	bl	8001ccc <HAL_I2C_Init>
 800539a:	b108      	cbz	r0, 80053a0 <MX_I2C2_Init+0x2c>
  {
    Error_Handler();
 800539c:	f000 fab8 	bl	8005910 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80053a0:	2100      	movs	r1, #0
 80053a2:	4808      	ldr	r0, [pc, #32]	; (80053c4 <MX_I2C2_Init+0x50>)
 80053a4:	f7fc fdd6 	bl	8001f54 <HAL_I2CEx_ConfigAnalogFilter>
 80053a8:	b108      	cbz	r0, 80053ae <MX_I2C2_Init+0x3a>
  {
    Error_Handler();
 80053aa:	f000 fab1 	bl	8005910 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80053ae:	2100      	movs	r1, #0
 80053b0:	4804      	ldr	r0, [pc, #16]	; (80053c4 <MX_I2C2_Init+0x50>)
 80053b2:	f7fc fdee 	bl	8001f92 <HAL_I2CEx_ConfigDigitalFilter>
 80053b6:	b118      	cbz	r0, 80053c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
  }

}
 80053b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80053bc:	f000 baa8 	b.w	8005910 <Error_Handler>
 80053c0:	bd08      	pop	{r3, pc}
 80053c2:	bf00      	nop
 80053c4:	20004008 	.word	0x20004008
 80053c8:	40005800 	.word	0x40005800
 80053cc:	000186a0 	.word	0x000186a0

080053d0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80053d0:	4770      	bx	lr
	...

080053d4 <HAL_I2C_MspInit>:

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80053d4:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053d6:	2214      	movs	r2, #20
{
 80053d8:	b08b      	sub	sp, #44	; 0x2c
 80053da:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053dc:	2100      	movs	r1, #0
 80053de:	eb0d 0002 	add.w	r0, sp, r2
 80053e2:	f001 f908 	bl	80065f6 <memset>
  if(i2cHandle->Instance==I2C1)
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	4a27      	ldr	r2, [pc, #156]	; (8005488 <HAL_I2C_MspInit+0xb4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d125      	bne.n	800543a <HAL_I2C_MspInit+0x66>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053ee:	4c27      	ldr	r4, [pc, #156]	; (800548c <HAL_I2C_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053f0:	4827      	ldr	r0, [pc, #156]	; (8005490 <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053f2:	2500      	movs	r5, #0
 80053f4:	9501      	str	r5, [sp, #4]
 80053f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80053f8:	f043 0302 	orr.w	r3, r3, #2
 80053fc:	6323      	str	r3, [r4, #48]	; 0x30
 80053fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005408:	23c0      	movs	r3, #192	; 0xc0
 800540a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800540c:	2312      	movs	r3, #18
 800540e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005410:	2301      	movs	r3, #1
 8005412:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005414:	2303      	movs	r3, #3
 8005416:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005418:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800541a:	2304      	movs	r3, #4
 800541c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800541e:	f7fc fa99 	bl	8001954 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005422:	9502      	str	r5, [sp, #8]
 8005424:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005426:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800542a:	6423      	str	r3, [r4, #64]	; 0x40
 800542c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800542e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005432:	9302      	str	r3, [sp, #8]
 8005434:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005436:	b00b      	add	sp, #44	; 0x2c
 8005438:	bd30      	pop	{r4, r5, pc}
  else if(i2cHandle->Instance==I2C2)
 800543a:	4a16      	ldr	r2, [pc, #88]	; (8005494 <HAL_I2C_MspInit+0xc0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d1fa      	bne.n	8005436 <HAL_I2C_MspInit+0x62>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005440:	4c12      	ldr	r4, [pc, #72]	; (800548c <HAL_I2C_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005442:	4815      	ldr	r0, [pc, #84]	; (8005498 <HAL_I2C_MspInit+0xc4>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005444:	2500      	movs	r5, #0
 8005446:	9503      	str	r5, [sp, #12]
 8005448:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800544a:	f043 0320 	orr.w	r3, r3, #32
 800544e:	6323      	str	r3, [r4, #48]	; 0x30
 8005450:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	9303      	str	r3, [sp, #12]
 8005458:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800545a:	2212      	movs	r2, #18
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800545c:	2303      	movs	r3, #3
 800545e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005460:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005462:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005464:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005466:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005468:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800546a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800546c:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800546e:	f7fc fa71 	bl	8001954 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005472:	9504      	str	r5, [sp, #16]
 8005474:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005476:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800547a:	6423      	str	r3, [r4, #64]	; 0x40
 800547c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800547e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005482:	9304      	str	r3, [sp, #16]
 8005484:	9b04      	ldr	r3, [sp, #16]
}
 8005486:	e7d6      	b.n	8005436 <HAL_I2C_MspInit+0x62>
 8005488:	40005400 	.word	0x40005400
 800548c:	40023800 	.word	0x40023800
 8005490:	40020400 	.word	0x40020400
 8005494:	40005800 	.word	0x40005800
 8005498:	40021400 	.word	0x40021400

0800549c <MX_LTDC_Init>:
LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
	ACTIVE_H = (VSYNC + LCD_HEIGHT + VBP - 1);
 800549c:	4b4b      	ldr	r3, [pc, #300]	; (80055cc <MX_LTDC_Init+0x130>)
 800549e:	494c      	ldr	r1, [pc, #304]	; (80055d0 <MX_LTDC_Init+0x134>)
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	4b4c      	ldr	r3, [pc, #304]	; (80055d4 <MX_LTDC_Init+0x138>)
{
 80054a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	ACTIVE_H = (VSYNC + LCD_HEIGHT + VBP - 1);
 80054a6:	681d      	ldr	r5, [r3, #0]
 80054a8:	4b4b      	ldr	r3, [pc, #300]	; (80055d8 <MX_LTDC_Init+0x13c>)
	ACTIVE_W = (HSYNC + LCD_WIDTH + HBP - 1);
 80054aa:	4f4c      	ldr	r7, [pc, #304]	; (80055dc <MX_LTDC_Init+0x140>)
	ACTIVE_H = (VSYNC + LCD_HEIGHT + VBP - 1);
 80054ac:	681e      	ldr	r6, [r3, #0]
 80054ae:	1953      	adds	r3, r2, r5
 80054b0:	4433      	add	r3, r6
 80054b2:	3b01      	subs	r3, #1
 80054b4:	600b      	str	r3, [r1, #0]
	ACTIVE_W = (HSYNC + LCD_WIDTH + HBP - 1);
 80054b6:	494a      	ldr	r1, [pc, #296]	; (80055e0 <MX_LTDC_Init+0x144>)
 80054b8:	4b4a      	ldr	r3, [pc, #296]	; (80055e4 <MX_LTDC_Init+0x148>)
 80054ba:	6808      	ldr	r0, [r1, #0]
 80054bc:	494a      	ldr	r1, [pc, #296]	; (80055e8 <MX_LTDC_Init+0x14c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	680c      	ldr	r4, [r1, #0]
 80054c2:	1819      	adds	r1, r3, r0
 80054c4:	4421      	add	r1, r4
 80054c6:	3901      	subs	r1, #1
 80054c8:	6039      	str	r1, [r7, #0]

	TOTAL_HEIGHT = (VSYNC + VBP + LCD_HEIGHT + VFP - 1);
 80054ca:	4948      	ldr	r1, [pc, #288]	; (80055ec <MX_LTDC_Init+0x150>)
 80054cc:	4432      	add	r2, r6
 80054ce:	6809      	ldr	r1, [r1, #0]
 80054d0:	442a      	add	r2, r5
 80054d2:	440a      	add	r2, r1
 80054d4:	4946      	ldr	r1, [pc, #280]	; (80055f0 <MX_LTDC_Init+0x154>)
 80054d6:	3a01      	subs	r2, #1
 80054d8:	600a      	str	r2, [r1, #0]
	TOTAL_WIDTH = (HSYNC + HBP + LCD_WIDTH + HFP - 1);
 80054da:	4a46      	ldr	r2, [pc, #280]	; (80055f4 <MX_LTDC_Init+0x158>)
 80054dc:	4423      	add	r3, r4
 80054de:	6812      	ldr	r2, [r2, #0]
 80054e0:	4403      	add	r3, r0
 80054e2:	4413      	add	r3, r2
 80054e4:	4a44      	ldr	r2, [pc, #272]	; (80055f8 <MX_LTDC_Init+0x15c>)
{
 80054e6:	b09b      	sub	sp, #108	; 0x6c
	TOTAL_WIDTH = (HSYNC + HBP + LCD_WIDTH + HFP - 1);
 80054e8:	3b01      	subs	r3, #1
 80054ea:	6013      	str	r3, [r2, #0]


  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80054ec:	2100      	movs	r1, #0
 80054ee:	2234      	movs	r2, #52	; 0x34
 80054f0:	4668      	mov	r0, sp
 80054f2:	f001 f880 	bl	80065f6 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80054f6:	2234      	movs	r2, #52	; 0x34
 80054f8:	2100      	movs	r1, #0
 80054fa:	eb0d 0002 	add.w	r0, sp, r2
 80054fe:	f001 f87a 	bl	80065f6 <memset>

  hltdc.Instance = LTDC;
 8005502:	483e      	ldr	r0, [pc, #248]	; (80055fc <MX_LTDC_Init+0x160>)
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005504:	4b3e      	ldr	r3, [pc, #248]	; (8005600 <MX_LTDC_Init+0x164>)
 8005506:	2400      	movs	r4, #0
 8005508:	e880 0018 	stmia.w	r0, {r3, r4}
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hltdc.Init.HorizontalSync = 7;
 800550c:	2307      	movs	r3, #7
 800550e:	6143      	str	r3, [r0, #20]
  hltdc.Init.VerticalSync = 3;
 8005510:	2303      	movs	r3, #3
 8005512:	6183      	str	r3, [r0, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8005514:	230e      	movs	r3, #14
 8005516:	61c3      	str	r3, [r0, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8005518:	2305      	movs	r3, #5
 800551a:	6203      	str	r3, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800551c:	f240 238e 	movw	r3, #654	; 0x28e
 8005520:	6243      	str	r3, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8005522:	f240 13e5 	movw	r3, #485	; 0x1e5
 8005526:	6283      	str	r3, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8005528:	f44f 7325 	mov.w	r3, #660	; 0x294
 800552c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800552e:	f240 13e7 	movw	r3, #487	; 0x1e7
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005532:	6084      	str	r4, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8005534:	60c4      	str	r4, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005536:	6104      	str	r4, [r0, #16]
  hltdc.Init.TotalHeigh = 487;
 8005538:	6303      	str	r3, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800553a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800553e:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8005542:	f880 4036 	strb.w	r4, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8005546:	f7fc fdc9 	bl	80020dc <HAL_LTDC_Init>
 800554a:	b108      	cbz	r0, 8005550 <MX_LTDC_Init+0xb4>
  {
    Error_Handler();
 800554c:	f000 f9e0 	bl	8005910 <Error_Handler>
  pLayerCfg.WindowY0 = 0;
  pLayerCfg.WindowY1 = 0;
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  pLayerCfg.Alpha = 0;
  pLayerCfg.Alpha0 = 0;
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8005550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005554:	9307      	str	r3, [sp, #28]
  pLayerCfg.ImageWidth = 0;
  pLayerCfg.ImageHeight = 0;
  pLayerCfg.Backcolor.Blue = 0;
  pLayerCfg.Backcolor.Green = 0;
  pLayerCfg.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8005556:	2200      	movs	r2, #0
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8005558:	2305      	movs	r3, #5
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800555a:	4669      	mov	r1, sp
 800555c:	4827      	ldr	r0, [pc, #156]	; (80055fc <MX_LTDC_Init+0x160>)
  pLayerCfg.WindowX0 = 0;
 800555e:	9400      	str	r4, [sp, #0]
  pLayerCfg.WindowX1 = 0;
 8005560:	9401      	str	r4, [sp, #4]
  pLayerCfg.WindowY0 = 0;
 8005562:	9402      	str	r4, [sp, #8]
  pLayerCfg.WindowY1 = 0;
 8005564:	9403      	str	r4, [sp, #12]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005566:	9404      	str	r4, [sp, #16]
  pLayerCfg.Alpha = 0;
 8005568:	9405      	str	r4, [sp, #20]
  pLayerCfg.Alpha0 = 0;
 800556a:	9406      	str	r4, [sp, #24]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800556c:	9308      	str	r3, [sp, #32]
  pLayerCfg.FBStartAdress = 0;
 800556e:	9409      	str	r4, [sp, #36]	; 0x24
  pLayerCfg.ImageWidth = 0;
 8005570:	940a      	str	r4, [sp, #40]	; 0x28
  pLayerCfg.ImageHeight = 0;
 8005572:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.Backcolor.Blue = 0;
 8005574:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Green = 0;
 8005578:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  pLayerCfg.Backcolor.Red = 0;
 800557c:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8005580:	f7fc fe18 	bl	80021b4 <HAL_LTDC_ConfigLayer>
 8005584:	b108      	cbz	r0, 800558a <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8005586:	f000 f9c3 	bl	8005910 <Error_Handler>
  pLayerCfg1.WindowY0 = 0;
  pLayerCfg1.WindowY1 = 0;
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  pLayerCfg1.Alpha = 0;
  pLayerCfg1.Alpha0 = 0;
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800558a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800558e:	9214      	str	r2, [sp, #80]	; 0x50
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8005590:	2205      	movs	r2, #5
  pLayerCfg1.WindowX0 = 0;
 8005592:	2300      	movs	r3, #0
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8005594:	9215      	str	r2, [sp, #84]	; 0x54
  pLayerCfg1.ImageWidth = 0;
  pLayerCfg1.ImageHeight = 0;
  pLayerCfg1.Backcolor.Blue = 0;
  pLayerCfg1.Backcolor.Green = 0;
  pLayerCfg1.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8005596:	a90d      	add	r1, sp, #52	; 0x34
 8005598:	2201      	movs	r2, #1
 800559a:	4818      	ldr	r0, [pc, #96]	; (80055fc <MX_LTDC_Init+0x160>)
  pLayerCfg1.WindowX0 = 0;
 800559c:	930d      	str	r3, [sp, #52]	; 0x34
  pLayerCfg1.WindowX1 = 0;
 800559e:	930e      	str	r3, [sp, #56]	; 0x38
  pLayerCfg1.WindowY0 = 0;
 80055a0:	930f      	str	r3, [sp, #60]	; 0x3c
  pLayerCfg1.WindowY1 = 0;
 80055a2:	9310      	str	r3, [sp, #64]	; 0x40
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80055a4:	9311      	str	r3, [sp, #68]	; 0x44
  pLayerCfg1.Alpha = 0;
 80055a6:	9312      	str	r3, [sp, #72]	; 0x48
  pLayerCfg1.Alpha0 = 0;
 80055a8:	9313      	str	r3, [sp, #76]	; 0x4c
  pLayerCfg1.FBStartAdress = 0;
 80055aa:	9316      	str	r3, [sp, #88]	; 0x58
  pLayerCfg1.ImageWidth = 0;
 80055ac:	9317      	str	r3, [sp, #92]	; 0x5c
  pLayerCfg1.ImageHeight = 0;
 80055ae:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg1.Backcolor.Blue = 0;
 80055b0:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
  pLayerCfg1.Backcolor.Green = 0;
 80055b4:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
  pLayerCfg1.Backcolor.Red = 0;
 80055b8:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80055bc:	f7fc fdfa 	bl	80021b4 <HAL_LTDC_ConfigLayer>
 80055c0:	b108      	cbz	r0, 80055c6 <MX_LTDC_Init+0x12a>
  {
    Error_Handler();
 80055c2:	f000 f9a5 	bl	8005910 <Error_Handler>
  }

}
 80055c6:	b01b      	add	sp, #108	; 0x6c
 80055c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20003ec0 	.word	0x20003ec0
 80055d0:	20003ec8 	.word	0x20003ec8
 80055d4:	20003ea8 	.word	0x20003ea8
 80055d8:	20003ebc 	.word	0x20003ebc
 80055dc:	20003ec4 	.word	0x20003ec4
 80055e0:	20003ea4 	.word	0x20003ea4
 80055e4:	20003eb4 	.word	0x20003eb4
 80055e8:	20003eb0 	.word	0x20003eb0
 80055ec:	20003eb8 	.word	0x20003eb8
 80055f0:	20003ed0 	.word	0x20003ed0
 80055f4:	20003eac 	.word	0x20003eac
 80055f8:	20003ecc 	.word	0x20003ecc
 80055fc:	200040b0 	.word	0x200040b0
 8005600:	40016800 	.word	0x40016800

08005604 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8005604:	b570      	push	{r4, r5, r6, lr}
 8005606:	4604      	mov	r4, r0
 8005608:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800560a:	2214      	movs	r2, #20
 800560c:	2100      	movs	r1, #0
 800560e:	a807      	add	r0, sp, #28
 8005610:	f000 fff1 	bl	80065f6 <memset>
  if(ltdcHandle->Instance==LTDC)
 8005614:	6822      	ldr	r2, [r4, #0]
 8005616:	4b4e      	ldr	r3, [pc, #312]	; (8005750 <HAL_LTDC_MspInit+0x14c>)
 8005618:	429a      	cmp	r2, r3
 800561a:	f040 8096 	bne.w	800574a <HAL_LTDC_MspInit+0x146>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800561e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8005622:	2400      	movs	r4, #0
 8005624:	9400      	str	r4, [sp, #0]
 8005626:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005628:	484a      	ldr	r0, [pc, #296]	; (8005754 <HAL_LTDC_MspInit+0x150>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 800562a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800562e:	645a      	str	r2, [r3, #68]	; 0x44
 8005630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005632:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8005636:	9200      	str	r2, [sp, #0]
 8005638:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800563a:	9401      	str	r4, [sp, #4]
 800563c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800563e:	f042 0220 	orr.w	r2, r2, #32
 8005642:	631a      	str	r2, [r3, #48]	; 0x30
 8005644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005646:	f002 0220 	and.w	r2, r2, #32
 800564a:	9201      	str	r2, [sp, #4]
 800564c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800564e:	9402      	str	r4, [sp, #8]
 8005650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005652:	f042 0201 	orr.w	r2, r2, #1
 8005656:	631a      	str	r2, [r3, #48]	; 0x30
 8005658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800565a:	f002 0201 	and.w	r2, r2, #1
 800565e:	9202      	str	r2, [sp, #8]
 8005660:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005662:	9403      	str	r4, [sp, #12]
 8005664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005666:	f042 0202 	orr.w	r2, r2, #2
 800566a:	631a      	str	r2, [r3, #48]	; 0x30
 800566c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800566e:	f002 0202 	and.w	r2, r2, #2
 8005672:	9203      	str	r2, [sp, #12]
 8005674:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005676:	9404      	str	r4, [sp, #16]
 8005678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800567a:	f042 0210 	orr.w	r2, r2, #16
 800567e:	631a      	str	r2, [r3, #48]	; 0x30
 8005680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005682:	f002 0210 	and.w	r2, r2, #16
 8005686:	9204      	str	r2, [sp, #16]
 8005688:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800568a:	9405      	str	r4, [sp, #20]
 800568c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800568e:	f042 0208 	orr.w	r2, r2, #8
 8005692:	631a      	str	r2, [r3, #48]	; 0x30
 8005694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005696:	f002 0208 	and.w	r2, r2, #8
 800569a:	9205      	str	r2, [sp, #20]
 800569c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800569e:	9406      	str	r4, [sp, #24]
 80056a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056a2:	f042 0204 	orr.w	r2, r2, #4
 80056a6:	631a      	str	r2, [r3, #48]	; 0x30
 80056a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b0:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80056b2:	260e      	movs	r6, #14
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056b4:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b6:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80056b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80056bc:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80056be:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80056c0:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80056c2:	f7fc f947 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 80056c6:	f641 0358 	movw	r3, #6232	; 0x1858
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056ca:	a907      	add	r1, sp, #28
 80056cc:	4822      	ldr	r0, [pc, #136]	; (8005758 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 80056ce:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056d0:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056d4:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80056d6:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056d8:	f7fc f93c 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80056dc:	2303      	movs	r3, #3
 80056de:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056e0:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80056e2:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056e4:	481d      	ldr	r0, [pc, #116]	; (800575c <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80056e6:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e8:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ea:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ec:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056ee:	f7fc f931 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80056f2:	f44f 4358 	mov.w	r3, #55296	; 0xd800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80056f6:	a907      	add	r1, sp, #28
 80056f8:	4819      	ldr	r0, [pc, #100]	; (8005760 <HAL_LTDC_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80056fa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056fc:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056fe:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005700:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005702:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005704:	f7fc f926 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8005708:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800570c:	a907      	add	r1, sp, #28
 800570e:	4813      	ldr	r0, [pc, #76]	; (800575c <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8005710:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005712:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005714:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005716:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005718:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800571a:	f7fc f91b 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_6;
 800571e:	f44f 6389 	mov.w	r3, #1096	; 0x448
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005722:	a907      	add	r1, sp, #28
 8005724:	480f      	ldr	r0, [pc, #60]	; (8005764 <HAL_LTDC_MspInit+0x160>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_6;
 8005726:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005728:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800572a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800572c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800572e:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005730:	f7fc f910 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8005734:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005738:	a907      	add	r1, sp, #28
 800573a:	480b      	ldr	r0, [pc, #44]	; (8005768 <HAL_LTDC_MspInit+0x164>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 800573c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800573e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005740:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005742:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005744:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005746:	f7fc f905 	bl	8001954 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800574a:	b00c      	add	sp, #48	; 0x30
 800574c:	bd70      	pop	{r4, r5, r6, pc}
 800574e:	bf00      	nop
 8005750:	40016800 	.word	0x40016800
 8005754:	40021400 	.word	0x40021400
 8005758:	40020000 	.word	0x40020000
 800575c:	40020400 	.word	0x40020400
 8005760:	40021000 	.word	0x40021000
 8005764:	40020c00 	.word	0x40020c00
 8005768:	40020800 	.word	0x40020800

0800576c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005770:	f7fb ff62 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005774:	f000 f826 	bl	80057c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005778:	f7ff fd52 	bl	8005220 <MX_GPIO_Init>
  MX_LTDC_Init();
 800577c:	f7ff fe8e 	bl	800549c <MX_LTDC_Init>
  MX_DMA2D_Init();
 8005780:	f7ff fcfa 	bl	8005178 <MX_DMA2D_Init>
  MX_I2C1_Init();
 8005784:	f7ff fdc8 	bl	8005318 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005788:	f7ff fdf4 	bl	8005374 <MX_I2C2_Init>
  MX_SPI6_Init();
 800578c:	f000 f912 	bl	80059b4 <MX_SPI6_Init>
  MX_SPI5_Init();
 8005790:	f000 f8ee 	bl	8005970 <MX_SPI5_Init>
  MX_I2C3_Init();
 8005794:	f7ff fe1c 	bl	80053d0 <MX_I2C3_Init>
  MX_CAN1_Init();
 8005798:	f7ff fc9c 	bl	80050d4 <MX_CAN1_Init>
  MX_TIM7_Init();
 800579c:	f000 fa44 	bl	8005c28 <MX_TIM7_Init>
  MX_TIM6_Init();
 80057a0:	f000 fa24 	bl	8005bec <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80057a4:	f7ff fd28 	bl	80051f8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80057a8:	f7fe fece 	bl	8004548 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */

  SCU_LED_DRIVER.init(1, 0xAA); //Address 10101010 before shift.
 80057ac:	22aa      	movs	r2, #170	; 0xaa
 80057ae:	2101      	movs	r1, #1
 80057b0:	4803      	ldr	r0, [pc, #12]	; (80057c0 <main+0x54>)
 80057b2:	f7fb feed 	bl	8001590 <_ZN7PCA96XX4initEih>
  SCU_LED_DRIVER.begin();
 80057b6:	4802      	ldr	r0, [pc, #8]	; (80057c0 <main+0x54>)
 80057b8:	f7fb fe5c 	bl	8001474 <_ZN7PCA96265beginEv>
  //Will create variables to hold the binary for known functions for the LEDs


  /* USER CODE BEGIN WHILE */
  while (1)
 80057bc:	e7fe      	b.n	80057bc <main+0x50>
 80057be:	bf00      	nop
 80057c0:	20003ed4 	.word	0x20003ed4

080057c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b0a0      	sub	sp, #128	; 0x80
 80057c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80057ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80057ce:	2230      	movs	r2, #48	; 0x30
 80057d0:	2100      	movs	r1, #0
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 ff0f 	bl	80065f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80057d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	605a      	str	r2, [r3, #4]
 80057e2:	609a      	str	r2, [r3, #8]
 80057e4:	60da      	str	r2, [r3, #12]
 80057e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80057e8:	f107 030c 	add.w	r3, r7, #12
 80057ec:	2230      	movs	r2, #48	; 0x30
 80057ee:	2100      	movs	r1, #0
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 ff00 	bl	80065f6 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80057f6:	2300      	movs	r3, #0
 80057f8:	60bb      	str	r3, [r7, #8]
 80057fa:	4a3a      	ldr	r2, [pc, #232]	; (80058e4 <SystemClock_Config+0x120>)
 80057fc:	4b39      	ldr	r3, [pc, #228]	; (80058e4 <SystemClock_Config+0x120>)
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005804:	6413      	str	r3, [r2, #64]	; 0x40
 8005806:	4b37      	ldr	r3, [pc, #220]	; (80058e4 <SystemClock_Config+0x120>)
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800580e:	60bb      	str	r3, [r7, #8]
 8005810:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005812:	2300      	movs	r3, #0
 8005814:	607b      	str	r3, [r7, #4]
 8005816:	4a34      	ldr	r2, [pc, #208]	; (80058e8 <SystemClock_Config+0x124>)
 8005818:	4b33      	ldr	r3, [pc, #204]	; (80058e8 <SystemClock_Config+0x124>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	4b30      	ldr	r3, [pc, #192]	; (80058e8 <SystemClock_Config+0x124>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800582e:	607b      	str	r3, [r7, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005832:	2301      	movs	r3, #1
 8005834:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005836:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800583a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800583c:	2302      	movs	r3, #2
 800583e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005840:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005844:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8005846:	2319      	movs	r3, #25
 8005848:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 192;
 800584a:	23c0      	movs	r3, #192	; 0xc0
 800584c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800584e:	2302      	movs	r3, #2
 8005850:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005852:	2304      	movs	r3, #4
 8005854:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005856:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800585a:	4618      	mov	r0, r3
 800585c:	f7fd f91e 	bl	8002a9c <HAL_RCC_OscConfig>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	bf14      	ite	ne
 8005866:	2301      	movne	r3, #1
 8005868:	2300      	moveq	r3, #0
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8005870:	f000 f84e 	bl	8005910 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005874:	230f      	movs	r3, #15
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005878:	2302      	movs	r3, #2
 800587a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800587c:	2300      	movs	r3, #0
 800587e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005880:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005884:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800588a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800588c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005890:	2103      	movs	r1, #3
 8005892:	4618      	mov	r0, r3
 8005894:	f7fd fab2 	bl	8002dfc <HAL_RCC_ClockConfig>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	bf14      	ite	ne
 800589e:	2301      	movne	r3, #1
 80058a0:	2300      	moveq	r3, #0
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80058a8:	f000 f832 	bl	8005910 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80058ac:	2308      	movs	r3, #8
 80058ae:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 80058b0:	2364      	movs	r3, #100	; 0x64
 80058b2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80058b4:	2302      	movs	r3, #2
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80058b8:	2300      	movs	r3, #0
 80058ba:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80058bc:	f107 030c 	add.w	r3, r7, #12
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fd fb79 	bl	8002fb8 <HAL_RCCEx_PeriphCLKConfig>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	bf14      	ite	ne
 80058cc:	2301      	movne	r3, #1
 80058ce:	2300      	moveq	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <SystemClock_Config+0x116>
  {
    Error_Handler();
 80058d6:	f000 f81b 	bl	8005910 <Error_Handler>
  }
}
 80058da:	bf00      	nop
 80058dc:	3780      	adds	r7, #128	; 0x80
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	40023800 	.word	0x40023800
 80058e8:	40007000 	.word	0x40007000

080058ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a04      	ldr	r2, [pc, #16]	; (800590c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d101      	bne.n	8005902 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80058fe:	f7fb feb5 	bl	800166c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005902:	bf00      	nop
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40010000 	.word	0x40010000

08005910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005914:	bf00      	nop
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
	...

08005920 <_Z41__static_initialization_and_destruction_0ii>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

#ifdef __cplusplus
}
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d10c      	bne.n	800594a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005936:	4293      	cmp	r3, r2
 8005938:	d107      	bne.n	800594a <_Z41__static_initialization_and_destruction_0ii+0x2a>
PCA9626 SCU_LED_DRIVER;
 800593a:	4806      	ldr	r0, [pc, #24]	; (8005954 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800593c:	f7fb fd66 	bl	800140c <_ZN7PCA9626C1Ev>
 8005940:	4a05      	ldr	r2, [pc, #20]	; (8005958 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8005942:	4906      	ldr	r1, [pc, #24]	; (800595c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8005944:	4803      	ldr	r0, [pc, #12]	; (8005954 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8005946:	f000 fc26 	bl	8006196 <__aeabi_atexit>
}
 800594a:	bf00      	nop
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20003ed4 	.word	0x20003ed4
 8005958:	20000000 	.word	0x20000000
 800595c:	08001431 	.word	0x08001431

08005960 <_GLOBAL__sub_I_LCD_WIDTH>:
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
 8005964:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005968:	2001      	movs	r0, #1
 800596a:	f7ff ffd9 	bl	8005920 <_Z41__static_initialization_and_destruction_0ii>
 800596e:	bd80      	pop	{r7, pc}

08005970 <MX_SPI5_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8005970:	b508      	push	{r3, lr}

  hspi5.Instance = SPI5;
 8005972:	480e      	ldr	r0, [pc, #56]	; (80059ac <MX_SPI5_Init+0x3c>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8005974:	4b0e      	ldr	r3, [pc, #56]	; (80059b0 <MX_SPI5_Init+0x40>)
 8005976:	f44f 7e82 	mov.w	lr, #260	; 0x104
 800597a:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800597e:	2300      	movs	r3, #0
 8005980:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8005982:	60c3      	str	r3, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005984:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005986:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8005988:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800598c:	61c3      	str	r3, [r0, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800598e:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8005990:	6243      	str	r3, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005992:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8005994:	230a      	movs	r3, #10
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8005996:	6182      	str	r2, [r0, #24]
  hspi5.Init.CRCPolynomial = 10;
 8005998:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800599a:	f7fd fc25 	bl	80031e8 <HAL_SPI_Init>
 800599e:	b118      	cbz	r0, 80059a8 <MX_SPI5_Init+0x38>
  {
    Error_Handler();
  }

}
 80059a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80059a4:	f7ff bfb4 	b.w	8005910 <Error_Handler>
 80059a8:	bd08      	pop	{r3, pc}
 80059aa:	bf00      	nop
 80059ac:	200041b0 	.word	0x200041b0
 80059b0:	40015000 	.word	0x40015000

080059b4 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{

  hspi6.Instance = SPI6;
 80059b4:	480e      	ldr	r0, [pc, #56]	; (80059f0 <MX_SPI6_Init+0x3c>)
  hspi6.Init.Mode = SPI_MODE_MASTER;
  hspi6.Init.Direction = SPI_DIRECTION_1LINE;
 80059b6:	4a0f      	ldr	r2, [pc, #60]	; (80059f4 <MX_SPI6_Init+0x40>)
{
 80059b8:	b508      	push	{r3, lr}
  hspi6.Init.Direction = SPI_DIRECTION_1LINE;
 80059ba:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
 80059be:	f44f 7382 	mov.w	r3, #260	; 0x104
 80059c2:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 80059c6:	2300      	movs	r3, #0
 80059c8:	60c3      	str	r3, [r0, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 80059ca:	6103      	str	r3, [r0, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 80059cc:	6143      	str	r3, [r0, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 80059ce:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059d2:	61c3      	str	r3, [r0, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80059d4:	6203      	str	r3, [r0, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 80059d6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059d8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 10;
 80059da:	230a      	movs	r3, #10
  hspi6.Init.NSS = SPI_NSS_SOFT;
 80059dc:	6182      	str	r2, [r0, #24]
  hspi6.Init.CRCPolynomial = 10;
 80059de:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 80059e0:	f7fd fc02 	bl	80031e8 <HAL_SPI_Init>
 80059e4:	b118      	cbz	r0, 80059ee <MX_SPI6_Init+0x3a>
  {
    Error_Handler();
  }

}
 80059e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80059ea:	f7ff bf91 	b.w	8005910 <Error_Handler>
 80059ee:	bd08      	pop	{r3, pc}
 80059f0:	20004158 	.word	0x20004158
 80059f4:	40015400 	.word	0x40015400

080059f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80059f8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059fa:	2214      	movs	r2, #20
{
 80059fc:	b08a      	sub	sp, #40	; 0x28
 80059fe:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a00:	2100      	movs	r1, #0
 8005a02:	eb0d 0002 	add.w	r0, sp, r2
 8005a06:	f000 fdf6 	bl	80065f6 <memset>
  if(spiHandle->Instance==SPI5)
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	4a26      	ldr	r2, [pc, #152]	; (8005aa8 <HAL_SPI_MspInit+0xb0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d124      	bne.n	8005a5c <HAL_SPI_MspInit+0x64>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8005a12:	4b26      	ldr	r3, [pc, #152]	; (8005aac <HAL_SPI_MspInit+0xb4>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005a14:	4826      	ldr	r0, [pc, #152]	; (8005ab0 <HAL_SPI_MspInit+0xb8>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8005a16:	2100      	movs	r1, #0
 8005a18:	9101      	str	r1, [sp, #4]
 8005a1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a1c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005a20:	645a      	str	r2, [r3, #68]	; 0x44
 8005a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a24:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005a28:	9201      	str	r2, [sp, #4]
 8005a2a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005a2c:	9102      	str	r1, [sp, #8]
 8005a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a30:	f042 0220 	orr.w	r2, r2, #32
 8005a34:	631a      	str	r2, [r3, #48]	; 0x30
 8005a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a38:	f003 0320 	and.w	r3, r3, #32
 8005a3c:	9302      	str	r3, [sp, #8]
 8005a3e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005a40:	f44f 7360 	mov.w	r3, #896	; 0x380
 8005a44:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a46:	2302      	movs	r3, #2
 8005a48:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8005a4e:	2305      	movs	r3, #5
 8005a50:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005a52:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a54:	f7fb ff7e 	bl	8001954 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8005a58:	b00a      	add	sp, #40	; 0x28
 8005a5a:	bd10      	pop	{r4, pc}
  else if(spiHandle->Instance==SPI6)
 8005a5c:	4a15      	ldr	r2, [pc, #84]	; (8005ab4 <HAL_SPI_MspInit+0xbc>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d1fa      	bne.n	8005a58 <HAL_SPI_MspInit+0x60>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8005a62:	4b12      	ldr	r3, [pc, #72]	; (8005aac <HAL_SPI_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a64:	4814      	ldr	r0, [pc, #80]	; (8005ab8 <HAL_SPI_MspInit+0xc0>)
    __HAL_RCC_SPI6_CLK_ENABLE();
 8005a66:	2100      	movs	r1, #0
 8005a68:	9103      	str	r1, [sp, #12]
 8005a6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a6c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005a70:	645a      	str	r2, [r3, #68]	; 0x44
 8005a72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a74:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005a78:	9203      	str	r2, [sp, #12]
 8005a7a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005a7c:	9104      	str	r1, [sp, #16]
 8005a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a84:	631a      	str	r2, [r3, #48]	; 0x30
 8005a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8c:	9304      	str	r3, [sp, #16]
 8005a8e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8005a90:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005a94:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a96:	2302      	movs	r3, #2
 8005a98:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8005a9e:	2305      	movs	r3, #5
 8005aa0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005aa2:	a905      	add	r1, sp, #20
 8005aa4:	e7d6      	b.n	8005a54 <HAL_SPI_MspInit+0x5c>
 8005aa6:	bf00      	nop
 8005aa8:	40015000 	.word	0x40015000
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	40021400 	.word	0x40021400
 8005ab4:	40015400 	.word	0x40015400
 8005ab8:	40021800 	.word	0x40021800

08005abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005abc:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005abe:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <HAL_MspInit+0x40>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	9200      	str	r2, [sp, #0]
 8005ac4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005ac6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8005aca:	6459      	str	r1, [r3, #68]	; 0x44
 8005acc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005ace:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8005ad2:	9100      	str	r1, [sp, #0]
 8005ad4:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ad6:	9201      	str	r2, [sp, #4]
 8005ad8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005ada:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8005ade:	6419      	str	r1, [r3, #64]	; 0x40
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae6:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005ae8:	210f      	movs	r1, #15
 8005aea:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8005aee:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005af0:	f7fb fe70 	bl	80017d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005af4:	b003      	add	sp, #12
 8005af6:	f85d fb04 	ldr.w	pc, [sp], #4
 8005afa:	bf00      	nop
 8005afc:	40023800 	.word	0x40023800

08005b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b00:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8005b02:	4601      	mov	r1, r0
{
 8005b04:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8005b06:	2200      	movs	r2, #0
 8005b08:	2019      	movs	r0, #25
 8005b0a:	f7fb fe63 	bl	80017d4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8005b0e:	2019      	movs	r0, #25
 8005b10:	f7fb fe94 	bl	800183c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005b14:	2500      	movs	r5, #0
 8005b16:	4b15      	ldr	r3, [pc, #84]	; (8005b6c <HAL_InitTick+0x6c>)
 8005b18:	9502      	str	r5, [sp, #8]
 8005b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005b1c:	4c14      	ldr	r4, [pc, #80]	; (8005b70 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	645a      	str	r2, [r3, #68]	; 0x44
 8005b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005b2c:	a901      	add	r1, sp, #4
 8005b2e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005b30:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005b32:	f7fd fa23 	bl	8002f7c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005b36:	f7fd fa11 	bl	8002f5c <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8005b3a:	4b0e      	ldr	r3, [pc, #56]	; (8005b74 <HAL_InitTick+0x74>)
 8005b3c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005b3e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8005b42:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005b44:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005b46:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <HAL_InitTick+0x78>)
 8005b48:	fbb0 f0f3 	udiv	r0, r0, r3
 8005b4c:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8005b4e:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005b50:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8005b52:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b54:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005b56:	f7fd fc99 	bl	800348c <HAL_TIM_Base_Init>
 8005b5a:	b920      	cbnz	r0, 8005b66 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f7fd fb80 	bl	8003262 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8005b62:	b009      	add	sp, #36	; 0x24
 8005b64:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8005b66:	2001      	movs	r0, #1
 8005b68:	e7fb      	b.n	8005b62 <HAL_InitTick+0x62>
 8005b6a:	bf00      	nop
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	20004208 	.word	0x20004208
 8005b74:	40010000 	.word	0x40010000
 8005b78:	000f4240 	.word	0x000f4240

08005b7c <NMI_Handler>:
 8005b7c:	4770      	bx	lr

08005b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b7e:	e7fe      	b.n	8005b7e <HardFault_Handler>

08005b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b80:	e7fe      	b.n	8005b80 <MemManage_Handler>

08005b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b82:	e7fe      	b.n	8005b82 <BusFault_Handler>

08005b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b84:	e7fe      	b.n	8005b84 <UsageFault_Handler>

08005b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b86:	4770      	bx	lr

08005b88 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005b88:	4801      	ldr	r0, [pc, #4]	; (8005b90 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8005b8a:	f7fd bb79 	b.w	8003280 <HAL_TIM_IRQHandler>
 8005b8e:	bf00      	nop
 8005b90:	20004208 	.word	0x20004208

08005b94 <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8005b94:	4801      	ldr	r0, [pc, #4]	; (8005b9c <OTG_HS_IRQHandler+0x8>)
 8005b96:	f7fc bbb7 	b.w	8002308 <HAL_PCD_IRQHandler>
 8005b9a:	bf00      	nop
 8005b9c:	200044e0 	.word	0x200044e0

08005ba0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ba0:	490f      	ldr	r1, [pc, #60]	; (8005be0 <SystemInit+0x40>)
 8005ba2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005ba6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005bae:	4b0d      	ldr	r3, [pc, #52]	; (8005be4 <SystemInit+0x44>)
 8005bb0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005bb2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8005bb4:	f042 0201 	orr.w	r2, r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005bba:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005bc2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005bc6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005bc8:	4a07      	ldr	r2, [pc, #28]	; (8005be8 <SystemInit+0x48>)
 8005bca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bd2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005bd4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005bd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bda:	608b      	str	r3, [r1, #8]
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	e000ed00 	.word	0xe000ed00
 8005be4:	40023800 	.word	0x40023800
 8005be8:	24003010 	.word	0x24003010

08005bec <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005bec:	b513      	push	{r0, r1, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim6.Instance = TIM6;
 8005bee:	4b0c      	ldr	r3, [pc, #48]	; (8005c20 <MX_TIM6_Init+0x34>)
 8005bf0:	480c      	ldr	r0, [pc, #48]	; (8005c24 <MX_TIM6_Init+0x38>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bf2:	2400      	movs	r4, #0
 8005bf4:	9400      	str	r4, [sp, #0]
 8005bf6:	9401      	str	r4, [sp, #4]
  htim6.Init.Prescaler = 0;
 8005bf8:	e880 0018 	stmia.w	r0, {r3, r4}
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bfc:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 0;
 8005bfe:	60c4      	str	r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005c00:	f7fd fc44 	bl	800348c <HAL_TIM_Base_Init>
 8005c04:	b108      	cbz	r0, 8005c0a <MX_TIM6_Init+0x1e>
  {
    Error_Handler();
 8005c06:	f7ff fe83 	bl	8005910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005c0a:	4669      	mov	r1, sp
 8005c0c:	4805      	ldr	r0, [pc, #20]	; (8005c24 <MX_TIM6_Init+0x38>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c0e:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c10:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005c12:	f7fd fc55 	bl	80034c0 <HAL_TIMEx_MasterConfigSynchronization>
 8005c16:	b108      	cbz	r0, 8005c1c <MX_TIM6_Init+0x30>
  {
    Error_Handler();
 8005c18:	f7ff fe7a 	bl	8005910 <Error_Handler>
  }

}
 8005c1c:	b002      	add	sp, #8
 8005c1e:	bd10      	pop	{r4, pc}
 8005c20:	40001000 	.word	0x40001000
 8005c24:	20004244 	.word	0x20004244

08005c28 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005c28:	b513      	push	{r0, r1, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim7.Instance = TIM7;
 8005c2a:	4b0c      	ldr	r3, [pc, #48]	; (8005c5c <MX_TIM7_Init+0x34>)
 8005c2c:	480c      	ldr	r0, [pc, #48]	; (8005c60 <MX_TIM7_Init+0x38>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c2e:	2400      	movs	r4, #0
 8005c30:	9400      	str	r4, [sp, #0]
 8005c32:	9401      	str	r4, [sp, #4]
  htim7.Init.Prescaler = 0;
 8005c34:	e880 0018 	stmia.w	r0, {r3, r4}
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c38:	6084      	str	r4, [r0, #8]
  htim7.Init.Period = 0;
 8005c3a:	60c4      	str	r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005c3c:	f7fd fc26 	bl	800348c <HAL_TIM_Base_Init>
 8005c40:	b108      	cbz	r0, 8005c46 <MX_TIM7_Init+0x1e>
  {
    Error_Handler();
 8005c42:	f7ff fe65 	bl	8005910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005c46:	4669      	mov	r1, sp
 8005c48:	4805      	ldr	r0, [pc, #20]	; (8005c60 <MX_TIM7_Init+0x38>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c4a:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c4c:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005c4e:	f7fd fc37 	bl	80034c0 <HAL_TIMEx_MasterConfigSynchronization>
 8005c52:	b108      	cbz	r0, 8005c58 <MX_TIM7_Init+0x30>
  {
    Error_Handler();
 8005c54:	f7ff fe5c 	bl	8005910 <Error_Handler>
  }

}
 8005c58:	b002      	add	sp, #8
 8005c5a:	bd10      	pop	{r4, pc}
 8005c5c:	40001400 	.word	0x40001400
 8005c60:	20004280 	.word	0x20004280

08005c64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 8005c64:	6803      	ldr	r3, [r0, #0]
 8005c66:	4a11      	ldr	r2, [pc, #68]	; (8005cac <HAL_TIM_Base_MspInit+0x48>)
 8005c68:	4293      	cmp	r3, r2
{
 8005c6a:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM6)
 8005c6c:	d10d      	bne.n	8005c8a <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005c6e:	2300      	movs	r3, #0
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <HAL_TIM_Base_MspInit+0x4c>)
 8005c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c76:	f042 0210 	orr.w	r2, r2, #16
 8005c7a:	641a      	str	r2, [r3, #64]	; 0x40
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	f003 0310 	and.w	r3, r3, #16
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8005c86:	b002      	add	sp, #8
 8005c88:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM7)
 8005c8a:	4a0a      	ldr	r2, [pc, #40]	; (8005cb4 <HAL_TIM_Base_MspInit+0x50>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d1fa      	bne.n	8005c86 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005c90:	2300      	movs	r3, #0
 8005c92:	9301      	str	r3, [sp, #4]
 8005c94:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <HAL_TIM_Base_MspInit+0x4c>)
 8005c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c98:	f042 0220 	orr.w	r2, r2, #32
 8005c9c:	641a      	str	r2, [r3, #64]	; 0x40
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	f003 0320 	and.w	r3, r3, #32
 8005ca4:	9301      	str	r3, [sp, #4]
 8005ca6:	9b01      	ldr	r3, [sp, #4]
}
 8005ca8:	e7ed      	b.n	8005c86 <HAL_TIM_Base_MspInit+0x22>
 8005caa:	bf00      	nop
 8005cac:	40001000 	.word	0x40001000
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	40001400 	.word	0x40001400

08005cb8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005cb8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS);
 8005cba:	4c09      	ldr	r4, [pc, #36]	; (8005ce0 <MX_USB_DEVICE_Init+0x28>)
 8005cbc:	4909      	ldr	r1, [pc, #36]	; (8005ce4 <MX_USB_DEVICE_Init+0x2c>)
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f7fe f90d 	bl	8003ee0 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceHS, &USBD_CUSTOM_HID);
 8005cc6:	4908      	ldr	r1, [pc, #32]	; (8005ce8 <MX_USB_DEVICE_Init+0x30>)
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f7fe f91e 	bl	8003f0a <USBD_RegisterClass>

  USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceHS, &USBD_CustomHID_fops_HS);
 8005cce:	4620      	mov	r0, r4
 8005cd0:	4906      	ldr	r1, [pc, #24]	; (8005cec <MX_USB_DEVICE_Init+0x34>)
 8005cd2:	f7fe f8fe 	bl	8003ed2 <USBD_CUSTOM_HID_RegisterInterface>

  USBD_Start(&hUsbDeviceHS);
 8005cd6:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceHS);
 8005cdc:	f7fe b91c 	b.w	8003f18 <USBD_Start>
 8005ce0:	200042bc 	.word	0x200042bc
 8005ce4:	200000a4 	.word	0x200000a4
 8005ce8:	20000008 	.word	0x20000008
 8005cec:	20000094 	.word	0x20000094

08005cf0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005cf0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_HS)
 8005cf2:	6802      	ldr	r2, [r0, #0]
 8005cf4:	4b18      	ldr	r3, [pc, #96]	; (8005d58 <HAL_PCD_MspInit+0x68>)
 8005cf6:	429a      	cmp	r2, r3
{
 8005cf8:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB_OTG_HS)
 8005cfa:	d12a      	bne.n	8005d52 <HAL_PCD_MspInit+0x62>
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cfc:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005cfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d02:	a901      	add	r1, sp, #4
 8005d04:	4815      	ldr	r0, [pc, #84]	; (8005d5c <HAL_PCD_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005d06:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d08:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d0a:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d0c:	f7fb fe22 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005d10:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005d14:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d16:	2302      	movs	r3, #2
 8005d18:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d1e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8005d20:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d22:	480e      	ldr	r0, [pc, #56]	; (8005d5c <HAL_PCD_MspInit+0x6c>)
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8005d24:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d26:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d28:	f7fb fe14 	bl	8001954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8005d2c:	4b0c      	ldr	r3, [pc, #48]	; (8005d60 <HAL_PCD_MspInit+0x70>)
 8005d2e:	9400      	str	r4, [sp, #0]
 8005d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d32:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005d36:	631a      	str	r2, [r3, #48]	; 0x30
 8005d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d3e:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8005d40:	204d      	movs	r0, #77	; 0x4d
 8005d42:	4622      	mov	r2, r4
 8005d44:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8005d46:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8005d48:	f7fb fd44 	bl	80017d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8005d4c:	204d      	movs	r0, #77	; 0x4d
 8005d4e:	f7fb fd75 	bl	800183c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8005d52:	b006      	add	sp, #24
 8005d54:	bd10      	pop	{r4, pc}
 8005d56:	bf00      	nop
 8005d58:	40040000 	.word	0x40040000
 8005d5c:	40020400 	.word	0x40020400
 8005d60:	40023800 	.word	0x40023800

08005d64 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005d64:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 8005d68:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005d6c:	f7fe b8eb 	b.w	8003f46 <USBD_LL_SetupStage>

08005d70 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005d70:	231c      	movs	r3, #28
 8005d72:	fb03 0301 	mla	r3, r3, r1, r0
 8005d76:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005d7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d7e:	f7fe b90f 	b.w	8003fa0 <USBD_LL_DataOutStage>

08005d82 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005d82:	231c      	movs	r3, #28
 8005d84:	fb03 0301 	mla	r3, r3, r1, r0
 8005d88:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d8e:	f7fe b939 	b.w	8004004 <USBD_LL_DataInStage>

08005d92 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005d92:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005d96:	f7fe b9b5 	b.w	8004104 <USBD_LL_SOF>

08005d9a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8005d9a:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8005d9c:	68c1      	ldr	r1, [r0, #12]
{ 
 8005d9e:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005da0:	3100      	adds	r1, #0
 8005da2:	bf18      	it	ne
 8005da4:	2101      	movne	r1, #1
 8005da6:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005daa:	f7fe f999 	bl	80040e0 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005dae:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
}
 8005db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005db6:	f7fe b974 	b.w	80040a2 <USBD_LL_Reset>
	...

08005dbc <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8005dbc:	b510      	push	{r4, lr}
 8005dbe:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005dc0:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005dc4:	f7fe f98f 	bl	80040e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005dc8:	6822      	ldr	r2, [r4, #0]
 8005dca:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8005dce:	f043 0301 	orr.w	r3, r3, #1
 8005dd2:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005dd6:	6a23      	ldr	r3, [r4, #32]
 8005dd8:	b123      	cbz	r3, 8005de4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005dda:	4a03      	ldr	r2, [pc, #12]	; (8005de8 <HAL_PCD_SuspendCallback+0x2c>)
 8005ddc:	6913      	ldr	r3, [r2, #16]
 8005dde:	f043 0306 	orr.w	r3, r3, #6
 8005de2:	6113      	str	r3, [r2, #16]
 8005de4:	bd10      	pop	{r4, pc}
 8005de6:	bf00      	nop
 8005de8:	e000ed00 	.word	0xe000ed00

08005dec <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005dec:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005df0:	f7fe b982 	b.w	80040f8 <USBD_LL_Resume>

08005df4 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005df4:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005df8:	f7fe b992 	b.w	8004120 <USBD_LL_IsoOUTIncomplete>

08005dfc <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005dfc:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005e00:	f7fe b98c 	b.w	800411c <USBD_LL_IsoINIncomplete>

08005e04 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005e04:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005e08:	f7fe b98c 	b.w	8004124 <USBD_LL_DevConnected>

08005e0c <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005e0c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005e10:	f7fe b98a 	b.w	8004128 <USBD_LL_DevDisconnected>

08005e14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005e14:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8005e16:	7801      	ldrb	r1, [r0, #0]
 8005e18:	2901      	cmp	r1, #1
 8005e1a:	d12a      	bne.n	8005e72 <USBD_LL_Init+0x5e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8005e1c:	4b16      	ldr	r3, [pc, #88]	; (8005e78 <USBD_LL_Init+0x64>)
 8005e1e:	f8c3 03ec 	str.w	r0, [r3, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_HS;
 8005e22:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8005e26:	4815      	ldr	r0, [pc, #84]	; (8005e7c <USBD_LL_Init+0x68>)
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8005e28:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8005e2a:	2206      	movs	r2, #6
 8005e2c:	e883 0005 	stmia.w	r3, {r0, r2}
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8005e30:	2002      	movs	r0, #2
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8005e32:	2200      	movs	r2, #0
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8005e34:	60d8      	str	r0, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8005e36:	6198      	str	r0, [r3, #24]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8005e38:	4618      	mov	r0, r3
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8005e3a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
 8005e3c:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8005e3e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8005e40:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8005e42:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8005e44:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8005e46:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8005e48:	f7fc f9dd 	bl	8002206 <HAL_PCD_Init>
 8005e4c:	b108      	cbz	r0, 8005e52 <USBD_LL_Init+0x3e>
  {
    Error_Handler( );
 8005e4e:	f7ff fd5f 	bl	8005910 <Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8005e52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e56:	4808      	ldr	r0, [pc, #32]	; (8005e78 <USBD_LL_Init+0x64>)
 8005e58:	f7fc fe1b 	bl	8002a92 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8005e5c:	2280      	movs	r2, #128	; 0x80
 8005e5e:	2100      	movs	r1, #0
 8005e60:	4805      	ldr	r0, [pc, #20]	; (8005e78 <USBD_LL_Init+0x64>)
 8005e62:	f7fc fdf5 	bl	8002a50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8005e66:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	4802      	ldr	r0, [pc, #8]	; (8005e78 <USBD_LL_Init+0x64>)
 8005e6e:	f7fc fdef 	bl	8002a50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8005e72:	2000      	movs	r0, #0
 8005e74:	bd08      	pop	{r3, pc}
 8005e76:	bf00      	nop
 8005e78:	200044e0 	.word	0x200044e0
 8005e7c:	40040000 	.word	0x40040000

08005e80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005e80:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005e82:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005e86:	f7fc fa2a 	bl	80022de <HAL_PCD_Start>
 8005e8a:	2803      	cmp	r0, #3
 8005e8c:	bf9a      	itte	ls
 8005e8e:	4b02      	ldrls	r3, [pc, #8]	; (8005e98 <USBD_LL_Start+0x18>)
 8005e90:	5c18      	ldrbls	r0, [r3, r0]
 8005e92:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005e94:	bd08      	pop	{r3, pc}
 8005e96:	bf00      	nop
 8005e98:	080068ea 	.word	0x080068ea

08005e9c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005e9c:	b510      	push	{r4, lr}
 8005e9e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005ea0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	4622      	mov	r2, r4
 8005ea8:	f7fc fcec 	bl	8002884 <HAL_PCD_EP_Open>
 8005eac:	2803      	cmp	r0, #3
 8005eae:	bf9a      	itte	ls
 8005eb0:	4b01      	ldrls	r3, [pc, #4]	; (8005eb8 <USBD_LL_OpenEP+0x1c>)
 8005eb2:	5c18      	ldrbls	r0, [r3, r0]
 8005eb4:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005eb6:	bd10      	pop	{r4, pc}
 8005eb8:	080068ea 	.word	0x080068ea

08005ebc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ebc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005ebe:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005ec2:	f7fc fd0d 	bl	80028e0 <HAL_PCD_EP_Close>
 8005ec6:	2803      	cmp	r0, #3
 8005ec8:	bf9a      	itte	ls
 8005eca:	4b02      	ldrls	r3, [pc, #8]	; (8005ed4 <USBD_LL_CloseEP+0x18>)
 8005ecc:	5c18      	ldrbls	r0, [r3, r0]
 8005ece:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005ed0:	bd08      	pop	{r3, pc}
 8005ed2:	bf00      	nop
 8005ed4:	080068ea 	.word	0x080068ea

08005ed8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ed8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005eda:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005ede:	f7fc fd66 	bl	80029ae <HAL_PCD_EP_SetStall>
 8005ee2:	2803      	cmp	r0, #3
 8005ee4:	bf9a      	itte	ls
 8005ee6:	4b02      	ldrls	r3, [pc, #8]	; (8005ef0 <USBD_LL_StallEP+0x18>)
 8005ee8:	5c18      	ldrbls	r0, [r3, r0]
 8005eea:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005eec:	bd08      	pop	{r3, pc}
 8005eee:	bf00      	nop
 8005ef0:	080068ea 	.word	0x080068ea

08005ef4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ef4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005ef6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005efa:	f7fc fd84 	bl	8002a06 <HAL_PCD_EP_ClrStall>
 8005efe:	2803      	cmp	r0, #3
 8005f00:	bf9a      	itte	ls
 8005f02:	4b02      	ldrls	r3, [pc, #8]	; (8005f0c <USBD_LL_ClearStallEP+0x18>)
 8005f04:	5c18      	ldrbls	r0, [r3, r0]
 8005f06:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8005f08:	bd08      	pop	{r3, pc}
 8005f0a:	bf00      	nop
 8005f0c:	080068ea 	.word	0x080068ea

08005f10 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8005f10:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005f14:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8005f18:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005f1c:	bf1b      	ittet	ne
 8005f1e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8005f22:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005f26:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005f2a:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005f2e:	bf08      	it	eq
 8005f30:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 8005f34:	4770      	bx	lr
	...

08005f38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005f38:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005f3a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005f3e:	f7fc fc8f 	bl	8002860 <HAL_PCD_SetAddress>
 8005f42:	2803      	cmp	r0, #3
 8005f44:	bf9a      	itte	ls
 8005f46:	4b02      	ldrls	r3, [pc, #8]	; (8005f50 <USBD_LL_SetUSBAddress+0x18>)
 8005f48:	5c18      	ldrbls	r0, [r3, r0]
 8005f4a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005f4c:	bd08      	pop	{r3, pc}
 8005f4e:	bf00      	nop
 8005f50:	080068ea 	.word	0x080068ea

08005f54 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005f54:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005f56:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005f5a:	f7fc fd08 	bl	800296e <HAL_PCD_EP_Transmit>
 8005f5e:	2803      	cmp	r0, #3
 8005f60:	bf9a      	itte	ls
 8005f62:	4b02      	ldrls	r3, [pc, #8]	; (8005f6c <USBD_LL_Transmit+0x18>)
 8005f64:	5c18      	ldrbls	r0, [r3, r0]
 8005f66:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8005f68:	bd08      	pop	{r3, pc}
 8005f6a:	bf00      	nop
 8005f6c:	080068ea 	.word	0x080068ea

08005f70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005f70:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005f72:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005f76:	f7fc fcd6 	bl	8002926 <HAL_PCD_EP_Receive>
 8005f7a:	2803      	cmp	r0, #3
 8005f7c:	bf9a      	itte	ls
 8005f7e:	4b02      	ldrls	r3, [pc, #8]	; (8005f88 <USBD_LL_PrepareReceive+0x18>)
 8005f80:	5c18      	ldrbls	r0, [r3, r0]
 8005f82:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8005f84:	bd08      	pop	{r3, pc}
 8005f86:	bf00      	nop
 8005f88:	080068ea 	.word	0x080068ea

08005f8c <CUSTOM_HID_DeInit_HS>:
static int8_t CUSTOM_HID_DeInit_HS(void)
{
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
  /* USER CODE END 9 */
}
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	4770      	bx	lr

08005f90 <CUSTOM_HID_OutEvent_HS>:
static int8_t CUSTOM_HID_OutEvent_HS(uint8_t event_idx, uint8_t state)
{
  /* USER CODE BEGIN 10 */
  return (USBD_OK);
  /* USER CODE END 10 */
}
 8005f90:	2000      	movs	r0, #0
 8005f92:	4770      	bx	lr

08005f94 <CUSTOM_HID_Init_HS>:
 8005f94:	2000      	movs	r0, #0
 8005f96:	4770      	bx	lr

08005f98 <USBD_HS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_HS_DeviceDesc);
 8005f98:	2312      	movs	r3, #18
 8005f9a:	800b      	strh	r3, [r1, #0]
  return USBD_HS_DeviceDesc;
}
 8005f9c:	4800      	ldr	r0, [pc, #0]	; (8005fa0 <USBD_HS_DeviceDescriptor+0x8>)
 8005f9e:	4770      	bx	lr
 8005fa0:	200000c0 	.word	0x200000c0

08005fa4 <USBD_HS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8005fa8:	4800      	ldr	r0, [pc, #0]	; (8005fac <USBD_HS_LangIDStrDescriptor+0x8>)
 8005faa:	4770      	bx	lr
 8005fac:	200000d4 	.word	0x200000d4

08005fb0 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fb0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005fb2:	4c04      	ldr	r4, [pc, #16]	; (8005fc4 <USBD_HS_ManufacturerStrDescriptor+0x14>)
 8005fb4:	4804      	ldr	r0, [pc, #16]	; (8005fc8 <USBD_HS_ManufacturerStrDescriptor+0x18>)
 8005fb6:	460a      	mov	r2, r1
 8005fb8:	4621      	mov	r1, r4
 8005fba:	f7fe fa67 	bl	800448c <USBD_GetString>
  return USBD_StrDesc;
}
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	bd10      	pop	{r4, pc}
 8005fc2:	bf00      	nop
 8005fc4:	200048d0 	.word	0x200048d0
 8005fc8:	08006915 	.word	0x08006915

08005fcc <USBD_HS_ProductStrDescriptor>:
{
 8005fcc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8005fce:	4c04      	ldr	r4, [pc, #16]	; (8005fe0 <USBD_HS_ProductStrDescriptor+0x14>)
 8005fd0:	4804      	ldr	r0, [pc, #16]	; (8005fe4 <USBD_HS_ProductStrDescriptor+0x18>)
 8005fd2:	460a      	mov	r2, r1
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	f7fe fa59 	bl	800448c <USBD_GetString>
}
 8005fda:	4620      	mov	r0, r4
 8005fdc:	bd10      	pop	{r4, pc}
 8005fde:	bf00      	nop
 8005fe0:	200048d0 	.word	0x200048d0
 8005fe4:	08006928 	.word	0x08006928

08005fe8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fe8:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);
 8005fea:	4c04      	ldr	r4, [pc, #16]	; (8005ffc <USBD_HS_SerialStrDescriptor+0x14>)
 8005fec:	4804      	ldr	r0, [pc, #16]	; (8006000 <USBD_HS_SerialStrDescriptor+0x18>)
 8005fee:	460a      	mov	r2, r1
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	f7fe fa4b 	bl	800448c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	bd10      	pop	{r4, pc}
 8005ffa:	bf00      	nop
 8005ffc:	200048d0 	.word	0x200048d0
 8006000:	08006945 	.word	0x08006945

08006004 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006004:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8006006:	4c04      	ldr	r4, [pc, #16]	; (8006018 <USBD_HS_ConfigStrDescriptor+0x14>)
 8006008:	4804      	ldr	r0, [pc, #16]	; (800601c <USBD_HS_ConfigStrDescriptor+0x18>)
 800600a:	460a      	mov	r2, r1
 800600c:	4621      	mov	r1, r4
 800600e:	f7fe fa3d 	bl	800448c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8006012:	4620      	mov	r0, r4
 8006014:	bd10      	pop	{r4, pc}
 8006016:	bf00      	nop
 8006018:	200048d0 	.word	0x200048d0
 800601c:	080068ee 	.word	0x080068ee

08006020 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006020:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8006022:	4c04      	ldr	r4, [pc, #16]	; (8006034 <USBD_HS_InterfaceStrDescriptor+0x14>)
 8006024:	4804      	ldr	r0, [pc, #16]	; (8006038 <USBD_HS_InterfaceStrDescriptor+0x18>)
 8006026:	460a      	mov	r2, r1
 8006028:	4621      	mov	r1, r4
 800602a:	f7fe fa2f 	bl	800448c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800602e:	4620      	mov	r0, r4
 8006030:	bd10      	pop	{r4, pc}
 8006032:	bf00      	nop
 8006034:	200048d0 	.word	0x200048d0
 8006038:	08006900 	.word	0x08006900

0800603c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800603c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006074 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006040:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006042:	e003      	b.n	800604c <LoopCopyDataInit>

08006044 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006044:	4b0c      	ldr	r3, [pc, #48]	; (8006078 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006046:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006048:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800604a:	3104      	adds	r1, #4

0800604c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800604c:	480b      	ldr	r0, [pc, #44]	; (800607c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800604e:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006050:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006052:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006054:	d3f6      	bcc.n	8006044 <CopyDataInit>
  ldr  r2, =_sbss
 8006056:	4a0b      	ldr	r2, [pc, #44]	; (8006084 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006058:	e002      	b.n	8006060 <LoopFillZerobss>

0800605a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800605a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800605c:	f842 3b04 	str.w	r3, [r2], #4

08006060 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006060:	4b09      	ldr	r3, [pc, #36]	; (8006088 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006062:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006064:	d3f9      	bcc.n	800605a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006066:	f7ff fd9b 	bl	8005ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800606a:	f000 fa85 	bl	8006578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800606e:	f7ff fb7d 	bl	800576c <main>
  bx  lr    
 8006072:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006074:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8006078:	08006c28 	.word	0x08006c28
  ldr  r0, =_sdata
 800607c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006080:	2000013c 	.word	0x2000013c
  ldr  r2, =_sbss
 8006084:	2000013c 	.word	0x2000013c
  ldr  r3, = _ebss
 8006088:	20004ad4 	.word	0x20004ad4

0800608c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800608c:	e7fe      	b.n	800608c <ADC_IRQHandler>
	...

08006090 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8006090:	b510      	push	{r4, lr}
 8006092:	4b03      	ldr	r3, [pc, #12]	; (80060a0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8006094:	6003      	str	r3, [r0, #0]
 8006096:	4604      	mov	r4, r0
 8006098:	f000 f8a4 	bl	80061e4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800609c:	4620      	mov	r0, r4
 800609e:	bd10      	pop	{r4, pc}
 80060a0:	08006990 	.word	0x08006990

080060a4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80060a4:	b510      	push	{r4, lr}
 80060a6:	4604      	mov	r4, r0
 80060a8:	f7ff fff2 	bl	8006090 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80060ac:	4620      	mov	r0, r4
 80060ae:	210c      	movs	r1, #12
 80060b0:	f000 f876 	bl	80061a0 <_ZdlPvj>
 80060b4:	4620      	mov	r0, r4
 80060b6:	bd10      	pop	{r4, pc}

080060b8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80060b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060bc:	9e06      	ldr	r6, [sp, #24]
 80060be:	4296      	cmp	r6, r2
 80060c0:	4680      	mov	r8, r0
 80060c2:	460f      	mov	r7, r1
 80060c4:	4614      	mov	r4, r2
 80060c6:	461d      	mov	r5, r3
 80060c8:	d103      	bne.n	80060d2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 80060ca:	4619      	mov	r1, r3
 80060cc:	f000 f8de 	bl	800628c <_ZNKSt9type_infoeqERKS_>
 80060d0:	b958      	cbnz	r0, 80060ea <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 80060d2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80060d6:	6803      	ldr	r3, [r0, #0]
 80060d8:	9606      	str	r6, [sp, #24]
 80060da:	6a1e      	ldr	r6, [r3, #32]
 80060dc:	4622      	mov	r2, r4
 80060de:	462b      	mov	r3, r5
 80060e0:	4639      	mov	r1, r7
 80060e2:	46b4      	mov	ip, r6
 80060e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060e8:	4760      	bx	ip
 80060ea:	2006      	movs	r0, #6
 80060ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080060f0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80060f0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f4:	460e      	mov	r6, r1
 80060f6:	4619      	mov	r1, r3
 80060f8:	4683      	mov	fp, r0
 80060fa:	4617      	mov	r7, r2
 80060fc:	4699      	mov	r9, r3
 80060fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006100:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8006104:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8006108:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800610a:	f000 f8bf 	bl	800628c <_ZNKSt9type_infoeqERKS_>
 800610e:	b190      	cbz	r0, 8006136 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 8006110:	2e00      	cmp	r6, #0
 8006112:	602c      	str	r4, [r5, #0]
 8006114:	712f      	strb	r7, [r5, #4]
 8006116:	db09      	blt.n	800612c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8006118:	4434      	add	r4, r6
 800611a:	45a0      	cmp	r8, r4
 800611c:	bf0c      	ite	eq
 800611e:	2406      	moveq	r4, #6
 8006120:	2401      	movne	r4, #1
 8006122:	71ac      	strb	r4, [r5, #6]
 8006124:	2000      	movs	r0, #0
 8006126:	b001      	add	sp, #4
 8006128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612c:	3602      	adds	r6, #2
 800612e:	d1f9      	bne.n	8006124 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8006130:	2301      	movs	r3, #1
 8006132:	71ab      	strb	r3, [r5, #6]
 8006134:	e7f6      	b.n	8006124 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8006136:	4544      	cmp	r4, r8
 8006138:	d104      	bne.n	8006144 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800613a:	4651      	mov	r1, sl
 800613c:	4658      	mov	r0, fp
 800613e:	f000 f8a5 	bl	800628c <_ZNKSt9type_infoeqERKS_>
 8006142:	b988      	cbnz	r0, 8006168 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 8006144:	f8db 0008 	ldr.w	r0, [fp, #8]
 8006148:	6803      	ldr	r3, [r0, #0]
 800614a:	950d      	str	r5, [sp, #52]	; 0x34
 800614c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006150:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8006154:	940a      	str	r4, [sp, #40]	; 0x28
 8006156:	69dc      	ldr	r4, [r3, #28]
 8006158:	463a      	mov	r2, r7
 800615a:	464b      	mov	r3, r9
 800615c:	4631      	mov	r1, r6
 800615e:	46a4      	mov	ip, r4
 8006160:	b001      	add	sp, #4
 8006162:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006166:	4760      	bx	ip
 8006168:	716f      	strb	r7, [r5, #5]
 800616a:	e7db      	b.n	8006124 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

0800616c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800616c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006170:	4604      	mov	r4, r0
 8006172:	460d      	mov	r5, r1
 8006174:	4616      	mov	r6, r2
 8006176:	461f      	mov	r7, r3
 8006178:	f000 f848 	bl	800620c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800617c:	b948      	cbnz	r0, 8006192 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800617e:	68a0      	ldr	r0, [r4, #8]
 8006180:	6803      	ldr	r3, [r0, #0]
 8006182:	699c      	ldr	r4, [r3, #24]
 8006184:	4632      	mov	r2, r6
 8006186:	463b      	mov	r3, r7
 8006188:	4629      	mov	r1, r5
 800618a:	46a4      	mov	ip, r4
 800618c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006190:	4760      	bx	ip
 8006192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006196 <__aeabi_atexit>:
 8006196:	460b      	mov	r3, r1
 8006198:	4601      	mov	r1, r0
 800619a:	4618      	mov	r0, r3
 800619c:	f000 b9de 	b.w	800655c <__cxa_atexit>

080061a0 <_ZdlPvj>:
 80061a0:	f000 b88a 	b.w	80062b8 <_ZdlPv>

080061a4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80061a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80061a6:	2310      	movs	r3, #16
 80061a8:	9302      	str	r3, [sp, #8]
 80061aa:	6803      	ldr	r3, [r0, #0]
 80061ac:	2400      	movs	r4, #0
 80061ae:	4615      	mov	r5, r2
 80061b0:	699e      	ldr	r6, [r3, #24]
 80061b2:	9400      	str	r4, [sp, #0]
 80061b4:	466b      	mov	r3, sp
 80061b6:	f88d 4004 	strb.w	r4, [sp, #4]
 80061ba:	9403      	str	r4, [sp, #12]
 80061bc:	6812      	ldr	r2, [r2, #0]
 80061be:	47b0      	blx	r6
 80061c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80061c4:	f003 0306 	and.w	r3, r3, #6
 80061c8:	2b06      	cmp	r3, #6
 80061ca:	bf03      	ittte	eq
 80061cc:	9b00      	ldreq	r3, [sp, #0]
 80061ce:	602b      	streq	r3, [r5, #0]
 80061d0:	2001      	moveq	r0, #1
 80061d2:	4620      	movne	r0, r4
 80061d4:	b004      	add	sp, #16
 80061d6:	bd70      	pop	{r4, r5, r6, pc}

080061d8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80061d8:	9800      	ldr	r0, [sp, #0]
 80061da:	4290      	cmp	r0, r2
 80061dc:	bf0c      	ite	eq
 80061de:	2006      	moveq	r0, #6
 80061e0:	2001      	movne	r0, #1
 80061e2:	4770      	bx	lr

080061e4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80061e4:	b510      	push	{r4, lr}
 80061e6:	4b03      	ldr	r3, [pc, #12]	; (80061f4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80061e8:	6003      	str	r3, [r0, #0]
 80061ea:	4604      	mov	r4, r0
 80061ec:	f000 f84b 	bl	8006286 <_ZNSt9type_infoD1Ev>
 80061f0:	4620      	mov	r0, r4
 80061f2:	bd10      	pop	{r4, pc}
 80061f4:	080069ec 	.word	0x080069ec

080061f8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80061f8:	b510      	push	{r4, lr}
 80061fa:	4604      	mov	r4, r0
 80061fc:	f7ff fff2 	bl	80061e4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8006200:	4620      	mov	r0, r4
 8006202:	2108      	movs	r1, #8
 8006204:	f7ff ffcc 	bl	80061a0 <_ZdlPvj>
 8006208:	4620      	mov	r0, r4
 800620a:	bd10      	pop	{r4, pc}

0800620c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	4615      	mov	r5, r2
 8006210:	461c      	mov	r4, r3
 8006212:	f000 f83b 	bl	800628c <_ZNKSt9type_infoeqERKS_>
 8006216:	b120      	cbz	r0, 8006222 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8006218:	2308      	movs	r3, #8
 800621a:	60e3      	str	r3, [r4, #12]
 800621c:	2306      	movs	r3, #6
 800621e:	6025      	str	r5, [r4, #0]
 8006220:	7123      	strb	r3, [r4, #4]
 8006222:	bd38      	pop	{r3, r4, r5, pc}

08006224 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8006224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006228:	4605      	mov	r5, r0
 800622a:	460c      	mov	r4, r1
 800622c:	4616      	mov	r6, r2
 800622e:	461f      	mov	r7, r3
 8006230:	f000 f82c 	bl	800628c <_ZNKSt9type_infoeqERKS_>
 8006234:	b948      	cbnz	r0, 800624a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8006236:	2f03      	cmp	r7, #3
 8006238:	d807      	bhi.n	800624a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	4632      	mov	r2, r6
 800623e:	4629      	mov	r1, r5
 8006240:	4620      	mov	r0, r4
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006248:	4718      	bx	r3
 800624a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800624e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800624e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006252:	9e06      	ldr	r6, [sp, #24]
 8006254:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006256:	4698      	mov	r8, r3
 8006258:	9b08      	ldr	r3, [sp, #32]
 800625a:	429e      	cmp	r6, r3
 800625c:	4607      	mov	r7, r0
 800625e:	4615      	mov	r5, r2
 8006260:	d103      	bne.n	800626a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 8006262:	9907      	ldr	r1, [sp, #28]
 8006264:	f000 f812 	bl	800628c <_ZNKSt9type_infoeqERKS_>
 8006268:	b958      	cbnz	r0, 8006282 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 800626a:	4641      	mov	r1, r8
 800626c:	4638      	mov	r0, r7
 800626e:	f000 f80d 	bl	800628c <_ZNKSt9type_infoeqERKS_>
 8006272:	b118      	cbz	r0, 800627c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8006274:	2301      	movs	r3, #1
 8006276:	6026      	str	r6, [r4, #0]
 8006278:	7125      	strb	r5, [r4, #4]
 800627a:	71a3      	strb	r3, [r4, #6]
 800627c:	2000      	movs	r0, #0
 800627e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006282:	7165      	strb	r5, [r4, #5]
 8006284:	e7fa      	b.n	800627c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

08006286 <_ZNSt9type_infoD1Ev>:
 8006286:	4770      	bx	lr

08006288 <_ZNKSt9type_info14__is_pointer_pEv>:
 8006288:	2000      	movs	r0, #0
 800628a:	4770      	bx	lr

0800628c <_ZNKSt9type_infoeqERKS_>:
 800628c:	4281      	cmp	r1, r0
 800628e:	b508      	push	{r3, lr}
 8006290:	d00e      	beq.n	80062b0 <_ZNKSt9type_infoeqERKS_+0x24>
 8006292:	6840      	ldr	r0, [r0, #4]
 8006294:	7803      	ldrb	r3, [r0, #0]
 8006296:	2b2a      	cmp	r3, #42	; 0x2a
 8006298:	d00c      	beq.n	80062b4 <_ZNKSt9type_infoeqERKS_+0x28>
 800629a:	6849      	ldr	r1, [r1, #4]
 800629c:	780b      	ldrb	r3, [r1, #0]
 800629e:	2b2a      	cmp	r3, #42	; 0x2a
 80062a0:	bf08      	it	eq
 80062a2:	3101      	addeq	r1, #1
 80062a4:	f7f9 ffa4 	bl	80001f0 <strcmp>
 80062a8:	fab0 f080 	clz	r0, r0
 80062ac:	0940      	lsrs	r0, r0, #5
 80062ae:	bd08      	pop	{r3, pc}
 80062b0:	2001      	movs	r0, #1
 80062b2:	bd08      	pop	{r3, pc}
 80062b4:	2000      	movs	r0, #0
 80062b6:	bd08      	pop	{r3, pc}

080062b8 <_ZdlPv>:
 80062b8:	f000 b98a 	b.w	80065d0 <free>

080062bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80062bc:	4b24      	ldr	r3, [pc, #144]	; (8006350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	07d0      	lsls	r0, r2, #31
 80062c2:	bf5c      	itt	pl
 80062c4:	2201      	movpl	r2, #1
 80062c6:	601a      	strpl	r2, [r3, #0]
 80062c8:	4b22      	ldr	r3, [pc, #136]	; (8006354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	07d1      	lsls	r1, r2, #31
 80062ce:	bf5c      	itt	pl
 80062d0:	2201      	movpl	r2, #1
 80062d2:	601a      	strpl	r2, [r3, #0]
 80062d4:	4b20      	ldr	r3, [pc, #128]	; (8006358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	07d2      	lsls	r2, r2, #31
 80062da:	bf5c      	itt	pl
 80062dc:	2201      	movpl	r2, #1
 80062de:	601a      	strpl	r2, [r3, #0]
 80062e0:	4b1e      	ldr	r3, [pc, #120]	; (800635c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	07d0      	lsls	r0, r2, #31
 80062e6:	bf5c      	itt	pl
 80062e8:	2201      	movpl	r2, #1
 80062ea:	601a      	strpl	r2, [r3, #0]
 80062ec:	4b1c      	ldr	r3, [pc, #112]	; (8006360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	07d1      	lsls	r1, r2, #31
 80062f2:	bf5c      	itt	pl
 80062f4:	2201      	movpl	r2, #1
 80062f6:	601a      	strpl	r2, [r3, #0]
 80062f8:	4b1a      	ldr	r3, [pc, #104]	; (8006364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	07d2      	lsls	r2, r2, #31
 80062fe:	bf5c      	itt	pl
 8006300:	2201      	movpl	r2, #1
 8006302:	601a      	strpl	r2, [r3, #0]
 8006304:	4b18      	ldr	r3, [pc, #96]	; (8006368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	07d0      	lsls	r0, r2, #31
 800630a:	bf5c      	itt	pl
 800630c:	2201      	movpl	r2, #1
 800630e:	601a      	strpl	r2, [r3, #0]
 8006310:	4b16      	ldr	r3, [pc, #88]	; (800636c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	07d1      	lsls	r1, r2, #31
 8006316:	bf5c      	itt	pl
 8006318:	2201      	movpl	r2, #1
 800631a:	601a      	strpl	r2, [r3, #0]
 800631c:	4b14      	ldr	r3, [pc, #80]	; (8006370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	07d2      	lsls	r2, r2, #31
 8006322:	bf5c      	itt	pl
 8006324:	2201      	movpl	r2, #1
 8006326:	601a      	strpl	r2, [r3, #0]
 8006328:	4b12      	ldr	r3, [pc, #72]	; (8006374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	07d0      	lsls	r0, r2, #31
 800632e:	bf5c      	itt	pl
 8006330:	2201      	movpl	r2, #1
 8006332:	601a      	strpl	r2, [r3, #0]
 8006334:	4b10      	ldr	r3, [pc, #64]	; (8006378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	07d1      	lsls	r1, r2, #31
 800633a:	bf5c      	itt	pl
 800633c:	2201      	movpl	r2, #1
 800633e:	601a      	strpl	r2, [r3, #0]
 8006340:	4b0e      	ldr	r3, [pc, #56]	; (800637c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	07d2      	lsls	r2, r2, #31
 8006346:	bf5c      	itt	pl
 8006348:	2201      	movpl	r2, #1
 800634a:	601a      	strpl	r2, [r3, #0]
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	20003f18 	.word	0x20003f18
 8006354:	20003f14 	.word	0x20003f14
 8006358:	20003f10 	.word	0x20003f10
 800635c:	20003f0c 	.word	0x20003f0c
 8006360:	20003f08 	.word	0x20003f08
 8006364:	20003f04 	.word	0x20003f04
 8006368:	20003f00 	.word	0x20003f00
 800636c:	20003efc 	.word	0x20003efc
 8006370:	20003ef8 	.word	0x20003ef8
 8006374:	20003ef4 	.word	0x20003ef4
 8006378:	20003ef0 	.word	0x20003ef0
 800637c:	20003eec 	.word	0x20003eec

08006380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8006380:	4b18      	ldr	r3, [pc, #96]	; (80063e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	07d1      	lsls	r1, r2, #31
 8006386:	bf5c      	itt	pl
 8006388:	2201      	movpl	r2, #1
 800638a:	601a      	strpl	r2, [r3, #0]
 800638c:	4b16      	ldr	r3, [pc, #88]	; (80063e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	07d2      	lsls	r2, r2, #31
 8006392:	bf5c      	itt	pl
 8006394:	2201      	movpl	r2, #1
 8006396:	601a      	strpl	r2, [r3, #0]
 8006398:	4b14      	ldr	r3, [pc, #80]	; (80063ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	07d0      	lsls	r0, r2, #31
 800639e:	bf5c      	itt	pl
 80063a0:	2201      	movpl	r2, #1
 80063a2:	601a      	strpl	r2, [r3, #0]
 80063a4:	4b12      	ldr	r3, [pc, #72]	; (80063f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	07d1      	lsls	r1, r2, #31
 80063aa:	bf5c      	itt	pl
 80063ac:	2201      	movpl	r2, #1
 80063ae:	601a      	strpl	r2, [r3, #0]
 80063b0:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	07d2      	lsls	r2, r2, #31
 80063b6:	bf5c      	itt	pl
 80063b8:	2201      	movpl	r2, #1
 80063ba:	601a      	strpl	r2, [r3, #0]
 80063bc:	4b0e      	ldr	r3, [pc, #56]	; (80063f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	07d0      	lsls	r0, r2, #31
 80063c2:	bf5c      	itt	pl
 80063c4:	2201      	movpl	r2, #1
 80063c6:	601a      	strpl	r2, [r3, #0]
 80063c8:	4b0c      	ldr	r3, [pc, #48]	; (80063fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	07d1      	lsls	r1, r2, #31
 80063ce:	bf5c      	itt	pl
 80063d0:	2201      	movpl	r2, #1
 80063d2:	601a      	strpl	r2, [r3, #0]
 80063d4:	4b0a      	ldr	r3, [pc, #40]	; (8006400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	07d2      	lsls	r2, r2, #31
 80063da:	bf5c      	itt	pl
 80063dc:	2201      	movpl	r2, #1
 80063de:	601a      	strpl	r2, [r3, #0]
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	20003f38 	.word	0x20003f38
 80063e8:	20003f34 	.word	0x20003f34
 80063ec:	20003f30 	.word	0x20003f30
 80063f0:	20003f2c 	.word	0x20003f2c
 80063f4:	20003f28 	.word	0x20003f28
 80063f8:	20003f24 	.word	0x20003f24
 80063fc:	20003f20 	.word	0x20003f20
 8006400:	20003f1c 	.word	0x20003f1c

08006404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8006404:	4b24      	ldr	r3, [pc, #144]	; (8006498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	07d0      	lsls	r0, r2, #31
 800640a:	bf5c      	itt	pl
 800640c:	2201      	movpl	r2, #1
 800640e:	601a      	strpl	r2, [r3, #0]
 8006410:	4b22      	ldr	r3, [pc, #136]	; (800649c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	07d1      	lsls	r1, r2, #31
 8006416:	bf5c      	itt	pl
 8006418:	2201      	movpl	r2, #1
 800641a:	601a      	strpl	r2, [r3, #0]
 800641c:	4b20      	ldr	r3, [pc, #128]	; (80064a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	07d2      	lsls	r2, r2, #31
 8006422:	bf5c      	itt	pl
 8006424:	2201      	movpl	r2, #1
 8006426:	601a      	strpl	r2, [r3, #0]
 8006428:	4b1e      	ldr	r3, [pc, #120]	; (80064a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	07d0      	lsls	r0, r2, #31
 800642e:	bf5c      	itt	pl
 8006430:	2201      	movpl	r2, #1
 8006432:	601a      	strpl	r2, [r3, #0]
 8006434:	4b1c      	ldr	r3, [pc, #112]	; (80064a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	07d1      	lsls	r1, r2, #31
 800643a:	bf5c      	itt	pl
 800643c:	2201      	movpl	r2, #1
 800643e:	601a      	strpl	r2, [r3, #0]
 8006440:	4b1a      	ldr	r3, [pc, #104]	; (80064ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	07d2      	lsls	r2, r2, #31
 8006446:	bf5c      	itt	pl
 8006448:	2201      	movpl	r2, #1
 800644a:	601a      	strpl	r2, [r3, #0]
 800644c:	4b18      	ldr	r3, [pc, #96]	; (80064b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	07d0      	lsls	r0, r2, #31
 8006452:	bf5c      	itt	pl
 8006454:	2201      	movpl	r2, #1
 8006456:	601a      	strpl	r2, [r3, #0]
 8006458:	4b16      	ldr	r3, [pc, #88]	; (80064b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	07d1      	lsls	r1, r2, #31
 800645e:	bf5c      	itt	pl
 8006460:	2201      	movpl	r2, #1
 8006462:	601a      	strpl	r2, [r3, #0]
 8006464:	4b14      	ldr	r3, [pc, #80]	; (80064b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	07d2      	lsls	r2, r2, #31
 800646a:	bf5c      	itt	pl
 800646c:	2201      	movpl	r2, #1
 800646e:	601a      	strpl	r2, [r3, #0]
 8006470:	4b12      	ldr	r3, [pc, #72]	; (80064bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	07d0      	lsls	r0, r2, #31
 8006476:	bf5c      	itt	pl
 8006478:	2201      	movpl	r2, #1
 800647a:	601a      	strpl	r2, [r3, #0]
 800647c:	4b10      	ldr	r3, [pc, #64]	; (80064c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	07d1      	lsls	r1, r2, #31
 8006482:	bf5c      	itt	pl
 8006484:	2201      	movpl	r2, #1
 8006486:	601a      	strpl	r2, [r3, #0]
 8006488:	4b0e      	ldr	r3, [pc, #56]	; (80064c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	07d2      	lsls	r2, r2, #31
 800648e:	bf5c      	itt	pl
 8006490:	2201      	movpl	r2, #1
 8006492:	601a      	strpl	r2, [r3, #0]
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	20003f68 	.word	0x20003f68
 800649c:	20003f64 	.word	0x20003f64
 80064a0:	20003f60 	.word	0x20003f60
 80064a4:	20003f5c 	.word	0x20003f5c
 80064a8:	20003f58 	.word	0x20003f58
 80064ac:	20003f54 	.word	0x20003f54
 80064b0:	20003f50 	.word	0x20003f50
 80064b4:	20003f4c 	.word	0x20003f4c
 80064b8:	20003f48 	.word	0x20003f48
 80064bc:	20003f44 	.word	0x20003f44
 80064c0:	20003f40 	.word	0x20003f40
 80064c4:	20003f3c 	.word	0x20003f3c

080064c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80064c8:	4b18      	ldr	r3, [pc, #96]	; (800652c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	07d1      	lsls	r1, r2, #31
 80064ce:	bf5c      	itt	pl
 80064d0:	2201      	movpl	r2, #1
 80064d2:	601a      	strpl	r2, [r3, #0]
 80064d4:	4b16      	ldr	r3, [pc, #88]	; (8006530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	07d2      	lsls	r2, r2, #31
 80064da:	bf5c      	itt	pl
 80064dc:	2201      	movpl	r2, #1
 80064de:	601a      	strpl	r2, [r3, #0]
 80064e0:	4b14      	ldr	r3, [pc, #80]	; (8006534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	07d0      	lsls	r0, r2, #31
 80064e6:	bf5c      	itt	pl
 80064e8:	2201      	movpl	r2, #1
 80064ea:	601a      	strpl	r2, [r3, #0]
 80064ec:	4b12      	ldr	r3, [pc, #72]	; (8006538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	07d1      	lsls	r1, r2, #31
 80064f2:	bf5c      	itt	pl
 80064f4:	2201      	movpl	r2, #1
 80064f6:	601a      	strpl	r2, [r3, #0]
 80064f8:	4b10      	ldr	r3, [pc, #64]	; (800653c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	07d2      	lsls	r2, r2, #31
 80064fe:	bf5c      	itt	pl
 8006500:	2201      	movpl	r2, #1
 8006502:	601a      	strpl	r2, [r3, #0]
 8006504:	4b0e      	ldr	r3, [pc, #56]	; (8006540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	07d0      	lsls	r0, r2, #31
 800650a:	bf5c      	itt	pl
 800650c:	2201      	movpl	r2, #1
 800650e:	601a      	strpl	r2, [r3, #0]
 8006510:	4b0c      	ldr	r3, [pc, #48]	; (8006544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	07d1      	lsls	r1, r2, #31
 8006516:	bf5c      	itt	pl
 8006518:	2201      	movpl	r2, #1
 800651a:	601a      	strpl	r2, [r3, #0]
 800651c:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	07d2      	lsls	r2, r2, #31
 8006522:	bf5c      	itt	pl
 8006524:	2201      	movpl	r2, #1
 8006526:	601a      	strpl	r2, [r3, #0]
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	20003f88 	.word	0x20003f88
 8006530:	20003f84 	.word	0x20003f84
 8006534:	20003f80 	.word	0x20003f80
 8006538:	20003f7c 	.word	0x20003f7c
 800653c:	20003f78 	.word	0x20003f78
 8006540:	20003f74 	.word	0x20003f74
 8006544:	20003f70 	.word	0x20003f70
 8006548:	20003f6c 	.word	0x20003f6c

0800654c <abort>:
 800654c:	b508      	push	{r3, lr}
 800654e:	2006      	movs	r0, #6
 8006550:	f000 f93e 	bl	80067d0 <raise>
 8006554:	2001      	movs	r0, #1
 8006556:	f000 f977 	bl	8006848 <_exit>
	...

0800655c <__cxa_atexit>:
 800655c:	b510      	push	{r4, lr}
 800655e:	4c05      	ldr	r4, [pc, #20]	; (8006574 <__cxa_atexit+0x18>)
 8006560:	4613      	mov	r3, r2
 8006562:	b12c      	cbz	r4, 8006570 <__cxa_atexit+0x14>
 8006564:	460a      	mov	r2, r1
 8006566:	4601      	mov	r1, r0
 8006568:	2002      	movs	r0, #2
 800656a:	f3af 8000 	nop.w
 800656e:	bd10      	pop	{r4, pc}
 8006570:	4620      	mov	r0, r4
 8006572:	bd10      	pop	{r4, pc}
 8006574:	00000000 	.word	0x00000000

08006578 <__libc_init_array>:
 8006578:	b570      	push	{r4, r5, r6, lr}
 800657a:	4e0d      	ldr	r6, [pc, #52]	; (80065b0 <__libc_init_array+0x38>)
 800657c:	4c0d      	ldr	r4, [pc, #52]	; (80065b4 <__libc_init_array+0x3c>)
 800657e:	1ba4      	subs	r4, r4, r6
 8006580:	10a4      	asrs	r4, r4, #2
 8006582:	2500      	movs	r5, #0
 8006584:	42a5      	cmp	r5, r4
 8006586:	d109      	bne.n	800659c <__libc_init_array+0x24>
 8006588:	4e0b      	ldr	r6, [pc, #44]	; (80065b8 <__libc_init_array+0x40>)
 800658a:	4c0c      	ldr	r4, [pc, #48]	; (80065bc <__libc_init_array+0x44>)
 800658c:	f000 f95e 	bl	800684c <_init>
 8006590:	1ba4      	subs	r4, r4, r6
 8006592:	10a4      	asrs	r4, r4, #2
 8006594:	2500      	movs	r5, #0
 8006596:	42a5      	cmp	r5, r4
 8006598:	d105      	bne.n	80065a6 <__libc_init_array+0x2e>
 800659a:	bd70      	pop	{r4, r5, r6, pc}
 800659c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065a0:	4798      	blx	r3
 80065a2:	3501      	adds	r5, #1
 80065a4:	e7ee      	b.n	8006584 <__libc_init_array+0xc>
 80065a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065aa:	4798      	blx	r3
 80065ac:	3501      	adds	r5, #1
 80065ae:	e7f2      	b.n	8006596 <__libc_init_array+0x1e>
 80065b0:	08006c0c 	.word	0x08006c0c
 80065b4:	08006c0c 	.word	0x08006c0c
 80065b8:	08006c0c 	.word	0x08006c0c
 80065bc:	08006c24 	.word	0x08006c24

080065c0 <malloc>:
 80065c0:	4b02      	ldr	r3, [pc, #8]	; (80065cc <malloc+0xc>)
 80065c2:	4601      	mov	r1, r0
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	f000 b86d 	b.w	80066a4 <_malloc_r>
 80065ca:	bf00      	nop
 80065cc:	200000d8 	.word	0x200000d8

080065d0 <free>:
 80065d0:	4b02      	ldr	r3, [pc, #8]	; (80065dc <free+0xc>)
 80065d2:	4601      	mov	r1, r0
 80065d4:	6818      	ldr	r0, [r3, #0]
 80065d6:	f000 b817 	b.w	8006608 <_free_r>
 80065da:	bf00      	nop
 80065dc:	200000d8 	.word	0x200000d8

080065e0 <memcpy>:
 80065e0:	b510      	push	{r4, lr}
 80065e2:	1e43      	subs	r3, r0, #1
 80065e4:	440a      	add	r2, r1
 80065e6:	4291      	cmp	r1, r2
 80065e8:	d100      	bne.n	80065ec <memcpy+0xc>
 80065ea:	bd10      	pop	{r4, pc}
 80065ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065f4:	e7f7      	b.n	80065e6 <memcpy+0x6>

080065f6 <memset>:
 80065f6:	4402      	add	r2, r0
 80065f8:	4603      	mov	r3, r0
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d100      	bne.n	8006600 <memset+0xa>
 80065fe:	4770      	bx	lr
 8006600:	f803 1b01 	strb.w	r1, [r3], #1
 8006604:	e7f9      	b.n	80065fa <memset+0x4>
	...

08006608 <_free_r>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	4605      	mov	r5, r0
 800660c:	2900      	cmp	r1, #0
 800660e:	d045      	beq.n	800669c <_free_r+0x94>
 8006610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006614:	1f0c      	subs	r4, r1, #4
 8006616:	2b00      	cmp	r3, #0
 8006618:	bfb8      	it	lt
 800661a:	18e4      	addlt	r4, r4, r3
 800661c:	f000 f8f4 	bl	8006808 <__malloc_lock>
 8006620:	4a1f      	ldr	r2, [pc, #124]	; (80066a0 <_free_r+0x98>)
 8006622:	6813      	ldr	r3, [r2, #0]
 8006624:	4610      	mov	r0, r2
 8006626:	b933      	cbnz	r3, 8006636 <_free_r+0x2e>
 8006628:	6063      	str	r3, [r4, #4]
 800662a:	6014      	str	r4, [r2, #0]
 800662c:	4628      	mov	r0, r5
 800662e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006632:	f000 b8ea 	b.w	800680a <__malloc_unlock>
 8006636:	42a3      	cmp	r3, r4
 8006638:	d90c      	bls.n	8006654 <_free_r+0x4c>
 800663a:	6821      	ldr	r1, [r4, #0]
 800663c:	1862      	adds	r2, r4, r1
 800663e:	4293      	cmp	r3, r2
 8006640:	bf04      	itt	eq
 8006642:	681a      	ldreq	r2, [r3, #0]
 8006644:	685b      	ldreq	r3, [r3, #4]
 8006646:	6063      	str	r3, [r4, #4]
 8006648:	bf04      	itt	eq
 800664a:	1852      	addeq	r2, r2, r1
 800664c:	6022      	streq	r2, [r4, #0]
 800664e:	6004      	str	r4, [r0, #0]
 8006650:	e7ec      	b.n	800662c <_free_r+0x24>
 8006652:	4613      	mov	r3, r2
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	b10a      	cbz	r2, 800665c <_free_r+0x54>
 8006658:	42a2      	cmp	r2, r4
 800665a:	d9fa      	bls.n	8006652 <_free_r+0x4a>
 800665c:	6819      	ldr	r1, [r3, #0]
 800665e:	1858      	adds	r0, r3, r1
 8006660:	42a0      	cmp	r0, r4
 8006662:	d10b      	bne.n	800667c <_free_r+0x74>
 8006664:	6820      	ldr	r0, [r4, #0]
 8006666:	4401      	add	r1, r0
 8006668:	1858      	adds	r0, r3, r1
 800666a:	4282      	cmp	r2, r0
 800666c:	6019      	str	r1, [r3, #0]
 800666e:	d1dd      	bne.n	800662c <_free_r+0x24>
 8006670:	6810      	ldr	r0, [r2, #0]
 8006672:	6852      	ldr	r2, [r2, #4]
 8006674:	605a      	str	r2, [r3, #4]
 8006676:	4401      	add	r1, r0
 8006678:	6019      	str	r1, [r3, #0]
 800667a:	e7d7      	b.n	800662c <_free_r+0x24>
 800667c:	d902      	bls.n	8006684 <_free_r+0x7c>
 800667e:	230c      	movs	r3, #12
 8006680:	602b      	str	r3, [r5, #0]
 8006682:	e7d3      	b.n	800662c <_free_r+0x24>
 8006684:	6820      	ldr	r0, [r4, #0]
 8006686:	1821      	adds	r1, r4, r0
 8006688:	428a      	cmp	r2, r1
 800668a:	bf04      	itt	eq
 800668c:	6811      	ldreq	r1, [r2, #0]
 800668e:	6852      	ldreq	r2, [r2, #4]
 8006690:	6062      	str	r2, [r4, #4]
 8006692:	bf04      	itt	eq
 8006694:	1809      	addeq	r1, r1, r0
 8006696:	6021      	streq	r1, [r4, #0]
 8006698:	605c      	str	r4, [r3, #4]
 800669a:	e7c7      	b.n	800662c <_free_r+0x24>
 800669c:	bd38      	pop	{r3, r4, r5, pc}
 800669e:	bf00      	nop
 80066a0:	20003f8c 	.word	0x20003f8c

080066a4 <_malloc_r>:
 80066a4:	b570      	push	{r4, r5, r6, lr}
 80066a6:	1ccd      	adds	r5, r1, #3
 80066a8:	f025 0503 	bic.w	r5, r5, #3
 80066ac:	3508      	adds	r5, #8
 80066ae:	2d0c      	cmp	r5, #12
 80066b0:	bf38      	it	cc
 80066b2:	250c      	movcc	r5, #12
 80066b4:	2d00      	cmp	r5, #0
 80066b6:	4606      	mov	r6, r0
 80066b8:	db01      	blt.n	80066be <_malloc_r+0x1a>
 80066ba:	42a9      	cmp	r1, r5
 80066bc:	d903      	bls.n	80066c6 <_malloc_r+0x22>
 80066be:	230c      	movs	r3, #12
 80066c0:	6033      	str	r3, [r6, #0]
 80066c2:	2000      	movs	r0, #0
 80066c4:	bd70      	pop	{r4, r5, r6, pc}
 80066c6:	f000 f89f 	bl	8006808 <__malloc_lock>
 80066ca:	4a23      	ldr	r2, [pc, #140]	; (8006758 <_malloc_r+0xb4>)
 80066cc:	6814      	ldr	r4, [r2, #0]
 80066ce:	4621      	mov	r1, r4
 80066d0:	b991      	cbnz	r1, 80066f8 <_malloc_r+0x54>
 80066d2:	4c22      	ldr	r4, [pc, #136]	; (800675c <_malloc_r+0xb8>)
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	b91b      	cbnz	r3, 80066e0 <_malloc_r+0x3c>
 80066d8:	4630      	mov	r0, r6
 80066da:	f000 f841 	bl	8006760 <_sbrk_r>
 80066de:	6020      	str	r0, [r4, #0]
 80066e0:	4629      	mov	r1, r5
 80066e2:	4630      	mov	r0, r6
 80066e4:	f000 f83c 	bl	8006760 <_sbrk_r>
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	d126      	bne.n	800673a <_malloc_r+0x96>
 80066ec:	230c      	movs	r3, #12
 80066ee:	6033      	str	r3, [r6, #0]
 80066f0:	4630      	mov	r0, r6
 80066f2:	f000 f88a 	bl	800680a <__malloc_unlock>
 80066f6:	e7e4      	b.n	80066c2 <_malloc_r+0x1e>
 80066f8:	680b      	ldr	r3, [r1, #0]
 80066fa:	1b5b      	subs	r3, r3, r5
 80066fc:	d41a      	bmi.n	8006734 <_malloc_r+0x90>
 80066fe:	2b0b      	cmp	r3, #11
 8006700:	d90f      	bls.n	8006722 <_malloc_r+0x7e>
 8006702:	600b      	str	r3, [r1, #0]
 8006704:	50cd      	str	r5, [r1, r3]
 8006706:	18cc      	adds	r4, r1, r3
 8006708:	4630      	mov	r0, r6
 800670a:	f000 f87e 	bl	800680a <__malloc_unlock>
 800670e:	f104 000b 	add.w	r0, r4, #11
 8006712:	1d23      	adds	r3, r4, #4
 8006714:	f020 0007 	bic.w	r0, r0, #7
 8006718:	1ac3      	subs	r3, r0, r3
 800671a:	d01b      	beq.n	8006754 <_malloc_r+0xb0>
 800671c:	425a      	negs	r2, r3
 800671e:	50e2      	str	r2, [r4, r3]
 8006720:	bd70      	pop	{r4, r5, r6, pc}
 8006722:	428c      	cmp	r4, r1
 8006724:	bf0d      	iteet	eq
 8006726:	6863      	ldreq	r3, [r4, #4]
 8006728:	684b      	ldrne	r3, [r1, #4]
 800672a:	6063      	strne	r3, [r4, #4]
 800672c:	6013      	streq	r3, [r2, #0]
 800672e:	bf18      	it	ne
 8006730:	460c      	movne	r4, r1
 8006732:	e7e9      	b.n	8006708 <_malloc_r+0x64>
 8006734:	460c      	mov	r4, r1
 8006736:	6849      	ldr	r1, [r1, #4]
 8006738:	e7ca      	b.n	80066d0 <_malloc_r+0x2c>
 800673a:	1cc4      	adds	r4, r0, #3
 800673c:	f024 0403 	bic.w	r4, r4, #3
 8006740:	42a0      	cmp	r0, r4
 8006742:	d005      	beq.n	8006750 <_malloc_r+0xac>
 8006744:	1a21      	subs	r1, r4, r0
 8006746:	4630      	mov	r0, r6
 8006748:	f000 f80a 	bl	8006760 <_sbrk_r>
 800674c:	3001      	adds	r0, #1
 800674e:	d0cd      	beq.n	80066ec <_malloc_r+0x48>
 8006750:	6025      	str	r5, [r4, #0]
 8006752:	e7d9      	b.n	8006708 <_malloc_r+0x64>
 8006754:	bd70      	pop	{r4, r5, r6, pc}
 8006756:	bf00      	nop
 8006758:	20003f8c 	.word	0x20003f8c
 800675c:	20003f90 	.word	0x20003f90

08006760 <_sbrk_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4c06      	ldr	r4, [pc, #24]	; (800677c <_sbrk_r+0x1c>)
 8006764:	2300      	movs	r3, #0
 8006766:	4605      	mov	r5, r0
 8006768:	4608      	mov	r0, r1
 800676a:	6023      	str	r3, [r4, #0]
 800676c:	f000 f85e 	bl	800682c <_sbrk>
 8006770:	1c43      	adds	r3, r0, #1
 8006772:	d102      	bne.n	800677a <_sbrk_r+0x1a>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	b103      	cbz	r3, 800677a <_sbrk_r+0x1a>
 8006778:	602b      	str	r3, [r5, #0]
 800677a:	bd38      	pop	{r3, r4, r5, pc}
 800677c:	20004ad0 	.word	0x20004ad0

08006780 <_raise_r>:
 8006780:	291f      	cmp	r1, #31
 8006782:	b538      	push	{r3, r4, r5, lr}
 8006784:	4604      	mov	r4, r0
 8006786:	460d      	mov	r5, r1
 8006788:	d904      	bls.n	8006794 <_raise_r+0x14>
 800678a:	2316      	movs	r3, #22
 800678c:	6003      	str	r3, [r0, #0]
 800678e:	f04f 30ff 	mov.w	r0, #4294967295
 8006792:	bd38      	pop	{r3, r4, r5, pc}
 8006794:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006796:	b112      	cbz	r2, 800679e <_raise_r+0x1e>
 8006798:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800679c:	b94b      	cbnz	r3, 80067b2 <_raise_r+0x32>
 800679e:	4620      	mov	r0, r4
 80067a0:	f000 f830 	bl	8006804 <_getpid_r>
 80067a4:	462a      	mov	r2, r5
 80067a6:	4601      	mov	r1, r0
 80067a8:	4620      	mov	r0, r4
 80067aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067ae:	f000 b817 	b.w	80067e0 <_kill_r>
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d00a      	beq.n	80067cc <_raise_r+0x4c>
 80067b6:	1c59      	adds	r1, r3, #1
 80067b8:	d103      	bne.n	80067c2 <_raise_r+0x42>
 80067ba:	2316      	movs	r3, #22
 80067bc:	6003      	str	r3, [r0, #0]
 80067be:	2001      	movs	r0, #1
 80067c0:	bd38      	pop	{r3, r4, r5, pc}
 80067c2:	2400      	movs	r4, #0
 80067c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80067c8:	4628      	mov	r0, r5
 80067ca:	4798      	blx	r3
 80067cc:	2000      	movs	r0, #0
 80067ce:	bd38      	pop	{r3, r4, r5, pc}

080067d0 <raise>:
 80067d0:	4b02      	ldr	r3, [pc, #8]	; (80067dc <raise+0xc>)
 80067d2:	4601      	mov	r1, r0
 80067d4:	6818      	ldr	r0, [r3, #0]
 80067d6:	f7ff bfd3 	b.w	8006780 <_raise_r>
 80067da:	bf00      	nop
 80067dc:	200000d8 	.word	0x200000d8

080067e0 <_kill_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4c07      	ldr	r4, [pc, #28]	; (8006800 <_kill_r+0x20>)
 80067e4:	2300      	movs	r3, #0
 80067e6:	4605      	mov	r5, r0
 80067e8:	4608      	mov	r0, r1
 80067ea:	4611      	mov	r1, r2
 80067ec:	6023      	str	r3, [r4, #0]
 80067ee:	f000 f815 	bl	800681c <_kill>
 80067f2:	1c43      	adds	r3, r0, #1
 80067f4:	d102      	bne.n	80067fc <_kill_r+0x1c>
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	b103      	cbz	r3, 80067fc <_kill_r+0x1c>
 80067fa:	602b      	str	r3, [r5, #0]
 80067fc:	bd38      	pop	{r3, r4, r5, pc}
 80067fe:	bf00      	nop
 8006800:	20004ad0 	.word	0x20004ad0

08006804 <_getpid_r>:
 8006804:	f000 b802 	b.w	800680c <_getpid>

08006808 <__malloc_lock>:
 8006808:	4770      	bx	lr

0800680a <__malloc_unlock>:
 800680a:	4770      	bx	lr

0800680c <_getpid>:
 800680c:	4b02      	ldr	r3, [pc, #8]	; (8006818 <_getpid+0xc>)
 800680e:	2258      	movs	r2, #88	; 0x58
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	f04f 30ff 	mov.w	r0, #4294967295
 8006816:	4770      	bx	lr
 8006818:	20004ad0 	.word	0x20004ad0

0800681c <_kill>:
 800681c:	4b02      	ldr	r3, [pc, #8]	; (8006828 <_kill+0xc>)
 800681e:	2258      	movs	r2, #88	; 0x58
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	f04f 30ff 	mov.w	r0, #4294967295
 8006826:	4770      	bx	lr
 8006828:	20004ad0 	.word	0x20004ad0

0800682c <_sbrk>:
 800682c:	4b04      	ldr	r3, [pc, #16]	; (8006840 <_sbrk+0x14>)
 800682e:	6819      	ldr	r1, [r3, #0]
 8006830:	4602      	mov	r2, r0
 8006832:	b909      	cbnz	r1, 8006838 <_sbrk+0xc>
 8006834:	4903      	ldr	r1, [pc, #12]	; (8006844 <_sbrk+0x18>)
 8006836:	6019      	str	r1, [r3, #0]
 8006838:	6818      	ldr	r0, [r3, #0]
 800683a:	4402      	add	r2, r0
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	4770      	bx	lr
 8006840:	20003f94 	.word	0x20003f94
 8006844:	20004ad4 	.word	0x20004ad4

08006848 <_exit>:
 8006848:	e7fe      	b.n	8006848 <_exit>
	...

0800684c <_init>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	bf00      	nop
 8006850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006852:	bc08      	pop	{r3}
 8006854:	469e      	mov	lr, r3
 8006856:	4770      	bx	lr

08006858 <_fini>:
 8006858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685a:	bf00      	nop
 800685c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800685e:	bc08      	pop	{r3}
 8006860:	469e      	mov	lr, r3
 8006862:	4770      	bx	lr
