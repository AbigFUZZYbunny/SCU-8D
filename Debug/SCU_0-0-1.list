
SCU_0-0-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006abc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08006c6c  08006c6c  00016c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000064  08006f0c  08006f0c  00016f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000108  08006f70  08006f70  00016f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000018  08007078  08007078  00017078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08007090  08007090  00017090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000144  20000000  08007094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  00020144  2**0
                  CONTENTS
  9 .bss          00004a9c  20000144  20000144  00020144  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004be0  20004be0  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d9ac  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c98  00000000  00000000  0005db20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001968  00000000  00000000  000657b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001db0  00000000  00000000  00067120  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000fe83  00000000  00000000  00068ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000095e6  00000000  00000000  00078d53  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00082339  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000c1fc  00000000  00000000  000823b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0001267f  00000000  00000000  0008e5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000030  00000000  00000000  000a0e20  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001ed  00000000  00000000  000a0c33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000144 	.word	0x20000144
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006c54 	.word	0x08006c54

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000148 	.word	0x20000148
 80001ec:	08006c54 	.word	0x08006c54

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f001 b8f6 	b.w	8001408 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <selfrel_offset31>:
 8000510:	6803      	ldr	r3, [r0, #0]
 8000512:	005a      	lsls	r2, r3, #1
 8000514:	bf4c      	ite	mi
 8000516:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800051a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800051e:	4418      	add	r0, r3
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <search_EIT_table>:
 8000524:	b361      	cbz	r1, 8000580 <search_EIT_table+0x5c>
 8000526:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800052a:	f101 3aff 	add.w	sl, r1, #4294967295
 800052e:	4690      	mov	r8, r2
 8000530:	4606      	mov	r6, r0
 8000532:	46d1      	mov	r9, sl
 8000534:	2700      	movs	r7, #0
 8000536:	eb07 0409 	add.w	r4, r7, r9
 800053a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800053e:	1064      	asrs	r4, r4, #1
 8000540:	00e5      	lsls	r5, r4, #3
 8000542:	1971      	adds	r1, r6, r5
 8000544:	4608      	mov	r0, r1
 8000546:	f7ff ffe3 	bl	8000510 <selfrel_offset31>
 800054a:	45a2      	cmp	sl, r4
 800054c:	4683      	mov	fp, r0
 800054e:	f105 0008 	add.w	r0, r5, #8
 8000552:	4430      	add	r0, r6
 8000554:	d009      	beq.n	800056a <search_EIT_table+0x46>
 8000556:	f7ff ffdb 	bl	8000510 <selfrel_offset31>
 800055a:	45c3      	cmp	fp, r8
 800055c:	f100 30ff 	add.w	r0, r0, #4294967295
 8000560:	d805      	bhi.n	800056e <search_EIT_table+0x4a>
 8000562:	4540      	cmp	r0, r8
 8000564:	d209      	bcs.n	800057a <search_EIT_table+0x56>
 8000566:	1c67      	adds	r7, r4, #1
 8000568:	e7e5      	b.n	8000536 <search_EIT_table+0x12>
 800056a:	45c3      	cmp	fp, r8
 800056c:	d905      	bls.n	800057a <search_EIT_table+0x56>
 800056e:	42a7      	cmp	r7, r4
 8000570:	d002      	beq.n	8000578 <search_EIT_table+0x54>
 8000572:	f104 39ff 	add.w	r9, r4, #4294967295
 8000576:	e7de      	b.n	8000536 <search_EIT_table+0x12>
 8000578:	2100      	movs	r1, #0
 800057a:	4608      	mov	r0, r1
 800057c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000580:	4608      	mov	r0, r1
 8000582:	4770      	bx	lr

08000584 <__gnu_unwind_get_pr_addr>:
 8000584:	2801      	cmp	r0, #1
 8000586:	d007      	beq.n	8000598 <__gnu_unwind_get_pr_addr+0x14>
 8000588:	2802      	cmp	r0, #2
 800058a:	d007      	beq.n	800059c <__gnu_unwind_get_pr_addr+0x18>
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <__gnu_unwind_get_pr_addr+0x1c>)
 800058e:	2800      	cmp	r0, #0
 8000590:	bf0c      	ite	eq
 8000592:	4618      	moveq	r0, r3
 8000594:	2000      	movne	r0, #0
 8000596:	4770      	bx	lr
 8000598:	4802      	ldr	r0, [pc, #8]	; (80005a4 <__gnu_unwind_get_pr_addr+0x20>)
 800059a:	4770      	bx	lr
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <__gnu_unwind_get_pr_addr+0x24>)
 800059e:	4770      	bx	lr
 80005a0:	08000c89 	.word	0x08000c89
 80005a4:	08000c8d 	.word	0x08000c8d
 80005a8:	08000c91 	.word	0x08000c91

080005ac <get_eit_entry>:
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	4b24      	ldr	r3, [pc, #144]	; (8000640 <get_eit_entry+0x94>)
 80005b0:	b083      	sub	sp, #12
 80005b2:	4604      	mov	r4, r0
 80005b4:	1e8d      	subs	r5, r1, #2
 80005b6:	b37b      	cbz	r3, 8000618 <get_eit_entry+0x6c>
 80005b8:	a901      	add	r1, sp, #4
 80005ba:	4628      	mov	r0, r5
 80005bc:	f3af 8000 	nop.w
 80005c0:	b320      	cbz	r0, 800060c <get_eit_entry+0x60>
 80005c2:	9901      	ldr	r1, [sp, #4]
 80005c4:	462a      	mov	r2, r5
 80005c6:	f7ff ffad 	bl	8000524 <search_EIT_table>
 80005ca:	4601      	mov	r1, r0
 80005cc:	b1f0      	cbz	r0, 800060c <get_eit_entry+0x60>
 80005ce:	f7ff ff9f 	bl	8000510 <selfrel_offset31>
 80005d2:	684b      	ldr	r3, [r1, #4]
 80005d4:	64a0      	str	r0, [r4, #72]	; 0x48
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d012      	beq.n	8000600 <get_eit_entry+0x54>
 80005da:	2b00      	cmp	r3, #0
 80005dc:	f101 0004 	add.w	r0, r1, #4
 80005e0:	db20      	blt.n	8000624 <get_eit_entry+0x78>
 80005e2:	f7ff ff95 	bl	8000510 <selfrel_offset31>
 80005e6:	2300      	movs	r3, #0
 80005e8:	64e0      	str	r0, [r4, #76]	; 0x4c
 80005ea:	6523      	str	r3, [r4, #80]	; 0x50
 80005ec:	6803      	ldr	r3, [r0, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	db1c      	blt.n	800062c <get_eit_entry+0x80>
 80005f2:	f7ff ff8d 	bl	8000510 <selfrel_offset31>
 80005f6:	2300      	movs	r3, #0
 80005f8:	6120      	str	r0, [r4, #16]
 80005fa:	4618      	mov	r0, r3
 80005fc:	b003      	add	sp, #12
 80005fe:	bd30      	pop	{r4, r5, pc}
 8000600:	2300      	movs	r3, #0
 8000602:	6123      	str	r3, [r4, #16]
 8000604:	2305      	movs	r3, #5
 8000606:	4618      	mov	r0, r3
 8000608:	b003      	add	sp, #12
 800060a:	bd30      	pop	{r4, r5, pc}
 800060c:	2300      	movs	r3, #0
 800060e:	6123      	str	r3, [r4, #16]
 8000610:	2309      	movs	r3, #9
 8000612:	4618      	mov	r0, r3
 8000614:	b003      	add	sp, #12
 8000616:	bd30      	pop	{r4, r5, pc}
 8000618:	490a      	ldr	r1, [pc, #40]	; (8000644 <get_eit_entry+0x98>)
 800061a:	480b      	ldr	r0, [pc, #44]	; (8000648 <get_eit_entry+0x9c>)
 800061c:	1a09      	subs	r1, r1, r0
 800061e:	10c9      	asrs	r1, r1, #3
 8000620:	9101      	str	r1, [sp, #4]
 8000622:	e7cf      	b.n	80005c4 <get_eit_entry+0x18>
 8000624:	2301      	movs	r3, #1
 8000626:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000628:	6523      	str	r3, [r4, #80]	; 0x50
 800062a:	e7df      	b.n	80005ec <get_eit_entry+0x40>
 800062c:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000630:	f7ff ffa8 	bl	8000584 <__gnu_unwind_get_pr_addr>
 8000634:	2800      	cmp	r0, #0
 8000636:	6120      	str	r0, [r4, #16]
 8000638:	bf14      	ite	ne
 800063a:	2300      	movne	r3, #0
 800063c:	2309      	moveq	r3, #9
 800063e:	e7dc      	b.n	80005fa <get_eit_entry+0x4e>
 8000640:	00000000 	.word	0x00000000
 8000644:	08007078 	.word	0x08007078
 8000648:	08006f70 	.word	0x08006f70

0800064c <restore_non_core_regs>:
 800064c:	6803      	ldr	r3, [r0, #0]
 800064e:	07da      	lsls	r2, r3, #31
 8000650:	b510      	push	{r4, lr}
 8000652:	4604      	mov	r4, r0
 8000654:	d406      	bmi.n	8000664 <restore_non_core_regs+0x18>
 8000656:	079b      	lsls	r3, r3, #30
 8000658:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800065c:	d509      	bpl.n	8000672 <restore_non_core_regs+0x26>
 800065e:	f000 fc51 	bl	8000f04 <__gnu_Unwind_Restore_VFP_D>
 8000662:	6823      	ldr	r3, [r4, #0]
 8000664:	0759      	lsls	r1, r3, #29
 8000666:	d509      	bpl.n	800067c <restore_non_core_regs+0x30>
 8000668:	071a      	lsls	r2, r3, #28
 800066a:	d50e      	bpl.n	800068a <restore_non_core_regs+0x3e>
 800066c:	06db      	lsls	r3, r3, #27
 800066e:	d513      	bpl.n	8000698 <restore_non_core_regs+0x4c>
 8000670:	bd10      	pop	{r4, pc}
 8000672:	f000 fc3f 	bl	8000ef4 <__gnu_Unwind_Restore_VFP>
 8000676:	6823      	ldr	r3, [r4, #0]
 8000678:	0759      	lsls	r1, r3, #29
 800067a:	d4f5      	bmi.n	8000668 <restore_non_core_regs+0x1c>
 800067c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000680:	f000 fc48 	bl	8000f14 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000684:	6823      	ldr	r3, [r4, #0]
 8000686:	071a      	lsls	r2, r3, #28
 8000688:	d4f0      	bmi.n	800066c <restore_non_core_regs+0x20>
 800068a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800068e:	f000 fc49 	bl	8000f24 <__gnu_Unwind_Restore_WMMXD>
 8000692:	6823      	ldr	r3, [r4, #0]
 8000694:	06db      	lsls	r3, r3, #27
 8000696:	d4eb      	bmi.n	8000670 <restore_non_core_regs+0x24>
 8000698:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800069c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006a0:	f000 bc84 	b.w	8000fac <__gnu_Unwind_Restore_WMMXC>

080006a4 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80006a4:	6803      	ldr	r3, [r0, #0]
 80006a6:	b103      	cbz	r3, 80006aa <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80006a8:	4403      	add	r3, r0
 80006aa:	4618      	mov	r0, r3
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <__gnu_unwind_24bit.isra.1>:
 80006b0:	2009      	movs	r0, #9
 80006b2:	4770      	bx	lr

080006b4 <_Unwind_DebugHook>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <unwind_phase2>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	4604      	mov	r4, r0
 80006bc:	460d      	mov	r5, r1
 80006be:	e008      	b.n	80006d2 <unwind_phase2+0x1a>
 80006c0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80006c2:	6163      	str	r3, [r4, #20]
 80006c4:	462a      	mov	r2, r5
 80006c6:	6923      	ldr	r3, [r4, #16]
 80006c8:	4621      	mov	r1, r4
 80006ca:	2001      	movs	r0, #1
 80006cc:	4798      	blx	r3
 80006ce:	2808      	cmp	r0, #8
 80006d0:	d108      	bne.n	80006e4 <unwind_phase2+0x2c>
 80006d2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006d4:	4620      	mov	r0, r4
 80006d6:	f7ff ff69 	bl	80005ac <get_eit_entry>
 80006da:	4606      	mov	r6, r0
 80006dc:	2800      	cmp	r0, #0
 80006de:	d0ef      	beq.n	80006c0 <unwind_phase2+0x8>
 80006e0:	f006 f938 	bl	8006954 <abort>
 80006e4:	2807      	cmp	r0, #7
 80006e6:	d1fb      	bne.n	80006e0 <unwind_phase2+0x28>
 80006e8:	4630      	mov	r0, r6
 80006ea:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006ec:	f7ff ffe2 	bl	80006b4 <_Unwind_DebugHook>
 80006f0:	1d28      	adds	r0, r5, #4
 80006f2:	f000 fbf3 	bl	8000edc <__restore_core_regs>
 80006f6:	bf00      	nop

080006f8 <unwind_phase2_forced>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	1d0c      	adds	r4, r1, #4
 80006fe:	4605      	mov	r5, r0
 8000700:	4692      	mov	sl, r2
 8000702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000704:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000708:	ae03      	add	r6, sp, #12
 800070a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800070c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800070e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000712:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000714:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000718:	ac02      	add	r4, sp, #8
 800071a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800071e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000722:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000726:	2300      	movs	r3, #0
 8000728:	4628      	mov	r0, r5
 800072a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800072c:	6023      	str	r3, [r4, #0]
 800072e:	f7ff ff3d 	bl	80005ac <get_eit_entry>
 8000732:	f1ba 0f00 	cmp.w	sl, #0
 8000736:	4607      	mov	r7, r0
 8000738:	bf14      	ite	ne
 800073a:	260a      	movne	r6, #10
 800073c:	2609      	moveq	r6, #9
 800073e:	b17f      	cbz	r7, 8000760 <unwind_phase2_forced+0x68>
 8000740:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000742:	f046 0110 	orr.w	r1, r6, #16
 8000746:	e88d 0210 	stmia.w	sp, {r4, r9}
 800074a:	462a      	mov	r2, r5
 800074c:	6463      	str	r3, [r4, #68]	; 0x44
 800074e:	2001      	movs	r0, #1
 8000750:	462b      	mov	r3, r5
 8000752:	47c0      	blx	r8
 8000754:	bb78      	cbnz	r0, 80007b6 <unwind_phase2_forced+0xbe>
 8000756:	4638      	mov	r0, r7
 8000758:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800075c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000760:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000762:	616b      	str	r3, [r5, #20]
 8000764:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000768:	4621      	mov	r1, r4
 800076a:	a87a      	add	r0, sp, #488	; 0x1e8
 800076c:	f006 f93c 	bl	80069e8 <memcpy>
 8000770:	692b      	ldr	r3, [r5, #16]
 8000772:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000774:	4629      	mov	r1, r5
 8000776:	4630      	mov	r0, r6
 8000778:	4798      	blx	r3
 800077a:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800077c:	4682      	mov	sl, r0
 800077e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000782:	4631      	mov	r1, r6
 8000784:	6463      	str	r3, [r4, #68]	; 0x44
 8000786:	462a      	mov	r2, r5
 8000788:	462b      	mov	r3, r5
 800078a:	2001      	movs	r0, #1
 800078c:	47c0      	blx	r8
 800078e:	b990      	cbnz	r0, 80007b6 <unwind_phase2_forced+0xbe>
 8000790:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000794:	a97a      	add	r1, sp, #488	; 0x1e8
 8000796:	4620      	mov	r0, r4
 8000798:	f006 f926 	bl	80069e8 <memcpy>
 800079c:	f1ba 0f08 	cmp.w	sl, #8
 80007a0:	d106      	bne.n	80007b0 <unwind_phase2_forced+0xb8>
 80007a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007a4:	4628      	mov	r0, r5
 80007a6:	f7ff ff01 	bl	80005ac <get_eit_entry>
 80007aa:	2609      	movs	r6, #9
 80007ac:	4607      	mov	r7, r0
 80007ae:	e7c6      	b.n	800073e <unwind_phase2_forced+0x46>
 80007b0:	f1ba 0f07 	cmp.w	sl, #7
 80007b4:	d005      	beq.n	80007c2 <unwind_phase2_forced+0xca>
 80007b6:	2709      	movs	r7, #9
 80007b8:	4638      	mov	r0, r7
 80007ba:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c2:	4638      	mov	r0, r7
 80007c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007c6:	f7ff ff75 	bl	80006b4 <_Unwind_DebugHook>
 80007ca:	a803      	add	r0, sp, #12
 80007cc:	f000 fb86 	bl	8000edc <__restore_core_regs>

080007d0 <_Unwind_GetCFA>:
 80007d0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80007d2:	4770      	bx	lr

080007d4 <__gnu_Unwind_RaiseException>:
 80007d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80007d8:	640b      	str	r3, [r1, #64]	; 0x40
 80007da:	1d0e      	adds	r6, r1, #4
 80007dc:	460f      	mov	r7, r1
 80007de:	4604      	mov	r4, r0
 80007e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007e2:	b0f9      	sub	sp, #484	; 0x1e4
 80007e4:	ad01      	add	r5, sp, #4
 80007e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007f4:	f04f 36ff 	mov.w	r6, #4294967295
 80007f8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80007fc:	9600      	str	r6, [sp, #0]
 80007fe:	e006      	b.n	800080e <__gnu_Unwind_RaiseException+0x3a>
 8000800:	6923      	ldr	r3, [r4, #16]
 8000802:	466a      	mov	r2, sp
 8000804:	4621      	mov	r1, r4
 8000806:	4798      	blx	r3
 8000808:	2808      	cmp	r0, #8
 800080a:	4605      	mov	r5, r0
 800080c:	d108      	bne.n	8000820 <__gnu_Unwind_RaiseException+0x4c>
 800080e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000810:	4620      	mov	r0, r4
 8000812:	f7ff fecb 	bl	80005ac <get_eit_entry>
 8000816:	2800      	cmp	r0, #0
 8000818:	d0f2      	beq.n	8000800 <__gnu_Unwind_RaiseException+0x2c>
 800081a:	2009      	movs	r0, #9
 800081c:	b079      	add	sp, #484	; 0x1e4
 800081e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000820:	4668      	mov	r0, sp
 8000822:	f7ff ff13 	bl	800064c <restore_non_core_regs>
 8000826:	2d06      	cmp	r5, #6
 8000828:	d1f7      	bne.n	800081a <__gnu_Unwind_RaiseException+0x46>
 800082a:	4639      	mov	r1, r7
 800082c:	4620      	mov	r0, r4
 800082e:	f7ff ff43 	bl	80006b8 <unwind_phase2>
 8000832:	bf00      	nop

08000834 <__gnu_Unwind_ForcedUnwind>:
 8000834:	b430      	push	{r4, r5}
 8000836:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000838:	60c1      	str	r1, [r0, #12]
 800083a:	6182      	str	r2, [r0, #24]
 800083c:	4619      	mov	r1, r3
 800083e:	641d      	str	r5, [r3, #64]	; 0x40
 8000840:	2200      	movs	r2, #0
 8000842:	bc30      	pop	{r4, r5}
 8000844:	e758      	b.n	80006f8 <unwind_phase2_forced>
 8000846:	bf00      	nop

08000848 <__gnu_Unwind_Resume>:
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	68c6      	ldr	r6, [r0, #12]
 800084c:	6943      	ldr	r3, [r0, #20]
 800084e:	640b      	str	r3, [r1, #64]	; 0x40
 8000850:	b126      	cbz	r6, 800085c <__gnu_Unwind_Resume+0x14>
 8000852:	2201      	movs	r2, #1
 8000854:	f7ff ff50 	bl	80006f8 <unwind_phase2_forced>
 8000858:	f006 f87c 	bl	8006954 <abort>
 800085c:	6903      	ldr	r3, [r0, #16]
 800085e:	460a      	mov	r2, r1
 8000860:	4604      	mov	r4, r0
 8000862:	460d      	mov	r5, r1
 8000864:	4601      	mov	r1, r0
 8000866:	2002      	movs	r0, #2
 8000868:	4798      	blx	r3
 800086a:	2807      	cmp	r0, #7
 800086c:	d007      	beq.n	800087e <__gnu_Unwind_Resume+0x36>
 800086e:	2808      	cmp	r0, #8
 8000870:	d103      	bne.n	800087a <__gnu_Unwind_Resume+0x32>
 8000872:	4629      	mov	r1, r5
 8000874:	4620      	mov	r0, r4
 8000876:	f7ff ff1f 	bl	80006b8 <unwind_phase2>
 800087a:	f006 f86b 	bl	8006954 <abort>
 800087e:	4630      	mov	r0, r6
 8000880:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000882:	f7ff ff17 	bl	80006b4 <_Unwind_DebugHook>
 8000886:	1d28      	adds	r0, r5, #4
 8000888:	f000 fb28 	bl	8000edc <__restore_core_regs>

0800088c <__gnu_Unwind_Resume_or_Rethrow>:
 800088c:	68c2      	ldr	r2, [r0, #12]
 800088e:	b11a      	cbz	r2, 8000898 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000890:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000892:	640a      	str	r2, [r1, #64]	; 0x40
 8000894:	2200      	movs	r2, #0
 8000896:	e72f      	b.n	80006f8 <unwind_phase2_forced>
 8000898:	e79c      	b.n	80007d4 <__gnu_Unwind_RaiseException>
 800089a:	bf00      	nop

0800089c <_Unwind_Complete>:
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <_Unwind_DeleteException>:
 80008a0:	6883      	ldr	r3, [r0, #8]
 80008a2:	b113      	cbz	r3, 80008aa <_Unwind_DeleteException+0xa>
 80008a4:	4601      	mov	r1, r0
 80008a6:	2001      	movs	r0, #1
 80008a8:	4718      	bx	r3
 80008aa:	4770      	bx	lr

080008ac <_Unwind_VRS_Get>:
 80008ac:	b500      	push	{lr}
 80008ae:	2904      	cmp	r1, #4
 80008b0:	d807      	bhi.n	80008c2 <_Unwind_VRS_Get+0x16>
 80008b2:	e8df f001 	tbb	[pc, r1]
 80008b6:	0903      	.short	0x0903
 80008b8:	0906      	.short	0x0906
 80008ba:	09          	.byte	0x09
 80008bb:	00          	.byte	0x00
 80008bc:	b90b      	cbnz	r3, 80008c2 <_Unwind_VRS_Get+0x16>
 80008be:	2a0f      	cmp	r2, #15
 80008c0:	d905      	bls.n	80008ce <_Unwind_VRS_Get+0x22>
 80008c2:	2002      	movs	r0, #2
 80008c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80008c8:	2001      	movs	r0, #1
 80008ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80008ce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008d2:	4618      	mov	r0, r3
 80008d4:	6853      	ldr	r3, [r2, #4]
 80008d6:	9a01      	ldr	r2, [sp, #4]
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	f85d fb04 	ldr.w	pc, [sp], #4
 80008de:	bf00      	nop

080008e0 <_Unwind_GetGR>:
 80008e0:	b510      	push	{r4, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	2300      	movs	r3, #0
 80008e6:	ac03      	add	r4, sp, #12
 80008e8:	460a      	mov	r2, r1
 80008ea:	9400      	str	r4, [sp, #0]
 80008ec:	4619      	mov	r1, r3
 80008ee:	f7ff ffdd 	bl	80008ac <_Unwind_VRS_Get>
 80008f2:	9803      	ldr	r0, [sp, #12]
 80008f4:	b004      	add	sp, #16
 80008f6:	bd10      	pop	{r4, pc}

080008f8 <_Unwind_VRS_Set>:
 80008f8:	b500      	push	{lr}
 80008fa:	2904      	cmp	r1, #4
 80008fc:	d807      	bhi.n	800090e <_Unwind_VRS_Set+0x16>
 80008fe:	e8df f001 	tbb	[pc, r1]
 8000902:	0903      	.short	0x0903
 8000904:	0906      	.short	0x0906
 8000906:	09          	.byte	0x09
 8000907:	00          	.byte	0x00
 8000908:	b90b      	cbnz	r3, 800090e <_Unwind_VRS_Set+0x16>
 800090a:	2a0f      	cmp	r2, #15
 800090c:	d905      	bls.n	800091a <_Unwind_VRS_Set+0x22>
 800090e:	2002      	movs	r0, #2
 8000910:	f85d fb04 	ldr.w	pc, [sp], #4
 8000914:	2001      	movs	r0, #1
 8000916:	f85d fb04 	ldr.w	pc, [sp], #4
 800091a:	9901      	ldr	r1, [sp, #4]
 800091c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000920:	6809      	ldr	r1, [r1, #0]
 8000922:	6051      	str	r1, [r2, #4]
 8000924:	4618      	mov	r0, r3
 8000926:	f85d fb04 	ldr.w	pc, [sp], #4
 800092a:	bf00      	nop

0800092c <_Unwind_SetGR>:
 800092c:	b510      	push	{r4, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	ac04      	add	r4, sp, #16
 8000932:	2300      	movs	r3, #0
 8000934:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000938:	460a      	mov	r2, r1
 800093a:	9400      	str	r4, [sp, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f7ff ffdb 	bl	80008f8 <_Unwind_VRS_Set>
 8000942:	b004      	add	sp, #16
 8000944:	bd10      	pop	{r4, pc}
 8000946:	bf00      	nop

08000948 <__gnu_Unwind_Backtrace>:
 8000948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	1d15      	adds	r5, r2, #4
 8000950:	4607      	mov	r7, r0
 8000952:	460e      	mov	r6, r1
 8000954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000956:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800095a:	ac17      	add	r4, sp, #92	; 0x5c
 800095c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000966:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800096a:	f04f 35ff 	mov.w	r5, #4294967295
 800096e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000972:	9516      	str	r5, [sp, #88]	; 0x58
 8000974:	e010      	b.n	8000998 <__gnu_Unwind_Backtrace+0x50>
 8000976:	a816      	add	r0, sp, #88	; 0x58
 8000978:	f7ff ffd8 	bl	800092c <_Unwind_SetGR>
 800097c:	4631      	mov	r1, r6
 800097e:	a816      	add	r0, sp, #88	; 0x58
 8000980:	47b8      	blx	r7
 8000982:	aa16      	add	r2, sp, #88	; 0x58
 8000984:	4669      	mov	r1, sp
 8000986:	b978      	cbnz	r0, 80009a8 <__gnu_Unwind_Backtrace+0x60>
 8000988:	9b04      	ldr	r3, [sp, #16]
 800098a:	2008      	movs	r0, #8
 800098c:	4798      	blx	r3
 800098e:	2805      	cmp	r0, #5
 8000990:	4604      	mov	r4, r0
 8000992:	d00a      	beq.n	80009aa <__gnu_Unwind_Backtrace+0x62>
 8000994:	2809      	cmp	r0, #9
 8000996:	d007      	beq.n	80009a8 <__gnu_Unwind_Backtrace+0x60>
 8000998:	9926      	ldr	r1, [sp, #152]	; 0x98
 800099a:	4668      	mov	r0, sp
 800099c:	f7ff fe06 	bl	80005ac <get_eit_entry>
 80009a0:	466a      	mov	r2, sp
 80009a2:	210c      	movs	r1, #12
 80009a4:	2800      	cmp	r0, #0
 80009a6:	d0e6      	beq.n	8000976 <__gnu_Unwind_Backtrace+0x2e>
 80009a8:	2409      	movs	r4, #9
 80009aa:	a816      	add	r0, sp, #88	; 0x58
 80009ac:	f7ff fe4e 	bl	800064c <restore_non_core_regs>
 80009b0:	4620      	mov	r0, r4
 80009b2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80009b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009b8 <__gnu_unwind_pr_common>:
 80009b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009bc:	460d      	mov	r5, r1
 80009be:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80009c0:	b08b      	sub	sp, #44	; 0x2c
 80009c2:	1d0c      	adds	r4, r1, #4
 80009c4:	6809      	ldr	r1, [r1, #0]
 80009c6:	9107      	str	r1, [sp, #28]
 80009c8:	4691      	mov	r9, r2
 80009ca:	9408      	str	r4, [sp, #32]
 80009cc:	f000 0b03 	and.w	fp, r0, #3
 80009d0:	461e      	mov	r6, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d160      	bne.n	8000a98 <__gnu_unwind_pr_common+0xe0>
 80009d6:	0209      	lsls	r1, r1, #8
 80009d8:	2303      	movs	r3, #3
 80009da:	9107      	str	r1, [sp, #28]
 80009dc:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80009e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80009e4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80009e6:	f1bb 0f02 	cmp.w	fp, #2
 80009ea:	bf08      	it	eq
 80009ec:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80009ee:	f013 0301 	ands.w	r3, r3, #1
 80009f2:	d140      	bne.n	8000a76 <__gnu_unwind_pr_common+0xbe>
 80009f4:	9301      	str	r3, [sp, #4]
 80009f6:	f000 0308 	and.w	r3, r0, #8
 80009fa:	9303      	str	r3, [sp, #12]
 80009fc:	f8d4 8000 	ldr.w	r8, [r4]
 8000a00:	f1b8 0f00 	cmp.w	r8, #0
 8000a04:	d039      	beq.n	8000a7a <__gnu_unwind_pr_common+0xc2>
 8000a06:	2e02      	cmp	r6, #2
 8000a08:	d043      	beq.n	8000a92 <__gnu_unwind_pr_common+0xda>
 8000a0a:	f8b4 8000 	ldrh.w	r8, [r4]
 8000a0e:	8867      	ldrh	r7, [r4, #2]
 8000a10:	3404      	adds	r4, #4
 8000a12:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a14:	f027 0a01 	bic.w	sl, r7, #1
 8000a18:	210f      	movs	r1, #15
 8000a1a:	4648      	mov	r0, r9
 8000a1c:	449a      	add	sl, r3
 8000a1e:	f7ff ff5f 	bl	80008e0 <_Unwind_GetGR>
 8000a22:	4582      	cmp	sl, r0
 8000a24:	d833      	bhi.n	8000a8e <__gnu_unwind_pr_common+0xd6>
 8000a26:	f028 0301 	bic.w	r3, r8, #1
 8000a2a:	449a      	add	sl, r3
 8000a2c:	4550      	cmp	r0, sl
 8000a2e:	bf2c      	ite	cs
 8000a30:	2000      	movcs	r0, #0
 8000a32:	2001      	movcc	r0, #1
 8000a34:	007f      	lsls	r7, r7, #1
 8000a36:	f007 0702 	and.w	r7, r7, #2
 8000a3a:	f008 0801 	and.w	r8, r8, #1
 8000a3e:	ea47 0708 	orr.w	r7, r7, r8
 8000a42:	2f01      	cmp	r7, #1
 8000a44:	d03e      	beq.n	8000ac4 <__gnu_unwind_pr_common+0x10c>
 8000a46:	d335      	bcc.n	8000ab4 <__gnu_unwind_pr_common+0xfc>
 8000a48:	2f02      	cmp	r7, #2
 8000a4a:	d11c      	bne.n	8000a86 <__gnu_unwind_pr_common+0xce>
 8000a4c:	6823      	ldr	r3, [r4, #0]
 8000a4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000a52:	9202      	str	r2, [sp, #8]
 8000a54:	f1bb 0f00 	cmp.w	fp, #0
 8000a58:	d176      	bne.n	8000b48 <__gnu_unwind_pr_common+0x190>
 8000a5a:	b128      	cbz	r0, 8000a68 <__gnu_unwind_pr_common+0xb0>
 8000a5c:	9903      	ldr	r1, [sp, #12]
 8000a5e:	2900      	cmp	r1, #0
 8000a60:	d07e      	beq.n	8000b60 <__gnu_unwind_pr_common+0x1a8>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	f000 80a6 	beq.w	8000bb4 <__gnu_unwind_pr_common+0x1fc>
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db77      	blt.n	8000b5c <__gnu_unwind_pr_common+0x1a4>
 8000a6c:	9b02      	ldr	r3, [sp, #8]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000a74:	e7c2      	b.n	80009fc <__gnu_unwind_pr_common+0x44>
 8000a76:	2300      	movs	r3, #0
 8000a78:	9301      	str	r3, [sp, #4]
 8000a7a:	2e02      	cmp	r6, #2
 8000a7c:	dd3e      	ble.n	8000afc <__gnu_unwind_pr_common+0x144>
 8000a7e:	f7ff fe17 	bl	80006b0 <__gnu_unwind_24bit.isra.1>
 8000a82:	2800      	cmp	r0, #0
 8000a84:	d040      	beq.n	8000b08 <__gnu_unwind_pr_common+0x150>
 8000a86:	2009      	movs	r0, #9
 8000a88:	b00b      	add	sp, #44	; 0x2c
 8000a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a8e:	2000      	movs	r0, #0
 8000a90:	e7d0      	b.n	8000a34 <__gnu_unwind_pr_common+0x7c>
 8000a92:	6867      	ldr	r7, [r4, #4]
 8000a94:	3408      	adds	r4, #8
 8000a96:	e7bc      	b.n	8000a12 <__gnu_unwind_pr_common+0x5a>
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	dca3      	bgt.n	80009e4 <__gnu_unwind_pr_common+0x2c>
 8000a9c:	0c0b      	lsrs	r3, r1, #16
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	0409      	lsls	r1, r1, #16
 8000aa2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000aac:	9107      	str	r1, [sp, #28]
 8000aae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000ab2:	e797      	b.n	80009e4 <__gnu_unwind_pr_common+0x2c>
 8000ab4:	f1bb 0f00 	cmp.w	fp, #0
 8000ab8:	d002      	beq.n	8000ac0 <__gnu_unwind_pr_common+0x108>
 8000aba:	2800      	cmp	r0, #0
 8000abc:	f040 80bd 	bne.w	8000c3a <__gnu_unwind_pr_common+0x282>
 8000ac0:	3404      	adds	r4, #4
 8000ac2:	e79b      	b.n	80009fc <__gnu_unwind_pr_common+0x44>
 8000ac4:	f1bb 0f00 	cmp.w	fp, #0
 8000ac8:	d125      	bne.n	8000b16 <__gnu_unwind_pr_common+0x15e>
 8000aca:	b1a8      	cbz	r0, 8000af8 <__gnu_unwind_pr_common+0x140>
 8000acc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000ad0:	1c99      	adds	r1, r3, #2
 8000ad2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000ad6:	d0d6      	beq.n	8000a86 <__gnu_unwind_pr_common+0xce>
 8000ad8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000adc:	3301      	adds	r3, #1
 8000ade:	9106      	str	r1, [sp, #24]
 8000ae0:	f000 80a3 	beq.w	8000c2a <__gnu_unwind_pr_common+0x272>
 8000ae4:	1d20      	adds	r0, r4, #4
 8000ae6:	f7ff fddd 	bl	80006a4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000aea:	ab06      	add	r3, sp, #24
 8000aec:	4601      	mov	r1, r0
 8000aee:	4628      	mov	r0, r5
 8000af0:	f005 f982 	bl	8005df8 <__cxa_type_match>
 8000af4:	2800      	cmp	r0, #0
 8000af6:	d177      	bne.n	8000be8 <__gnu_unwind_pr_common+0x230>
 8000af8:	3408      	adds	r4, #8
 8000afa:	e77f      	b.n	80009fc <__gnu_unwind_pr_common+0x44>
 8000afc:	a907      	add	r1, sp, #28
 8000afe:	4648      	mov	r0, r9
 8000b00:	f000 faee 	bl	80010e0 <__gnu_unwind_execute>
 8000b04:	2800      	cmp	r0, #0
 8000b06:	d1be      	bne.n	8000a86 <__gnu_unwind_pr_common+0xce>
 8000b08:	9b01      	ldr	r3, [sp, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d15c      	bne.n	8000bc8 <__gnu_unwind_pr_common+0x210>
 8000b0e:	2008      	movs	r0, #8
 8000b10:	b00b      	add	sp, #44	; 0x2c
 8000b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b16:	210d      	movs	r1, #13
 8000b18:	4648      	mov	r0, r9
 8000b1a:	6a2f      	ldr	r7, [r5, #32]
 8000b1c:	f7ff fee0 	bl	80008e0 <_Unwind_GetGR>
 8000b20:	4287      	cmp	r7, r0
 8000b22:	d1e9      	bne.n	8000af8 <__gnu_unwind_pr_common+0x140>
 8000b24:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b26:	429c      	cmp	r4, r3
 8000b28:	d1e6      	bne.n	8000af8 <__gnu_unwind_pr_common+0x140>
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	f7ff fcf0 	bl	8000510 <selfrel_offset31>
 8000b30:	210f      	movs	r1, #15
 8000b32:	4602      	mov	r2, r0
 8000b34:	4648      	mov	r0, r9
 8000b36:	f7ff fef9 	bl	800092c <_Unwind_SetGR>
 8000b3a:	4648      	mov	r0, r9
 8000b3c:	462a      	mov	r2, r5
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f7ff fef4 	bl	800092c <_Unwind_SetGR>
 8000b44:	2007      	movs	r0, #7
 8000b46:	e79f      	b.n	8000a88 <__gnu_unwind_pr_common+0xd0>
 8000b48:	210d      	movs	r1, #13
 8000b4a:	4648      	mov	r0, r9
 8000b4c:	6a2f      	ldr	r7, [r5, #32]
 8000b4e:	f7ff fec7 	bl	80008e0 <_Unwind_GetGR>
 8000b52:	4287      	cmp	r7, r0
 8000b54:	d058      	beq.n	8000c08 <__gnu_unwind_pr_common+0x250>
 8000b56:	6823      	ldr	r3, [r4, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	da87      	bge.n	8000a6c <__gnu_unwind_pr_common+0xb4>
 8000b5c:	3404      	adds	r4, #4
 8000b5e:	e785      	b.n	8000a6c <__gnu_unwind_pr_common+0xb4>
 8000b60:	9b02      	ldr	r3, [sp, #8]
 8000b62:	b33b      	cbz	r3, 8000bb4 <__gnu_unwind_pr_common+0x1fc>
 8000b64:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000b68:	1d27      	adds	r7, r4, #4
 8000b6a:	f8cd b010 	str.w	fp, [sp, #16]
 8000b6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000b72:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000b76:	9605      	str	r6, [sp, #20]
 8000b78:	46a3      	mov	fp, r4
 8000b7a:	461c      	mov	r4, r3
 8000b7c:	e002      	b.n	8000b84 <__gnu_unwind_pr_common+0x1cc>
 8000b7e:	45b2      	cmp	sl, r6
 8000b80:	46b0      	mov	r8, r6
 8000b82:	d016      	beq.n	8000bb2 <__gnu_unwind_pr_common+0x1fa>
 8000b84:	4638      	mov	r0, r7
 8000b86:	9406      	str	r4, [sp, #24]
 8000b88:	f7ff fd8c 	bl	80006a4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b8c:	ab06      	add	r3, sp, #24
 8000b8e:	4601      	mov	r1, r0
 8000b90:	2200      	movs	r2, #0
 8000b92:	4628      	mov	r0, r5
 8000b94:	f005 f930 	bl	8005df8 <__cxa_type_match>
 8000b98:	f108 0601 	add.w	r6, r8, #1
 8000b9c:	3704      	adds	r7, #4
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	d0ed      	beq.n	8000b7e <__gnu_unwind_pr_common+0x1c6>
 8000ba2:	9b02      	ldr	r3, [sp, #8]
 8000ba4:	9e05      	ldr	r6, [sp, #20]
 8000ba6:	4543      	cmp	r3, r8
 8000ba8:	465c      	mov	r4, fp
 8000baa:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000bae:	d1d2      	bne.n	8000b56 <__gnu_unwind_pr_common+0x19e>
 8000bb0:	e000      	b.n	8000bb4 <__gnu_unwind_pr_common+0x1fc>
 8000bb2:	465c      	mov	r4, fp
 8000bb4:	4648      	mov	r0, r9
 8000bb6:	210d      	movs	r1, #13
 8000bb8:	f7ff fe92 	bl	80008e0 <_Unwind_GetGR>
 8000bbc:	9b06      	ldr	r3, [sp, #24]
 8000bbe:	6228      	str	r0, [r5, #32]
 8000bc0:	62ac      	str	r4, [r5, #40]	; 0x28
 8000bc2:	626b      	str	r3, [r5, #36]	; 0x24
 8000bc4:	2006      	movs	r0, #6
 8000bc6:	e75f      	b.n	8000a88 <__gnu_unwind_pr_common+0xd0>
 8000bc8:	210f      	movs	r1, #15
 8000bca:	4648      	mov	r0, r9
 8000bcc:	f7ff fe88 	bl	80008e0 <_Unwind_GetGR>
 8000bd0:	210e      	movs	r1, #14
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	4648      	mov	r0, r9
 8000bd6:	f7ff fea9 	bl	800092c <_Unwind_SetGR>
 8000bda:	4648      	mov	r0, r9
 8000bdc:	4a29      	ldr	r2, [pc, #164]	; (8000c84 <__gnu_unwind_pr_common+0x2cc>)
 8000bde:	210f      	movs	r1, #15
 8000be0:	f7ff fea4 	bl	800092c <_Unwind_SetGR>
 8000be4:	2007      	movs	r0, #7
 8000be6:	e74f      	b.n	8000a88 <__gnu_unwind_pr_common+0xd0>
 8000be8:	4607      	mov	r7, r0
 8000bea:	210d      	movs	r1, #13
 8000bec:	4648      	mov	r0, r9
 8000bee:	f7ff fe77 	bl	80008e0 <_Unwind_GetGR>
 8000bf2:	2f02      	cmp	r7, #2
 8000bf4:	6228      	str	r0, [r5, #32]
 8000bf6:	d11d      	bne.n	8000c34 <__gnu_unwind_pr_common+0x27c>
 8000bf8:	462b      	mov	r3, r5
 8000bfa:	9a06      	ldr	r2, [sp, #24]
 8000bfc:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000c00:	626b      	str	r3, [r5, #36]	; 0x24
 8000c02:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c04:	2006      	movs	r0, #6
 8000c06:	e73f      	b.n	8000a88 <__gnu_unwind_pr_common+0xd0>
 8000c08:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c0a:	429c      	cmp	r4, r3
 8000c0c:	d1a3      	bne.n	8000b56 <__gnu_unwind_pr_common+0x19e>
 8000c0e:	2204      	movs	r2, #4
 8000c10:	2700      	movs	r7, #0
 8000c12:	18a3      	adds	r3, r4, r2
 8000c14:	9902      	ldr	r1, [sp, #8]
 8000c16:	62a9      	str	r1, [r5, #40]	; 0x28
 8000c18:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000c1a:	632a      	str	r2, [r5, #48]	; 0x30
 8000c1c:	636b      	str	r3, [r5, #52]	; 0x34
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	42bb      	cmp	r3, r7
 8000c22:	db1d      	blt.n	8000c60 <__gnu_unwind_pr_common+0x2a8>
 8000c24:	2301      	movs	r3, #1
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	e720      	b.n	8000a6c <__gnu_unwind_pr_common+0xb4>
 8000c2a:	4648      	mov	r0, r9
 8000c2c:	210d      	movs	r1, #13
 8000c2e:	f7ff fe57 	bl	80008e0 <_Unwind_GetGR>
 8000c32:	6228      	str	r0, [r5, #32]
 8000c34:	9b06      	ldr	r3, [sp, #24]
 8000c36:	626b      	str	r3, [r5, #36]	; 0x24
 8000c38:	e7e3      	b.n	8000c02 <__gnu_unwind_pr_common+0x24a>
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f7ff fc68 	bl	8000510 <selfrel_offset31>
 8000c40:	3404      	adds	r4, #4
 8000c42:	4606      	mov	r6, r0
 8000c44:	63ac      	str	r4, [r5, #56]	; 0x38
 8000c46:	4628      	mov	r0, r5
 8000c48:	f005 f934 	bl	8005eb4 <__cxa_begin_cleanup>
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	f43f af1a 	beq.w	8000a86 <__gnu_unwind_pr_common+0xce>
 8000c52:	4648      	mov	r0, r9
 8000c54:	4632      	mov	r2, r6
 8000c56:	210f      	movs	r1, #15
 8000c58:	f7ff fe68 	bl	800092c <_Unwind_SetGR>
 8000c5c:	2007      	movs	r0, #7
 8000c5e:	e713      	b.n	8000a88 <__gnu_unwind_pr_common+0xd0>
 8000c60:	4608      	mov	r0, r1
 8000c62:	3001      	adds	r0, #1
 8000c64:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c68:	f7ff fc52 	bl	8000510 <selfrel_offset31>
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	4602      	mov	r2, r0
 8000c70:	4648      	mov	r0, r9
 8000c72:	f7ff fe5b 	bl	800092c <_Unwind_SetGR>
 8000c76:	4648      	mov	r0, r9
 8000c78:	462a      	mov	r2, r5
 8000c7a:	4639      	mov	r1, r7
 8000c7c:	f7ff fe56 	bl	800092c <_Unwind_SetGR>
 8000c80:	2007      	movs	r0, #7
 8000c82:	e701      	b.n	8000a88 <__gnu_unwind_pr_common+0xd0>
 8000c84:	080065bd 	.word	0x080065bd

08000c88 <__aeabi_unwind_cpp_pr0>:
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e695      	b.n	80009b8 <__gnu_unwind_pr_common>

08000c8c <__aeabi_unwind_cpp_pr1>:
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e693      	b.n	80009b8 <__gnu_unwind_pr_common>

08000c90 <__aeabi_unwind_cpp_pr2>:
 8000c90:	2302      	movs	r3, #2
 8000c92:	e691      	b.n	80009b8 <__gnu_unwind_pr_common>

08000c94 <_Unwind_VRS_Pop>:
 8000c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c96:	4604      	mov	r4, r0
 8000c98:	b0c5      	sub	sp, #276	; 0x114
 8000c9a:	2904      	cmp	r1, #4
 8000c9c:	d80d      	bhi.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000c9e:	e8df f001 	tbb	[pc, r1]
 8000ca2:	0353      	.short	0x0353
 8000ca4:	310c      	.short	0x310c
 8000ca6:	0f          	.byte	0x0f
 8000ca7:	00          	.byte	0x00
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000cae:	b295      	uxth	r5, r2
 8000cb0:	d162      	bne.n	8000d78 <_Unwind_VRS_Pop+0xe4>
 8000cb2:	1972      	adds	r2, r6, r5
 8000cb4:	2a10      	cmp	r2, #16
 8000cb6:	f240 809b 	bls.w	8000df0 <_Unwind_VRS_Pop+0x15c>
 8000cba:	2002      	movs	r0, #2
 8000cbc:	b045      	add	sp, #276	; 0x114
 8000cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1fa      	bne.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000cc4:	2a10      	cmp	r2, #16
 8000cc6:	d8f8      	bhi.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000cc8:	6823      	ldr	r3, [r4, #0]
 8000cca:	06d8      	lsls	r0, r3, #27
 8000ccc:	f100 80c6 	bmi.w	8000e5c <_Unwind_VRS_Pop+0x1c8>
 8000cd0:	ae22      	add	r6, sp, #136	; 0x88
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	9201      	str	r2, [sp, #4]
 8000cd6:	f000 f973 	bl	8000fc0 <__gnu_Unwind_Save_WMMXC>
 8000cda:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000cdc:	9a01      	ldr	r2, [sp, #4]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	2501      	movs	r5, #1
 8000ce2:	fa05 f103 	lsl.w	r1, r5, r3
 8000ce6:	4211      	tst	r1, r2
 8000ce8:	d003      	beq.n	8000cf2 <_Unwind_VRS_Pop+0x5e>
 8000cea:	6801      	ldr	r1, [r0, #0]
 8000cec:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000cf0:	3004      	adds	r0, #4
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	d1f4      	bne.n	8000ce2 <_Unwind_VRS_Pop+0x4e>
 8000cf8:	63a0      	str	r0, [r4, #56]	; 0x38
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	f000 f956 	bl	8000fac <__gnu_Unwind_Restore_WMMXC>
 8000d00:	2000      	movs	r0, #0
 8000d02:	e7db      	b.n	8000cbc <_Unwind_VRS_Pop+0x28>
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d1d8      	bne.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000d08:	0c15      	lsrs	r5, r2, #16
 8000d0a:	b297      	uxth	r7, r2
 8000d0c:	19eb      	adds	r3, r5, r7
 8000d0e:	2b10      	cmp	r3, #16
 8000d10:	d8d3      	bhi.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000d12:	6823      	ldr	r3, [r4, #0]
 8000d14:	071e      	lsls	r6, r3, #28
 8000d16:	f100 80b5 	bmi.w	8000e84 <_Unwind_VRS_Pop+0x1f0>
 8000d1a:	ae22      	add	r6, sp, #136	; 0x88
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	f000 f923 	bl	8000f68 <__gnu_Unwind_Save_WMMXD>
 8000d22:	00ed      	lsls	r5, r5, #3
 8000d24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d26:	b14f      	cbz	r7, 8000d3c <_Unwind_VRS_Pop+0xa8>
 8000d28:	3d04      	subs	r5, #4
 8000d2a:	1971      	adds	r1, r6, r5
 8000d2c:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000d30:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d34:	f841 2f04 	str.w	r2, [r1, #4]!
 8000d38:	4283      	cmp	r3, r0
 8000d3a:	d1f9      	bne.n	8000d30 <_Unwind_VRS_Pop+0x9c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	63a3      	str	r3, [r4, #56]	; 0x38
 8000d40:	f000 f8f0 	bl	8000f24 <__gnu_Unwind_Restore_WMMXD>
 8000d44:	2000      	movs	r0, #0
 8000d46:	e7b9      	b.n	8000cbc <_Unwind_VRS_Pop+0x28>
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1b6      	bne.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000d4c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000d4e:	b297      	uxth	r7, r2
 8000d50:	1d20      	adds	r0, r4, #4
 8000d52:	2601      	movs	r6, #1
 8000d54:	fa06 f103 	lsl.w	r1, r6, r3
 8000d58:	4239      	tst	r1, r7
 8000d5a:	f103 0301 	add.w	r3, r3, #1
 8000d5e:	d002      	beq.n	8000d66 <_Unwind_VRS_Pop+0xd2>
 8000d60:	6829      	ldr	r1, [r5, #0]
 8000d62:	6001      	str	r1, [r0, #0]
 8000d64:	3504      	adds	r5, #4
 8000d66:	2b10      	cmp	r3, #16
 8000d68:	f100 0004 	add.w	r0, r0, #4
 8000d6c:	d1f2      	bne.n	8000d54 <_Unwind_VRS_Pop+0xc0>
 8000d6e:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000d72:	d13b      	bne.n	8000dec <_Unwind_VRS_Pop+0x158>
 8000d74:	63a5      	str	r5, [r4, #56]	; 0x38
 8000d76:	e7a1      	b.n	8000cbc <_Unwind_VRS_Pop+0x28>
 8000d78:	2b05      	cmp	r3, #5
 8000d7a:	d19e      	bne.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000d7c:	1977      	adds	r7, r6, r5
 8000d7e:	2f20      	cmp	r7, #32
 8000d80:	d89b      	bhi.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000d82:	2e0f      	cmp	r6, #15
 8000d84:	d966      	bls.n	8000e54 <_Unwind_VRS_Pop+0x1c0>
 8000d86:	462f      	mov	r7, r5
 8000d88:	2d00      	cmp	r5, #0
 8000d8a:	d13a      	bne.n	8000e02 <_Unwind_VRS_Pop+0x16e>
 8000d8c:	462a      	mov	r2, r5
 8000d8e:	2700      	movs	r7, #0
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d94:	dd72      	ble.n	8000e7c <_Unwind_VRS_Pop+0x1e8>
 8000d96:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000d9a:	4601      	mov	r1, r0
 8000d9c:	a844      	add	r0, sp, #272	; 0x110
 8000d9e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000da2:	388c      	subs	r0, #140	; 0x8c
 8000da4:	f851 5b04 	ldr.w	r5, [r1], #4
 8000da8:	f840 5f04 	str.w	r5, [r0, #4]!
 8000dac:	4291      	cmp	r1, r2
 8000dae:	d1f9      	bne.n	8000da4 <_Unwind_VRS_Pop+0x110>
 8000db0:	4608      	mov	r0, r1
 8000db2:	b197      	cbz	r7, 8000dda <_Unwind_VRS_Pop+0x146>
 8000db4:	2e10      	cmp	r6, #16
 8000db6:	4632      	mov	r2, r6
 8000db8:	a944      	add	r1, sp, #272	; 0x110
 8000dba:	bf38      	it	cc
 8000dbc:	2210      	movcc	r2, #16
 8000dbe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000dc2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000dc6:	0079      	lsls	r1, r7, #1
 8000dc8:	3a04      	subs	r2, #4
 8000dca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000dce:	f850 5b04 	ldr.w	r5, [r0], #4
 8000dd2:	f842 5f04 	str.w	r5, [r2, #4]!
 8000dd6:	4288      	cmp	r0, r1
 8000dd8:	d1f9      	bne.n	8000dce <_Unwind_VRS_Pop+0x13a>
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d048      	beq.n	8000e70 <_Unwind_VRS_Pop+0x1dc>
 8000dde:	2e0f      	cmp	r6, #15
 8000de0:	63a1      	str	r1, [r4, #56]	; 0x38
 8000de2:	d933      	bls.n	8000e4c <_Unwind_VRS_Pop+0x1b8>
 8000de4:	b117      	cbz	r7, 8000dec <_Unwind_VRS_Pop+0x158>
 8000de6:	a802      	add	r0, sp, #8
 8000de8:	f000 f894 	bl	8000f14 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000dec:	2000      	movs	r0, #0
 8000dee:	e765      	b.n	8000cbc <_Unwind_VRS_Pop+0x28>
 8000df0:	2e0f      	cmp	r6, #15
 8000df2:	f63f af62 	bhi.w	8000cba <_Unwind_VRS_Pop+0x26>
 8000df6:	2700      	movs	r7, #0
 8000df8:	6822      	ldr	r2, [r4, #0]
 8000dfa:	07d1      	lsls	r1, r2, #31
 8000dfc:	d417      	bmi.n	8000e2e <_Unwind_VRS_Pop+0x19a>
 8000dfe:	2f00      	cmp	r7, #0
 8000e00:	d060      	beq.n	8000ec4 <_Unwind_VRS_Pop+0x230>
 8000e02:	6822      	ldr	r2, [r4, #0]
 8000e04:	0751      	lsls	r1, r2, #29
 8000e06:	d445      	bmi.n	8000e94 <_Unwind_VRS_Pop+0x200>
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d04d      	beq.n	8000ea8 <_Unwind_VRS_Pop+0x214>
 8000e0c:	2e0f      	cmp	r6, #15
 8000e0e:	d806      	bhi.n	8000e1e <_Unwind_VRS_Pop+0x18a>
 8000e10:	a822      	add	r0, sp, #136	; 0x88
 8000e12:	9301      	str	r3, [sp, #4]
 8000e14:	f000 f87a 	bl	8000f0c <__gnu_Unwind_Save_VFP_D>
 8000e18:	9b01      	ldr	r3, [sp, #4]
 8000e1a:	2f00      	cmp	r7, #0
 8000e1c:	d0b6      	beq.n	8000d8c <_Unwind_VRS_Pop+0xf8>
 8000e1e:	a802      	add	r0, sp, #8
 8000e20:	9301      	str	r3, [sp, #4]
 8000e22:	f000 f87b 	bl	8000f1c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e26:	9b01      	ldr	r3, [sp, #4]
 8000e28:	f1c6 0210 	rsb	r2, r6, #16
 8000e2c:	e7b0      	b.n	8000d90 <_Unwind_VRS_Pop+0xfc>
 8000e2e:	f022 0101 	bic.w	r1, r2, #1
 8000e32:	2b05      	cmp	r3, #5
 8000e34:	6021      	str	r1, [r4, #0]
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	4620      	mov	r0, r4
 8000e3a:	d03b      	beq.n	8000eb4 <_Unwind_VRS_Pop+0x220>
 8000e3c:	f022 0203 	bic.w	r2, r2, #3
 8000e40:	f840 2b48 	str.w	r2, [r0], #72
 8000e44:	f000 f85a 	bl	8000efc <__gnu_Unwind_Save_VFP>
 8000e48:	9b01      	ldr	r3, [sp, #4]
 8000e4a:	e7d8      	b.n	8000dfe <_Unwind_VRS_Pop+0x16a>
 8000e4c:	a822      	add	r0, sp, #136	; 0x88
 8000e4e:	f000 f859 	bl	8000f04 <__gnu_Unwind_Restore_VFP_D>
 8000e52:	e7c7      	b.n	8000de4 <_Unwind_VRS_Pop+0x150>
 8000e54:	2f10      	cmp	r7, #16
 8000e56:	d9ce      	bls.n	8000df6 <_Unwind_VRS_Pop+0x162>
 8000e58:	3f10      	subs	r7, #16
 8000e5a:	e7cd      	b.n	8000df8 <_Unwind_VRS_Pop+0x164>
 8000e5c:	f023 0310 	bic.w	r3, r3, #16
 8000e60:	6023      	str	r3, [r4, #0]
 8000e62:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000e66:	9201      	str	r2, [sp, #4]
 8000e68:	f000 f8aa 	bl	8000fc0 <__gnu_Unwind_Save_WMMXC>
 8000e6c:	9a01      	ldr	r2, [sp, #4]
 8000e6e:	e72f      	b.n	8000cd0 <_Unwind_VRS_Pop+0x3c>
 8000e70:	3104      	adds	r1, #4
 8000e72:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e74:	a822      	add	r0, sp, #136	; 0x88
 8000e76:	f000 f83d 	bl	8000ef4 <__gnu_Unwind_Restore_VFP>
 8000e7a:	e7b7      	b.n	8000dec <_Unwind_VRS_Pop+0x158>
 8000e7c:	2f00      	cmp	r7, #0
 8000e7e:	d199      	bne.n	8000db4 <_Unwind_VRS_Pop+0x120>
 8000e80:	4601      	mov	r1, r0
 8000e82:	e7aa      	b.n	8000dda <_Unwind_VRS_Pop+0x146>
 8000e84:	f023 0308 	bic.w	r3, r3, #8
 8000e88:	6023      	str	r3, [r4, #0]
 8000e8a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000e8e:	f000 f86b 	bl	8000f68 <__gnu_Unwind_Save_WMMXD>
 8000e92:	e742      	b.n	8000d1a <_Unwind_VRS_Pop+0x86>
 8000e94:	4620      	mov	r0, r4
 8000e96:	f022 0204 	bic.w	r2, r2, #4
 8000e9a:	f840 2bd0 	str.w	r2, [r0], #208
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	f000 f83c 	bl	8000f1c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ea4:	9b01      	ldr	r3, [sp, #4]
 8000ea6:	e7af      	b.n	8000e08 <_Unwind_VRS_Pop+0x174>
 8000ea8:	a822      	add	r0, sp, #136	; 0x88
 8000eaa:	9301      	str	r3, [sp, #4]
 8000eac:	f000 f826 	bl	8000efc <__gnu_Unwind_Save_VFP>
 8000eb0:	9b01      	ldr	r3, [sp, #4]
 8000eb2:	e7b9      	b.n	8000e28 <_Unwind_VRS_Pop+0x194>
 8000eb4:	f041 0102 	orr.w	r1, r1, #2
 8000eb8:	f840 1b48 	str.w	r1, [r0], #72
 8000ebc:	f000 f826 	bl	8000f0c <__gnu_Unwind_Save_VFP_D>
 8000ec0:	9b01      	ldr	r3, [sp, #4]
 8000ec2:	e79c      	b.n	8000dfe <_Unwind_VRS_Pop+0x16a>
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d003      	beq.n	8000ed0 <_Unwind_VRS_Pop+0x23c>
 8000ec8:	2e0f      	cmp	r6, #15
 8000eca:	f63f af5f 	bhi.w	8000d8c <_Unwind_VRS_Pop+0xf8>
 8000ece:	e79f      	b.n	8000e10 <_Unwind_VRS_Pop+0x17c>
 8000ed0:	a822      	add	r0, sp, #136	; 0x88
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	f000 f812 	bl	8000efc <__gnu_Unwind_Save_VFP>
 8000ed8:	9b01      	ldr	r3, [sp, #4]
 8000eda:	e757      	b.n	8000d8c <_Unwind_VRS_Pop+0xf8>

08000edc <__restore_core_regs>:
 8000edc:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000ee0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000ee4:	469c      	mov	ip, r3
 8000ee6:	46a6      	mov	lr, r4
 8000ee8:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000eec:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000ef0:	46e5      	mov	sp, ip
 8000ef2:	bd00      	pop	{pc}

08000ef4 <__gnu_Unwind_Restore_VFP>:
 8000ef4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <__gnu_Unwind_Save_VFP>:
 8000efc:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <__gnu_Unwind_Restore_VFP_D>:
 8000f04:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <__gnu_Unwind_Save_VFP_D>:
 8000f0c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f14:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f1c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__gnu_Unwind_Restore_WMMXD>:
 8000f24:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f28:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f2c:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f30:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f34:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f38:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f3c:	ecf0 6102 	ldfe	f6, [r0], #8
 8000f40:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f44:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f48:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f4c:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f50:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f54:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f58:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f5c:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f60:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <__gnu_Unwind_Save_WMMXD>:
 8000f68:	ece0 0102 	stfe	f0, [r0], #8
 8000f6c:	ece0 1102 	stfe	f1, [r0], #8
 8000f70:	ece0 2102 	stfe	f2, [r0], #8
 8000f74:	ece0 3102 	stfe	f3, [r0], #8
 8000f78:	ece0 4102 	stfe	f4, [r0], #8
 8000f7c:	ece0 5102 	stfe	f5, [r0], #8
 8000f80:	ece0 6102 	stfe	f6, [r0], #8
 8000f84:	ece0 7102 	stfe	f7, [r0], #8
 8000f88:	ece0 8102 	stfp	f0, [r0], #8
 8000f8c:	ece0 9102 	stfp	f1, [r0], #8
 8000f90:	ece0 a102 	stfp	f2, [r0], #8
 8000f94:	ece0 b102 	stfp	f3, [r0], #8
 8000f98:	ece0 c102 	stfp	f4, [r0], #8
 8000f9c:	ece0 d102 	stfp	f5, [r0], #8
 8000fa0:	ece0 e102 	stfp	f6, [r0], #8
 8000fa4:	ece0 f102 	stfp	f7, [r0], #8
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <__gnu_Unwind_Restore_WMMXC>:
 8000fac:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000fb0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000fb4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000fb8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <__gnu_Unwind_Save_WMMXC>:
 8000fc0:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000fc4:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000fc8:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000fcc:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <_Unwind_RaiseException>:
 8000fd4:	46ec      	mov	ip, sp
 8000fd6:	b500      	push	{lr}
 8000fd8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000fdc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000fe0:	f04f 0300 	mov.w	r3, #0
 8000fe4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000fe8:	a901      	add	r1, sp, #4
 8000fea:	f7ff fbf3 	bl	80007d4 <__gnu_Unwind_RaiseException>
 8000fee:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000ff2:	b012      	add	sp, #72	; 0x48
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_Unwind_Resume>:
 8000ff8:	46ec      	mov	ip, sp
 8000ffa:	b500      	push	{lr}
 8000ffc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001000:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	e92d 000c 	stmdb	sp!, {r2, r3}
 800100c:	a901      	add	r1, sp, #4
 800100e:	f7ff fc1b 	bl	8000848 <__gnu_Unwind_Resume>
 8001012:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001016:	b012      	add	sp, #72	; 0x48
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <_Unwind_Resume_or_Rethrow>:
 800101c:	46ec      	mov	ip, sp
 800101e:	b500      	push	{lr}
 8001020:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001024:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001030:	a901      	add	r1, sp, #4
 8001032:	f7ff fc2b 	bl	800088c <__gnu_Unwind_Resume_or_Rethrow>
 8001036:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800103a:	b012      	add	sp, #72	; 0x48
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <_Unwind_ForcedUnwind>:
 8001040:	46ec      	mov	ip, sp
 8001042:	b500      	push	{lr}
 8001044:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001048:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001054:	ab01      	add	r3, sp, #4
 8001056:	f7ff fbed 	bl	8000834 <__gnu_Unwind_ForcedUnwind>
 800105a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800105e:	b012      	add	sp, #72	; 0x48
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <_Unwind_Backtrace>:
 8001064:	46ec      	mov	ip, sp
 8001066:	b500      	push	{lr}
 8001068:	e92d 5000 	stmdb	sp!, {ip, lr}
 800106c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001078:	aa01      	add	r2, sp, #4
 800107a:	f7ff fc65 	bl	8000948 <__gnu_Unwind_Backtrace>
 800107e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001082:	b012      	add	sp, #72	; 0x48
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <next_unwind_byte>:
 8001088:	7a02      	ldrb	r2, [r0, #8]
 800108a:	b91a      	cbnz	r2, 8001094 <next_unwind_byte+0xc>
 800108c:	7a43      	ldrb	r3, [r0, #9]
 800108e:	b943      	cbnz	r3, 80010a2 <next_unwind_byte+0x1a>
 8001090:	20b0      	movs	r0, #176	; 0xb0
 8001092:	4770      	bx	lr
 8001094:	6803      	ldr	r3, [r0, #0]
 8001096:	3a01      	subs	r2, #1
 8001098:	7202      	strb	r2, [r0, #8]
 800109a:	021a      	lsls	r2, r3, #8
 800109c:	6002      	str	r2, [r0, #0]
 800109e:	0e18      	lsrs	r0, r3, #24
 80010a0:	4770      	bx	lr
 80010a2:	6842      	ldr	r2, [r0, #4]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	b410      	push	{r4}
 80010a8:	7243      	strb	r3, [r0, #9]
 80010aa:	6813      	ldr	r3, [r2, #0]
 80010ac:	2103      	movs	r1, #3
 80010ae:	1d14      	adds	r4, r2, #4
 80010b0:	7201      	strb	r1, [r0, #8]
 80010b2:	021a      	lsls	r2, r3, #8
 80010b4:	6044      	str	r4, [r0, #4]
 80010b6:	6002      	str	r2, [r0, #0]
 80010b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010bc:	0e18      	lsrs	r0, r3, #24
 80010be:	4770      	bx	lr

080010c0 <_Unwind_GetGR.constprop.0>:
 80010c0:	b500      	push	{lr}
 80010c2:	b085      	sub	sp, #20
 80010c4:	aa03      	add	r2, sp, #12
 80010c6:	2300      	movs	r3, #0
 80010c8:	9200      	str	r2, [sp, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	220c      	movs	r2, #12
 80010ce:	f7ff fbed 	bl	80008ac <_Unwind_VRS_Get>
 80010d2:	9803      	ldr	r0, [sp, #12]
 80010d4:	b005      	add	sp, #20
 80010d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80010da:	bf00      	nop

080010dc <unwind_UCB_from_context>:
 80010dc:	e7f0      	b.n	80010c0 <_Unwind_GetGR.constprop.0>
 80010de:	bf00      	nop

080010e0 <__gnu_unwind_execute>:
 80010e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010e4:	4606      	mov	r6, r0
 80010e6:	b085      	sub	sp, #20
 80010e8:	460f      	mov	r7, r1
 80010ea:	f04f 0800 	mov.w	r8, #0
 80010ee:	4638      	mov	r0, r7
 80010f0:	f7ff ffca 	bl	8001088 <next_unwind_byte>
 80010f4:	28b0      	cmp	r0, #176	; 0xb0
 80010f6:	4604      	mov	r4, r0
 80010f8:	d023      	beq.n	8001142 <__gnu_unwind_execute+0x62>
 80010fa:	0605      	lsls	r5, r0, #24
 80010fc:	d427      	bmi.n	800114e <__gnu_unwind_execute+0x6e>
 80010fe:	2300      	movs	r3, #0
 8001100:	f10d 090c 	add.w	r9, sp, #12
 8001104:	4619      	mov	r1, r3
 8001106:	0085      	lsls	r5, r0, #2
 8001108:	220d      	movs	r2, #13
 800110a:	f8cd 9000 	str.w	r9, [sp]
 800110e:	4630      	mov	r0, r6
 8001110:	f7ff fbcc 	bl	80008ac <_Unwind_VRS_Get>
 8001114:	b2ed      	uxtb	r5, r5
 8001116:	9b03      	ldr	r3, [sp, #12]
 8001118:	f8cd 9000 	str.w	r9, [sp]
 800111c:	0660      	lsls	r0, r4, #25
 800111e:	f105 0504 	add.w	r5, r5, #4
 8001122:	bf4c      	ite	mi
 8001124:	1b5d      	submi	r5, r3, r5
 8001126:	18ed      	addpl	r5, r5, r3
 8001128:	2300      	movs	r3, #0
 800112a:	4619      	mov	r1, r3
 800112c:	220d      	movs	r2, #13
 800112e:	4630      	mov	r0, r6
 8001130:	9503      	str	r5, [sp, #12]
 8001132:	f7ff fbe1 	bl	80008f8 <_Unwind_VRS_Set>
 8001136:	4638      	mov	r0, r7
 8001138:	f7ff ffa6 	bl	8001088 <next_unwind_byte>
 800113c:	28b0      	cmp	r0, #176	; 0xb0
 800113e:	4604      	mov	r4, r0
 8001140:	d1db      	bne.n	80010fa <__gnu_unwind_execute+0x1a>
 8001142:	f1b8 0f00 	cmp.w	r8, #0
 8001146:	f000 8095 	beq.w	8001274 <__gnu_unwind_execute+0x194>
 800114a:	2000      	movs	r0, #0
 800114c:	e01c      	b.n	8001188 <__gnu_unwind_execute+0xa8>
 800114e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001152:	2b80      	cmp	r3, #128	; 0x80
 8001154:	d05d      	beq.n	8001212 <__gnu_unwind_execute+0x132>
 8001156:	2b90      	cmp	r3, #144	; 0x90
 8001158:	d019      	beq.n	800118e <__gnu_unwind_execute+0xae>
 800115a:	2ba0      	cmp	r3, #160	; 0xa0
 800115c:	d02c      	beq.n	80011b8 <__gnu_unwind_execute+0xd8>
 800115e:	2bb0      	cmp	r3, #176	; 0xb0
 8001160:	d03f      	beq.n	80011e2 <__gnu_unwind_execute+0x102>
 8001162:	2bc0      	cmp	r3, #192	; 0xc0
 8001164:	d06c      	beq.n	8001240 <__gnu_unwind_execute+0x160>
 8001166:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800116a:	2bd0      	cmp	r3, #208	; 0xd0
 800116c:	d10b      	bne.n	8001186 <__gnu_unwind_execute+0xa6>
 800116e:	f000 0207 	and.w	r2, r0, #7
 8001172:	3201      	adds	r2, #1
 8001174:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001178:	2305      	movs	r3, #5
 800117a:	2101      	movs	r1, #1
 800117c:	4630      	mov	r0, r6
 800117e:	f7ff fd89 	bl	8000c94 <_Unwind_VRS_Pop>
 8001182:	2800      	cmp	r0, #0
 8001184:	d0b3      	beq.n	80010ee <__gnu_unwind_execute+0xe>
 8001186:	2009      	movs	r0, #9
 8001188:	b005      	add	sp, #20
 800118a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800118e:	f000 030d 	and.w	r3, r0, #13
 8001192:	2b0d      	cmp	r3, #13
 8001194:	d0f7      	beq.n	8001186 <__gnu_unwind_execute+0xa6>
 8001196:	ad03      	add	r5, sp, #12
 8001198:	2300      	movs	r3, #0
 800119a:	f000 020f 	and.w	r2, r0, #15
 800119e:	4619      	mov	r1, r3
 80011a0:	9500      	str	r5, [sp, #0]
 80011a2:	4630      	mov	r0, r6
 80011a4:	f7ff fb82 	bl	80008ac <_Unwind_VRS_Get>
 80011a8:	2300      	movs	r3, #0
 80011aa:	9500      	str	r5, [sp, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	220d      	movs	r2, #13
 80011b0:	4630      	mov	r0, r6
 80011b2:	f7ff fba1 	bl	80008f8 <_Unwind_VRS_Set>
 80011b6:	e79a      	b.n	80010ee <__gnu_unwind_execute+0xe>
 80011b8:	43c2      	mvns	r2, r0
 80011ba:	f002 0307 	and.w	r3, r2, #7
 80011be:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80011c2:	411a      	asrs	r2, r3
 80011c4:	0701      	lsls	r1, r0, #28
 80011c6:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	bf48      	it	mi
 80011d0:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80011d4:	4619      	mov	r1, r3
 80011d6:	4630      	mov	r0, r6
 80011d8:	f7ff fd5c 	bl	8000c94 <_Unwind_VRS_Pop>
 80011dc:	2800      	cmp	r0, #0
 80011de:	d1d2      	bne.n	8001186 <__gnu_unwind_execute+0xa6>
 80011e0:	e785      	b.n	80010ee <__gnu_unwind_execute+0xe>
 80011e2:	28b1      	cmp	r0, #177	; 0xb1
 80011e4:	d057      	beq.n	8001296 <__gnu_unwind_execute+0x1b6>
 80011e6:	28b2      	cmp	r0, #178	; 0xb2
 80011e8:	d068      	beq.n	80012bc <__gnu_unwind_execute+0x1dc>
 80011ea:	28b3      	cmp	r0, #179	; 0xb3
 80011ec:	f000 8095 	beq.w	800131a <__gnu_unwind_execute+0x23a>
 80011f0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80011f4:	2bb4      	cmp	r3, #180	; 0xb4
 80011f6:	d0c6      	beq.n	8001186 <__gnu_unwind_execute+0xa6>
 80011f8:	f000 0207 	and.w	r2, r0, #7
 80011fc:	3201      	adds	r2, #1
 80011fe:	2301      	movs	r3, #1
 8001200:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001204:	4619      	mov	r1, r3
 8001206:	4630      	mov	r0, r6
 8001208:	f7ff fd44 	bl	8000c94 <_Unwind_VRS_Pop>
 800120c:	2800      	cmp	r0, #0
 800120e:	d1ba      	bne.n	8001186 <__gnu_unwind_execute+0xa6>
 8001210:	e76d      	b.n	80010ee <__gnu_unwind_execute+0xe>
 8001212:	4638      	mov	r0, r7
 8001214:	f7ff ff38 	bl	8001088 <next_unwind_byte>
 8001218:	0224      	lsls	r4, r4, #8
 800121a:	4304      	orrs	r4, r0
 800121c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001220:	d0b1      	beq.n	8001186 <__gnu_unwind_execute+0xa6>
 8001222:	0124      	lsls	r4, r4, #4
 8001224:	2300      	movs	r3, #0
 8001226:	b2a2      	uxth	r2, r4
 8001228:	4619      	mov	r1, r3
 800122a:	4630      	mov	r0, r6
 800122c:	f7ff fd32 	bl	8000c94 <_Unwind_VRS_Pop>
 8001230:	2800      	cmp	r0, #0
 8001232:	d1a8      	bne.n	8001186 <__gnu_unwind_execute+0xa6>
 8001234:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001238:	bf18      	it	ne
 800123a:	f04f 0801 	movne.w	r8, #1
 800123e:	e756      	b.n	80010ee <__gnu_unwind_execute+0xe>
 8001240:	28c6      	cmp	r0, #198	; 0xc6
 8001242:	d07d      	beq.n	8001340 <__gnu_unwind_execute+0x260>
 8001244:	28c7      	cmp	r0, #199	; 0xc7
 8001246:	f000 8086 	beq.w	8001356 <__gnu_unwind_execute+0x276>
 800124a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800124e:	2bc0      	cmp	r3, #192	; 0xc0
 8001250:	f000 8094 	beq.w	800137c <__gnu_unwind_execute+0x29c>
 8001254:	28c8      	cmp	r0, #200	; 0xc8
 8001256:	f000 809f 	beq.w	8001398 <__gnu_unwind_execute+0x2b8>
 800125a:	28c9      	cmp	r0, #201	; 0xc9
 800125c:	d193      	bne.n	8001186 <__gnu_unwind_execute+0xa6>
 800125e:	4638      	mov	r0, r7
 8001260:	f7ff ff12 	bl	8001088 <next_unwind_byte>
 8001264:	0302      	lsls	r2, r0, #12
 8001266:	f000 000f 	and.w	r0, r0, #15
 800126a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800126e:	3001      	adds	r0, #1
 8001270:	4302      	orrs	r2, r0
 8001272:	e781      	b.n	8001178 <__gnu_unwind_execute+0x98>
 8001274:	ac03      	add	r4, sp, #12
 8001276:	4643      	mov	r3, r8
 8001278:	220e      	movs	r2, #14
 800127a:	4641      	mov	r1, r8
 800127c:	9400      	str	r4, [sp, #0]
 800127e:	4630      	mov	r0, r6
 8001280:	f7ff fb14 	bl	80008ac <_Unwind_VRS_Get>
 8001284:	9400      	str	r4, [sp, #0]
 8001286:	4630      	mov	r0, r6
 8001288:	4643      	mov	r3, r8
 800128a:	220f      	movs	r2, #15
 800128c:	4641      	mov	r1, r8
 800128e:	f7ff fb33 	bl	80008f8 <_Unwind_VRS_Set>
 8001292:	4640      	mov	r0, r8
 8001294:	e778      	b.n	8001188 <__gnu_unwind_execute+0xa8>
 8001296:	4638      	mov	r0, r7
 8001298:	f7ff fef6 	bl	8001088 <next_unwind_byte>
 800129c:	2800      	cmp	r0, #0
 800129e:	f43f af72 	beq.w	8001186 <__gnu_unwind_execute+0xa6>
 80012a2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80012a6:	f47f af6e 	bne.w	8001186 <__gnu_unwind_execute+0xa6>
 80012aa:	4602      	mov	r2, r0
 80012ac:	4619      	mov	r1, r3
 80012ae:	4630      	mov	r0, r6
 80012b0:	f7ff fcf0 	bl	8000c94 <_Unwind_VRS_Pop>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	f47f af66 	bne.w	8001186 <__gnu_unwind_execute+0xa6>
 80012ba:	e718      	b.n	80010ee <__gnu_unwind_execute+0xe>
 80012bc:	2300      	movs	r3, #0
 80012be:	f10d 090c 	add.w	r9, sp, #12
 80012c2:	220d      	movs	r2, #13
 80012c4:	4619      	mov	r1, r3
 80012c6:	f8cd 9000 	str.w	r9, [sp]
 80012ca:	4630      	mov	r0, r6
 80012cc:	f7ff faee 	bl	80008ac <_Unwind_VRS_Get>
 80012d0:	4638      	mov	r0, r7
 80012d2:	f7ff fed9 	bl	8001088 <next_unwind_byte>
 80012d6:	0602      	lsls	r2, r0, #24
 80012d8:	f04f 0402 	mov.w	r4, #2
 80012dc:	d50c      	bpl.n	80012f8 <__gnu_unwind_execute+0x218>
 80012de:	9b03      	ldr	r3, [sp, #12]
 80012e0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80012e4:	40a0      	lsls	r0, r4
 80012e6:	4403      	add	r3, r0
 80012e8:	4638      	mov	r0, r7
 80012ea:	9303      	str	r3, [sp, #12]
 80012ec:	f7ff fecc 	bl	8001088 <next_unwind_byte>
 80012f0:	0603      	lsls	r3, r0, #24
 80012f2:	f104 0407 	add.w	r4, r4, #7
 80012f6:	d4f2      	bmi.n	80012de <__gnu_unwind_execute+0x1fe>
 80012f8:	9b03      	ldr	r3, [sp, #12]
 80012fa:	f8cd 9000 	str.w	r9, [sp]
 80012fe:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001302:	40a2      	lsls	r2, r4
 8001304:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001308:	2300      	movs	r3, #0
 800130a:	4414      	add	r4, r2
 800130c:	4619      	mov	r1, r3
 800130e:	220d      	movs	r2, #13
 8001310:	4630      	mov	r0, r6
 8001312:	9403      	str	r4, [sp, #12]
 8001314:	f7ff faf0 	bl	80008f8 <_Unwind_VRS_Set>
 8001318:	e6e9      	b.n	80010ee <__gnu_unwind_execute+0xe>
 800131a:	4638      	mov	r0, r7
 800131c:	f7ff feb4 	bl	8001088 <next_unwind_byte>
 8001320:	0301      	lsls	r1, r0, #12
 8001322:	f000 000f 	and.w	r0, r0, #15
 8001326:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800132a:	1c42      	adds	r2, r0, #1
 800132c:	2301      	movs	r3, #1
 800132e:	430a      	orrs	r2, r1
 8001330:	4630      	mov	r0, r6
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fcae 	bl	8000c94 <_Unwind_VRS_Pop>
 8001338:	2800      	cmp	r0, #0
 800133a:	f47f af24 	bne.w	8001186 <__gnu_unwind_execute+0xa6>
 800133e:	e6d6      	b.n	80010ee <__gnu_unwind_execute+0xe>
 8001340:	4638      	mov	r0, r7
 8001342:	f7ff fea1 	bl	8001088 <next_unwind_byte>
 8001346:	0301      	lsls	r1, r0, #12
 8001348:	f000 000f 	and.w	r0, r0, #15
 800134c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001350:	1c42      	adds	r2, r0, #1
 8001352:	2303      	movs	r3, #3
 8001354:	e7eb      	b.n	800132e <__gnu_unwind_execute+0x24e>
 8001356:	4638      	mov	r0, r7
 8001358:	f7ff fe96 	bl	8001088 <next_unwind_byte>
 800135c:	2800      	cmp	r0, #0
 800135e:	f43f af12 	beq.w	8001186 <__gnu_unwind_execute+0xa6>
 8001362:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001366:	f47f af0e 	bne.w	8001186 <__gnu_unwind_execute+0xa6>
 800136a:	4602      	mov	r2, r0
 800136c:	2104      	movs	r1, #4
 800136e:	4630      	mov	r0, r6
 8001370:	f7ff fc90 	bl	8000c94 <_Unwind_VRS_Pop>
 8001374:	2800      	cmp	r0, #0
 8001376:	f47f af06 	bne.w	8001186 <__gnu_unwind_execute+0xa6>
 800137a:	e6b8      	b.n	80010ee <__gnu_unwind_execute+0xe>
 800137c:	f000 020f 	and.w	r2, r0, #15
 8001380:	3201      	adds	r2, #1
 8001382:	2303      	movs	r3, #3
 8001384:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001388:	4619      	mov	r1, r3
 800138a:	4630      	mov	r0, r6
 800138c:	f7ff fc82 	bl	8000c94 <_Unwind_VRS_Pop>
 8001390:	2800      	cmp	r0, #0
 8001392:	f47f aef8 	bne.w	8001186 <__gnu_unwind_execute+0xa6>
 8001396:	e6aa      	b.n	80010ee <__gnu_unwind_execute+0xe>
 8001398:	4638      	mov	r0, r7
 800139a:	f7ff fe75 	bl	8001088 <next_unwind_byte>
 800139e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80013a2:	f000 030f 	and.w	r3, r0, #15
 80013a6:	3210      	adds	r2, #16
 80013a8:	3301      	adds	r3, #1
 80013aa:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80013ae:	e6e3      	b.n	8001178 <__gnu_unwind_execute+0x98>

080013b0 <__gnu_unwind_frame>:
 80013b0:	b510      	push	{r4, lr}
 80013b2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80013b4:	b084      	sub	sp, #16
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	2003      	movs	r0, #3
 80013ba:	f88d 000c 	strb.w	r0, [sp, #12]
 80013be:	79dc      	ldrb	r4, [r3, #7]
 80013c0:	f88d 400d 	strb.w	r4, [sp, #13]
 80013c4:	0212      	lsls	r2, r2, #8
 80013c6:	3308      	adds	r3, #8
 80013c8:	4608      	mov	r0, r1
 80013ca:	a901      	add	r1, sp, #4
 80013cc:	9201      	str	r2, [sp, #4]
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	f7ff fe86 	bl	80010e0 <__gnu_unwind_execute>
 80013d4:	b004      	add	sp, #16
 80013d6:	bd10      	pop	{r4, pc}

080013d8 <_Unwind_GetRegionStart>:
 80013d8:	b508      	push	{r3, lr}
 80013da:	f7ff fe7f 	bl	80010dc <unwind_UCB_from_context>
 80013de:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80013e0:	bd08      	pop	{r3, pc}
 80013e2:	bf00      	nop

080013e4 <_Unwind_GetLanguageSpecificData>:
 80013e4:	b508      	push	{r3, lr}
 80013e6:	f7ff fe79 	bl	80010dc <unwind_UCB_from_context>
 80013ea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80013ec:	79c3      	ldrb	r3, [r0, #7]
 80013ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80013f2:	3008      	adds	r0, #8
 80013f4:	bd08      	pop	{r3, pc}
 80013f6:	bf00      	nop

080013f8 <_Unwind_GetTextRelBase>:
 80013f8:	b508      	push	{r3, lr}
 80013fa:	f005 faab 	bl	8006954 <abort>
 80013fe:	bf00      	nop

08001400 <_Unwind_GetDataRelBase>:
 8001400:	b508      	push	{r3, lr}
 8001402:	f7ff fff9 	bl	80013f8 <_Unwind_GetTextRelBase>
 8001406:	bf00      	nop

08001408 <__aeabi_idiv0>:
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop

0800140c <_ZN8MCP23008C1Ev>:
 *      Author: MCT E560 Marc
 */

#include "MCP23008.h"

MCP23008::MCP23008() {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f868 	bl	80014ec <_ZN8MCP230XXC1Ev>
 800141c:	4a05      	ldr	r2, [pc, #20]	; (8001434 <_ZN8MCP23008C1Ev+0x28>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	ports = 1;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	60da      	str	r2, [r3, #12]
}
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	08006c88 	.word	0x08006c88

08001438 <_ZN8MCP23008D1Ev>:

MCP23008::~MCP23008() {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	4a05      	ldr	r2, [pc, #20]	; (8001458 <_ZN8MCP23008D1Ev+0x20>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f85f 	bl	800150c <_ZN8MCP230XXD1Ev>
	// TODO Auto-generated destructor stub
}
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	08006c88 	.word	0x08006c88

0800145c <_ZN8MCP23008D0Ev>:
MCP23008::~MCP23008() {
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
}
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ffe7 	bl	8001438 <_ZN8MCP23008D1Ev>
 800146a:	2114      	movs	r1, #20
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f004 ffeb 	bl	8006448 <_ZdlPvj>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <_ZN8MCP23017C1Ev>:
 *      Author: MCT E560 Marc
 */

#include "MCP23017.h"

MCP23017::MCP23017() {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f830 	bl	80014ec <_ZN8MCP230XXC1Ev>
 800148c:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <_ZN8MCP23017C1Ev+0x28>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	ports = 2;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2202      	movs	r2, #2
 8001496:	60da      	str	r2, [r3, #12]
}
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	08006cb0 	.word	0x08006cb0

080014a8 <_ZN8MCP23017D1Ev>:

MCP23017::~MCP23017() {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <_ZN8MCP23017D1Ev+0x20>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f827 	bl	800150c <_ZN8MCP230XXD1Ev>
	// TODO Auto-generated destructor stub
}
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	08006cb0 	.word	0x08006cb0

080014cc <_ZN8MCP23017D0Ev>:
MCP23017::~MCP23017() {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
}
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ffe7 	bl	80014a8 <_ZN8MCP23017D1Ev>
 80014da:	2114      	movs	r1, #20
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f004 ffb3 	bl	8006448 <_ZdlPvj>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <_ZN8MCP230XXC1Ev>:
 */

#include <stdint.h>
#include "MCP230XX.h"

MCP230XX::MCP230XX() {
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <_ZN8MCP230XXC1Ev+0x1c>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	601a      	str	r2, [r3, #0]

}
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	08006cd8 	.word	0x08006cd8

0800150c <_ZN8MCP230XXD1Ev>:

MCP230XX::~MCP230XX() {
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <_ZN8MCP230XXD1Ev+0x1c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub

}
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	08006cd8 	.word	0x08006cd8

0800152c <_ZN8MCP230XXD0Ev>:
MCP230XX::~MCP230XX() {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
}
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ffe9 	bl	800150c <_ZN8MCP230XXD1Ev>
 800153a:	2114      	movs	r1, #20
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f004 ff83 	bl	8006448 <_ZdlPvj>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_Init+0x30>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001556:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800155e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001566:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001568:	2003      	movs	r0, #3
 800156a:	f000 f8ab 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156e:	2000      	movs	r0, #0
 8001570:	f004 f8ce 	bl	8005710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001574:	f004 f8aa 	bl	80056cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001578:	2000      	movs	r0, #0
 800157a:	bd08      	pop	{r3, pc}
 800157c:	40023c00 	.word	0x40023c00

08001580 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001580:	4a03      	ldr	r2, [pc, #12]	; (8001590 <HAL_IncTick+0x10>)
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <HAL_IncTick+0x14>)
 8001584:	6811      	ldr	r1, [r2, #0]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	440b      	add	r3, r1
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	200040a4 	.word	0x200040a4
 8001594:	20000004 	.word	0x20000004

08001598 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001598:	4b01      	ldr	r3, [pc, #4]	; (80015a0 <HAL_GetTick+0x8>)
 800159a:	6818      	ldr	r0, [r3, #0]
}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	200040a4 	.word	0x200040a4

080015a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a4:	b538      	push	{r3, r4, r5, lr}
 80015a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015a8:	f7ff fff6 	bl	8001598 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ac:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80015ae:	bf1c      	itt	ne
 80015b0:	4b05      	ldrne	r3, [pc, #20]	; (80015c8 <HAL_Delay+0x24>)
 80015b2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80015b4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80015b6:	bf18      	it	ne
 80015b8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ba:	f7ff ffed 	bl	8001598 <HAL_GetTick>
 80015be:	1b40      	subs	r0, r0, r5
 80015c0:	4284      	cmp	r4, r0
 80015c2:	d8fa      	bhi.n	80015ba <HAL_Delay+0x16>
  {
  }
}
 80015c4:	bd38      	pop	{r3, r4, r5, pc}
 80015c6:	bf00      	nop
 80015c8:	20000004 	.word	0x20000004

080015cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015cc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check CAN handle */
  if (hcan == NULL)
 80015ce:	4604      	mov	r4, r0
 80015d0:	2800      	cmp	r0, #0
 80015d2:	d06e      	beq.n	80016b2 <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 80015d4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80015d8:	b90b      	cbnz	r3, 80015de <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015da:	f003 fb79 	bl	8004cd0 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015de:	6822      	ldr	r2, [r4, #0]
 80015e0:	6813      	ldr	r3, [r2, #0]
 80015e2:	f023 0302 	bic.w	r3, r3, #2
 80015e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015e8:	f7ff ffd6 	bl	8001598 <HAL_GetTick>
 80015ec:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	0791      	lsls	r1, r2, #30
 80015f4:	d451      	bmi.n	800169a <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	f042 0201 	orr.w	r2, r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015fe:	f7ff ffcb 	bl	8001598 <HAL_GetTick>
 8001602:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	07d2      	lsls	r2, r2, #31
 800160a:	d554      	bpl.n	80016b6 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800160c:	7e22      	ldrb	r2, [r4, #24]
 800160e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	bf0c      	ite	eq
 8001614:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001618:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800161e:	7e62      	ldrb	r2, [r4, #25]
 8001620:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	bf0c      	ite	eq
 8001626:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800162a:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800162e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001630:	7ea2      	ldrb	r2, [r4, #26]
 8001632:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	bf0c      	ite	eq
 8001638:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800163c:	f022 0220 	bicne.w	r2, r2, #32
 8001640:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001642:	7ee2      	ldrb	r2, [r4, #27]
 8001644:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	bf0c      	ite	eq
 800164a:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800164e:	f042 0210 	orrne.w	r2, r2, #16
 8001652:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001654:	7f22      	ldrb	r2, [r4, #28]
 8001656:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	bf0c      	ite	eq
 800165c:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001660:	f022 0208 	bicne.w	r2, r2, #8
 8001664:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001666:	7f62      	ldrb	r2, [r4, #29]
 8001668:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	bf0c      	ite	eq
 800166e:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001672:	f022 0204 	bicne.w	r2, r2, #4
 8001676:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001678:	68e1      	ldr	r1, [r4, #12]
 800167a:	68a2      	ldr	r2, [r4, #8]
 800167c:	430a      	orrs	r2, r1
 800167e:	6921      	ldr	r1, [r4, #16]
 8001680:	430a      	orrs	r2, r1
 8001682:	6961      	ldr	r1, [r4, #20]
 8001684:	430a      	orrs	r2, r1
 8001686:	6861      	ldr	r1, [r4, #4]
 8001688:	3901      	subs	r1, #1
 800168a:	430a      	orrs	r2, r1
 800168c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800168e:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001690:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001692:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001694:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8001698:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800169a:	f7ff ff7d 	bl	8001598 <HAL_GetTick>
 800169e:	1b40      	subs	r0, r0, r5
 80016a0:	280a      	cmp	r0, #10
 80016a2:	d9a4      	bls.n	80015ee <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016aa:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80016ac:	2305      	movs	r3, #5
 80016ae:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80016b2:	2001      	movs	r0, #1
}
 80016b4:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016b6:	f7ff ff6f 	bl	8001598 <HAL_GetTick>
 80016ba:	1b40      	subs	r0, r0, r5
 80016bc:	280a      	cmp	r0, #10
 80016be:	d9a1      	bls.n	8001604 <HAL_CAN_Init+0x38>
 80016c0:	e7f0      	b.n	80016a4 <HAL_CAN_Init+0xd8>
	...

080016c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016cc:	041b      	lsls	r3, r3, #16
 80016ce:	0c1b      	lsrs	r3, r3, #16
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80016d4:	0200      	lsls	r0, r0, #8
 80016d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80016de:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80016e0:	60d3      	str	r3, [r2, #12]
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ea:	b530      	push	{r4, r5, lr}
 80016ec:	68dc      	ldr	r4, [r3, #12]
 80016ee:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	bf28      	it	cs
 80016fc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fe:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 0501 	mov.w	r5, #1
 8001704:	fa05 f303 	lsl.w	r3, r5, r3
 8001708:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170c:	bf8c      	ite	hi
 800170e:	3c03      	subhi	r4, #3
 8001710:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001712:	4019      	ands	r1, r3
 8001714:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001716:	fa05 f404 	lsl.w	r4, r5, r4
 800171a:	3c01      	subs	r4, #1
 800171c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800171e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	ea42 0201 	orr.w	r2, r2, r1
 8001724:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	bfaf      	iteee	ge
 800172a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	f000 000f 	andlt.w	r0, r0, #15
 8001732:	4b06      	ldrlt	r3, [pc, #24]	; (800174c <HAL_NVIC_SetPriority+0x64>)
 8001734:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	bfa5      	ittet	ge
 8001738:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800173c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001744:	bd30      	pop	{r4, r5, pc}
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00
 800174c:	e000ed14 	.word	0xe000ed14

08001750 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001750:	0942      	lsrs	r2, r0, #5
 8001752:	2301      	movs	r3, #1
 8001754:	f000 001f 	and.w	r0, r0, #31
 8001758:	fa03 f000 	lsl.w	r0, r3, r0
 800175c:	4b01      	ldr	r3, [pc, #4]	; (8001764 <HAL_NVIC_EnableIRQ+0x14>)
 800175e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100

08001768 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001768:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800176a:	4604      	mov	r4, r0
 800176c:	b330      	cbz	r0, 80017bc <HAL_DMA2D_Init+0x54>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800176e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001772:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001776:	b91b      	cbnz	r3, 8001780 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001778:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800177c:	f003 fafc 	bl	8004d78 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001780:	6822      	ldr	r2, [r4, #0]
 8001782:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001784:	2302      	movs	r3, #2
 8001786:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800178a:	6813      	ldr	r3, [r2, #0]
 800178c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001790:	430b      	orrs	r3, r1
 8001792:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001794:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001796:	68a1      	ldr	r1, [r4, #8]
 8001798:	f023 0307 	bic.w	r3, r3, #7
 800179c:	430b      	orrs	r3, r1
 800179e:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 80017a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80017a2:	68e1      	ldr	r1, [r4, #12]
 80017a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017ac:	430b      	orrs	r3, r1
 80017ae:	6413      	str	r3, [r2, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80017b0:	2000      	movs	r0, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80017b2:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80017b4:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80017b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 80017ba:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80017bc:	2001      	movs	r0, #1
}
 80017be:	bd10      	pop	{r4, pc}

080017c0 <HAL_DMA2D_ConfigLayer>:
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80017c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80017c4:	2b01      	cmp	r3, #1
{
 80017c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdma2d);
 80017cc:	d03f      	beq.n	800184e <HAL_DMA2D_ConfigLayer+0x8e>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */

  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80017ce:	010e      	lsls	r6, r1, #4
 80017d0:	1985      	adds	r5, r0, r6
  __HAL_LOCK(hdma2d);
 80017d2:	2201      	movs	r2, #1
 80017d4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80017d8:	69ea      	ldr	r2, [r5, #28]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80017da:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80017de:	f1a2 0709 	sub.w	r7, r2, #9
 80017e2:	2f01      	cmp	r7, #1
 80017e4:	6803      	ldr	r3, [r0, #0]
  {
    regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80017e6:	f8d5 e020 	ldr.w	lr, [r5, #32]
 80017ea:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80017ec:	d811      	bhi.n	8001812 <HAL_DMA2D_ConfigLayer+0x52>
    regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80017ee:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 80017f2:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80017f6:	4322      	orrs	r2, r4
  {
    regValue =  pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 80017f8:	b981      	cbnz	r1, 800181c <HAL_DMA2D_ConfigLayer+0x5c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 80017fa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80017fc:	4919      	ldr	r1, [pc, #100]	; (8001864 <HAL_DMA2D_ConfigLayer+0xa4>)
 80017fe:	4021      	ands	r1, r4
 8001800:	430a      	orrs	r2, r1
 8001802:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001804:	6982      	ldr	r2, [r0, #24]
 8001806:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001808:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800180a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
 8001810:	e017      	b.n	8001842 <HAL_DMA2D_ConfigLayer+0x82>
    regValue =  pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
 8001812:	0624      	lsls	r4, r4, #24
 8001814:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001818:	4322      	orrs	r2, r4
  if(LayerIdx == 0)
 800181a:	b1d1      	cbz	r1, 8001852 <HAL_DMA2D_ConfigLayer+0x92>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 800181c:	69dd      	ldr	r5, [r3, #28]
 800181e:	4c11      	ldr	r4, [pc, #68]	; (8001864 <HAL_DMA2D_ConfigLayer+0xa4>)

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001820:	2f01      	cmp	r7, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001822:	ea04 0405 	and.w	r4, r4, r5
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001826:	4406      	add	r6, r0
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001828:	ea42 0204 	orr.w	r2, r2, r4
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800182c:	bf98      	it	ls
 800182e:	eb00 1101 	addls.w	r1, r0, r1, lsl #4
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001832:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001834:	69b2      	ldr	r2, [r6, #24]
 8001836:	611a      	str	r2, [r3, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001838:	bf9e      	ittt	ls
 800183a:	6a4a      	ldrls	r2, [r1, #36]	; 0x24
 800183c:	f022 427f 	bicls.w	r2, r2, #4278190080	; 0xff000000
 8001840:	621a      	strls	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001842:	2301      	movs	r3, #1
 8001844:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001848:	2300      	movs	r3, #0
 800184a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 800184e:	4618      	mov	r0, r3
 8001850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001852:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001854:	4903      	ldr	r1, [pc, #12]	; (8001864 <HAL_DMA2D_ConfigLayer+0xa4>)
 8001856:	4021      	ands	r1, r4
 8001858:	430a      	orrs	r2, r1
 800185a:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800185c:	6982      	ldr	r2, [r0, #24]
 800185e:	619a      	str	r2, [r3, #24]
 8001860:	e7ef      	b.n	8001842 <HAL_DMA2D_ConfigLayer+0x82>
 8001862:	bf00      	nop
 8001864:	00fcfff0 	.word	0x00fcfff0

08001868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800186c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001870:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8001a38 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001874:	4a6e      	ldr	r2, [pc, #440]	; (8001a30 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001876:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8001a3c <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800187e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001882:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001884:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001888:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800188c:	45b6      	cmp	lr, r6
 800188e:	f040 80b6 	bne.w	80019fe <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001892:	684c      	ldr	r4, [r1, #4]
 8001894:	f024 0710 	bic.w	r7, r4, #16
 8001898:	2f02      	cmp	r7, #2
 800189a:	d116      	bne.n	80018ca <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800189c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80018a0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018a4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80018a8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ac:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80018b0:	f04f 0c0f 	mov.w	ip, #15
 80018b4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80018b8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018bc:	690d      	ldr	r5, [r1, #16]
 80018be:	fa05 f50b 	lsl.w	r5, r5, fp
 80018c2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80018c6:	f8ca 5020 	str.w	r5, [sl, #32]
 80018ca:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ce:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80018d0:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018d4:	fa05 f50a 	lsl.w	r5, r5, sl
 80018d8:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018da:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018de:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e2:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e6:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e8:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ec:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80018ee:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018f2:	d811      	bhi.n	8001918 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80018f4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018fa:	68cf      	ldr	r7, [r1, #12]
 80018fc:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001900:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001904:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001906:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001908:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800190c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001910:	409f      	lsls	r7, r3
 8001912:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001916:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001918:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800191a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800191c:	688f      	ldr	r7, [r1, #8]
 800191e:	fa07 f70a 	lsl.w	r7, r7, sl
 8001922:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001924:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001926:	00e5      	lsls	r5, r4, #3
 8001928:	d569      	bpl.n	80019fe <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	f04f 0b00 	mov.w	fp, #0
 800192e:	f8cd b00c 	str.w	fp, [sp, #12]
 8001932:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001936:	4d3f      	ldr	r5, [pc, #252]	; (8001a34 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001938:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800193c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001940:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001944:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001948:	9703      	str	r7, [sp, #12]
 800194a:	9f03      	ldr	r7, [sp, #12]
 800194c:	f023 0703 	bic.w	r7, r3, #3
 8001950:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001954:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001958:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800195c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001960:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001964:	f04f 0e0f 	mov.w	lr, #15
 8001968:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800196c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800196e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001972:	d04b      	beq.n	8001a0c <HAL_GPIO_Init+0x1a4>
 8001974:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001978:	42a8      	cmp	r0, r5
 800197a:	d049      	beq.n	8001a10 <HAL_GPIO_Init+0x1a8>
 800197c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001980:	42a8      	cmp	r0, r5
 8001982:	d047      	beq.n	8001a14 <HAL_GPIO_Init+0x1ac>
 8001984:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001988:	42a8      	cmp	r0, r5
 800198a:	d045      	beq.n	8001a18 <HAL_GPIO_Init+0x1b0>
 800198c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001990:	42a8      	cmp	r0, r5
 8001992:	d043      	beq.n	8001a1c <HAL_GPIO_Init+0x1b4>
 8001994:	4548      	cmp	r0, r9
 8001996:	d043      	beq.n	8001a20 <HAL_GPIO_Init+0x1b8>
 8001998:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800199c:	42a8      	cmp	r0, r5
 800199e:	d041      	beq.n	8001a24 <HAL_GPIO_Init+0x1bc>
 80019a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019a4:	42a8      	cmp	r0, r5
 80019a6:	d03f      	beq.n	8001a28 <HAL_GPIO_Init+0x1c0>
 80019a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019ac:	42a8      	cmp	r0, r5
 80019ae:	d03d      	beq.n	8001a2c <HAL_GPIO_Init+0x1c4>
 80019b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019b4:	42a8      	cmp	r0, r5
 80019b6:	bf14      	ite	ne
 80019b8:	250a      	movne	r5, #10
 80019ba:	2509      	moveq	r5, #9
 80019bc:	fa05 f50c 	lsl.w	r5, r5, ip
 80019c0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80019c6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80019c8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ca:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80019ce:	bf0c      	ite	eq
 80019d0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80019d2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80019d4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80019d6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80019dc:	bf0c      	ite	eq
 80019de:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80019e0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80019e2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019e6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80019ea:	bf0c      	ite	eq
 80019ec:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80019ee:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80019f0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80019f2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80019f6:	bf54      	ite	pl
 80019f8:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80019fa:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80019fc:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019fe:	3301      	adds	r3, #1
 8001a00:	2b10      	cmp	r3, #16
 8001a02:	f47f af3c 	bne.w	800187e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001a06:	b005      	add	sp, #20
 8001a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a0c:	465d      	mov	r5, fp
 8001a0e:	e7d5      	b.n	80019bc <HAL_GPIO_Init+0x154>
 8001a10:	2501      	movs	r5, #1
 8001a12:	e7d3      	b.n	80019bc <HAL_GPIO_Init+0x154>
 8001a14:	2502      	movs	r5, #2
 8001a16:	e7d1      	b.n	80019bc <HAL_GPIO_Init+0x154>
 8001a18:	2503      	movs	r5, #3
 8001a1a:	e7cf      	b.n	80019bc <HAL_GPIO_Init+0x154>
 8001a1c:	2504      	movs	r5, #4
 8001a1e:	e7cd      	b.n	80019bc <HAL_GPIO_Init+0x154>
 8001a20:	2505      	movs	r5, #5
 8001a22:	e7cb      	b.n	80019bc <HAL_GPIO_Init+0x154>
 8001a24:	2506      	movs	r5, #6
 8001a26:	e7c9      	b.n	80019bc <HAL_GPIO_Init+0x154>
 8001a28:	2507      	movs	r5, #7
 8001a2a:	e7c7      	b.n	80019bc <HAL_GPIO_Init+0x154>
 8001a2c:	2508      	movs	r5, #8
 8001a2e:	e7c5      	b.n	80019bc <HAL_GPIO_Init+0x154>
 8001a30:	40013c00 	.word	0x40013c00
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40021400 	.word	0x40021400

08001a40 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a40:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001a42:	4604      	mov	r4, r0
 8001a44:	2800      	cmp	r0, #0
 8001a46:	d062      	beq.n	8001b0e <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001a48:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a50:	b91b      	cbnz	r3, 8001a5a <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a52:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a56:	f003 fa9d 	bl	8004f94 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a5a:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001a5c:	4e2d      	ldr	r6, [pc, #180]	; (8001b14 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001a5e:	4d2e      	ldr	r5, [pc, #184]	; (8001b18 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a60:	2324      	movs	r3, #36	; 0x24
 8001a62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001a66:	6813      	ldr	r3, [r2, #0]
 8001a68:	f023 0301 	bic.w	r3, r3, #1
 8001a6c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a6e:	f001 f849 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001a72:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001a74:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001a76:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001a7a:	42b3      	cmp	r3, r6
 8001a7c:	bf84      	itt	hi
 8001a7e:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001a82:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001a84:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001a86:	bf91      	iteee	ls
 8001a88:	1c69      	addls	r1, r5, #1
 8001a8a:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001a8e:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001a92:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001a94:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001a96:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001a98:	d821      	bhi.n	8001ade <HAL_I2C_Init+0x9e>
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001aa0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	bf98      	it	ls
 8001aa8:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001aaa:	6a21      	ldr	r1, [r4, #32]
 8001aac:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001aae:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001ab4:	68e1      	ldr	r1, [r4, #12]
 8001ab6:	6923      	ldr	r3, [r4, #16]
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001abc:	69a1      	ldr	r1, [r4, #24]
 8001abe:	6963      	ldr	r3, [r4, #20]
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ac4:	6813      	ldr	r3, [r2, #0]
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001acc:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001ace:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad0:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ad2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ad6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8001adc:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001ade:	68a1      	ldr	r1, [r4, #8]
 8001ae0:	b949      	cbnz	r1, 8001af6 <HAL_I2C_Init+0xb6>
 8001ae2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001ae6:	fbb0 f0f3 	udiv	r0, r0, r3
 8001aea:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001aee:	b163      	cbz	r3, 8001b0a <HAL_I2C_Init+0xca>
 8001af0:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001af4:	e7d9      	b.n	8001aaa <HAL_I2C_Init+0x6a>
 8001af6:	2119      	movs	r1, #25
 8001af8:	434b      	muls	r3, r1
 8001afa:	fbb0 f0f3 	udiv	r0, r0, r3
 8001afe:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001b02:	b113      	cbz	r3, 8001b0a <HAL_I2C_Init+0xca>
 8001b04:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001b08:	e7cf      	b.n	8001aaa <HAL_I2C_Init+0x6a>
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	e7cd      	b.n	8001aaa <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001b0e:	2001      	movs	r0, #1
}
 8001b10:	bd70      	pop	{r4, r5, r6, pc}
 8001b12:	bf00      	nop
 8001b14:	000186a0 	.word	0x000186a0
 8001b18:	000f4240 	.word	0x000f4240

08001b1c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001b1c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	2a20      	cmp	r2, #32
{
 8001b24:	b510      	push	{r4, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001b26:	d116      	bne.n	8001b56 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b28:	2324      	movs	r3, #36	; 0x24
 8001b2a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 8001b2e:	6803      	ldr	r3, [r0, #0]
 8001b30:	681c      	ldr	r4, [r3, #0]
 8001b32:	f024 0401 	bic.w	r4, r4, #1
 8001b36:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001b38:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001b3a:	f024 0410 	bic.w	r4, r4, #16
 8001b3e:	625c      	str	r4, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001b40:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001b42:	4321      	orrs	r1, r4
 8001b44:	6259      	str	r1, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c); 
 8001b46:	6819      	ldr	r1, [r3, #0]
 8001b48:	f041 0101 	orr.w	r1, r1, #1
 8001b4c:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b4e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_OK;
 8001b52:	2000      	movs	r0, #0
 8001b54:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001b56:	2002      	movs	r0, #2
  }
}
 8001b58:	bd10      	pop	{r4, pc}

08001b5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b5a:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001b5c:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001b60:	b2e4      	uxtb	r4, r4
 8001b62:	2c20      	cmp	r4, #32
 8001b64:	d116      	bne.n	8001b94 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);  
 8001b66:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b68:	2324      	movs	r3, #36	; 0x24
 8001b6a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);  
 8001b6e:	6815      	ldr	r5, [r2, #0]
 8001b70:	f025 0501 	bic.w	r5, r5, #1
 8001b74:	6015      	str	r5, [r2, #0]
    
    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8001b76:	6a55      	ldr	r5, [r2, #36]	; 0x24
    
    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8001b78:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001b7c:	402b      	ands	r3, r5
    
    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001b7e:	430b      	orrs	r3, r1
    
    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	6253      	str	r3, [r2, #36]	; 0x24
    
    __HAL_I2C_ENABLE(hi2c); 
 8001b84:	6813      	ldr	r3, [r2, #0]
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6013      	str	r3, [r2, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 8001b8c:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    
    return HAL_OK; 
 8001b90:	2000      	movs	r0, #0
 8001b92:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    return HAL_BUSY; 
 8001b94:	2002      	movs	r0, #2
  }
}  
 8001b96:	bd30      	pop	{r4, r5, pc}

08001b98 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1 = 0U;
  uint32_t tmp2 = 0U;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001b9c:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001b9e:	6804      	ldr	r4, [r0, #0]
 8001ba0:	684f      	ldr	r7, [r1, #4]
 8001ba2:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001ba4:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 8001ba8:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001bac:	3284      	adds	r2, #132	; 0x84
 8001bae:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001bb0:	f10e 0601 	add.w	r6, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001bb4:	6858      	ldr	r0, [r3, #4]
 8001bb6:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8001bba:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001bbc:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001bbe:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001bc2:	f3c0 400b 	ubfx	r0, r0, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001bc6:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001bc8:	4430      	add	r0, r6
 8001bca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001bce:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001bd0:	68e0      	ldr	r0, [r4, #12]
 8001bd2:	68cd      	ldr	r5, [r1, #12]
 8001bd4:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8001bd8:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001bda:	6898      	ldr	r0, [r3, #8]
 8001bdc:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8001be0:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 8001be2:	68e6      	ldr	r6, [r4, #12]
 8001be4:	6888      	ldr	r0, [r1, #8]
 8001be6:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8001bea:	3001      	adds	r0, #1
 8001bec:	4430      	add	r0, r6
 8001bee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001bf2:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001bf4:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001bf6:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001bf8:	f020 0007 	bic.w	r0, r0, #7
 8001bfc:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001bfe:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001c02:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001c04:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001c06:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001c0a:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001c0e:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8001c12:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8001c16:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8001c1a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8001c1e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001c22:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001c24:	6958      	ldr	r0, [r3, #20]
 8001c26:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8001c2a:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001c2c:	6948      	ldr	r0, [r1, #20]
 8001c2e:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001c30:	69d8      	ldr	r0, [r3, #28]
 8001c32:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8001c36:	f020 0007 	bic.w	r0, r0, #7
 8001c3a:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001c3c:	6a08      	ldr	r0, [r1, #32]
 8001c3e:	69cd      	ldr	r5, [r1, #28]
 8001c40:	4305      	orrs	r5, r0
 8001c42:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001c44:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001c46:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001c48:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001c4c:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001c4e:	b31e      	cbz	r6, 8001c98 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001c50:	2e01      	cmp	r6, #1
 8001c52:	d023      	beq.n	8001c9c <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001c54:	1eb0      	subs	r0, r6, #2
 8001c56:	2802      	cmp	r0, #2
 8001c58:	d922      	bls.n	8001ca0 <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001c5a:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8001c5c:	bf0c      	ite	eq
 8001c5e:	2002      	moveq	r0, #2
 8001c60:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001c62:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001c64:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8001c68:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001c6a:	6a8d      	ldr	r5, [r1, #40]	; 0x28

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001c6c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001c6e:	eba7 070e 	sub.w	r7, r7, lr
 8001c72:	4345      	muls	r5, r0
 8001c74:	4378      	muls	r0, r7
 8001c76:	3003      	adds	r0, #3
 8001c78:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001c7c:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001c7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001c80:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8001c84:	f020 0007 	bic.w	r0, r0, #7
 8001c88:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001c8a:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001c8c:	58a3      	ldr	r3, [r4, r2]
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	50a3      	str	r3, [r4, r2]
 8001c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8001c98:	2004      	movs	r0, #4
 8001c9a:	e7e2      	b.n	8001c62 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	e7e0      	b.n	8001c62 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8001ca0:	2002      	movs	r0, #2
 8001ca2:	e7de      	b.n	8001c62 <LTDC_SetConfig+0xca>

08001ca4 <HAL_LTDC_Init>:
{
 8001ca4:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	2800      	cmp	r0, #0
 8001caa:	d063      	beq.n	8001d74 <HAL_LTDC_Init+0xd0>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8001cac:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8001cb0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cb4:	b91b      	cbnz	r3, 8001cbe <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8001cb6:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8001cba:	f003 fa45 	bl	8005148 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001cc4:	6823      	ldr	r3, [r4, #0]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001cc6:	68a0      	ldr	r0, [r4, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001cc8:	699a      	ldr	r2, [r3, #24]
 8001cca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001cce:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001cd0:	6862      	ldr	r2, [r4, #4]
 8001cd2:	6999      	ldr	r1, [r3, #24]
 8001cd4:	4302      	orrs	r2, r0
 8001cd6:	68e0      	ldr	r0, [r4, #12]
 8001cd8:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001cda:	6920      	ldr	r0, [r4, #16]
 8001cdc:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	4924      	ldr	r1, [pc, #144]	; (8001d78 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001ce6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001ce8:	400a      	ands	r2, r1
 8001cea:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001cf2:	69a0      	ldr	r0, [r4, #24]
 8001cf4:	4302      	orrs	r2, r0
 8001cf6:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001cf8:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001cfa:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001d06:	6a20      	ldr	r0, [r4, #32]
 8001d08:	4302      	orrs	r2, r0
 8001d0a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001d0c:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001d0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001d10:	400a      	ands	r2, r1
 8001d12:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001d1a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001d1c:	4302      	orrs	r2, r0
 8001d1e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	4011      	ands	r1, r2
 8001d24:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001d26:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001d28:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001d2a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001d2e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001d30:	430a      	orrs	r2, r1
 8001d32:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001d34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001d36:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001d3a:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001d3e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8001d42:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001d44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d46:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8001d50:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001d54:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d58:	f042 0206 	orr.w	r2, r2, #6
 8001d5c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8001d5e:	699a      	ldr	r2, [r3, #24]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8001d66:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8001d68:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8001d6a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8001d6e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 8001d72:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001d74:	2001      	movs	r0, #1
}
 8001d76:	bd38      	pop	{r3, r4, r5, pc}
 8001d78:	f000f800 	.word	0xf000f800

08001d7c <HAL_LTDC_ConfigLayer>:
{   
 8001d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8001d7e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001d82:	2b01      	cmp	r3, #1
{   
 8001d84:	4606      	mov	r6, r0
 8001d86:	468e      	mov	lr, r1
 8001d88:	4694      	mov	ip, r2
 8001d8a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8001d8e:	d01d      	beq.n	8001dcc <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001d90:	2434      	movs	r4, #52	; 0x34
 8001d92:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001d94:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001d98:	fb04 6402 	mla	r4, r4, r2, r6
 8001d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  __HAL_LOCK(hltdc);
 8001d9e:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001da0:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 8001da2:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db0:	682b      	ldr	r3, [r5, #0]
 8001db2:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001db4:	4630      	mov	r0, r6
 8001db6:	4662      	mov	r2, ip
 8001db8:	4671      	mov	r1, lr
 8001dba:	f7ff feed 	bl	8001b98 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001dbe:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8001dc0:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001dc2:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001dc4:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001dc8:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8001dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001dce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8001dce:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001dd0:	4606      	mov	r6, r0
{ 
 8001dd2:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	d064      	beq.n	8001ea2 <HAL_PCD_Init+0xd4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dd8:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8001dda:	4634      	mov	r4, r6
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ddc:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 8001de0:	f003 fd8e 	bl	8005900 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 8001de4:	f854 0b10 	ldr.w	r0, [r4], #16
 8001de8:	f001 f9b2 	bl	8003150 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dee:	466d      	mov	r5, sp
 8001df0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dfe:	1d37      	adds	r7, r6, #4
 8001e00:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001e04:	6830      	ldr	r0, [r6, #0]
 8001e06:	f001 f963 	bl	80030d0 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	6830      	ldr	r0, [r6, #0]
 8001e0e:	f001 f9a5 	bl	800315c <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8001e12:	2100      	movs	r1, #0
 8001e14:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8001e16:	4632      	mov	r2, r6
 8001e18:	f106 0410 	add.w	r4, r6, #16
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8001e1c:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e1e:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 8001e20:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001e24:	87d1      	strh	r1, [r2, #62]	; 0x3e
 for (i = 0U; i < 15U; i++)
 8001e26:	3101      	adds	r1, #1
 8001e28:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].is_in = 1U;
 8001e2a:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e2e:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 8001e32:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 8001e34:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 8001e36:	64d0      	str	r0, [r2, #76]	; 0x4c
 8001e38:	f102 021c 	add.w	r2, r2, #28
 for (i = 0U; i < 15U; i++)
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0U;
 8001e44:	4611      	mov	r1, r2
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001e46:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->OUT_ep[i].num = i;
 8001e4a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001e50:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 for (i = 0U; i < 15U; i++)
 8001e54:	3201      	adds	r2, #1
 8001e56:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].is_in = 0U;
 8001e58:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e5c:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 8001e60:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e64:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 8001e68:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001e6c:	6041      	str	r1, [r0, #4]
 8001e6e:	f103 031c 	add.w	r3, r3, #28
 for (i = 0U; i < 15U; i++)
 8001e72:	d1e8      	bne.n	8001e46 <HAL_PCD_Init+0x78>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e76:	466d      	mov	r5, sp
 8001e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e82:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e86:	4670      	mov	r0, lr
 8001e88:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001e8c:	f001 f97e 	bl	800318c <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8001e90:	2301      	movs	r3, #1
 8001e92:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8001e96:	6830      	ldr	r0, [r6, #0]
 8001e98:	f001 fc9b 	bl	80037d2 <USB_DevDisconnect>
 return HAL_OK;
 8001e9c:	2000      	movs	r0, #0
}
 8001e9e:	b00b      	add	sp, #44	; 0x2c
 8001ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	e7fb      	b.n	8001e9e <HAL_PCD_Init+0xd0>

08001ea6 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8001ea6:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001eaa:	2b01      	cmp	r3, #1
{ 
 8001eac:	b510      	push	{r4, lr}
 8001eae:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001eb0:	d00c      	beq.n	8001ecc <HAL_PCD_Start+0x26>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8001eb8:	6800      	ldr	r0, [r0, #0]
 8001eba:	f001 fc7e 	bl	80037ba <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001ebe:	6820      	ldr	r0, [r4, #0]
 8001ec0:	f001 f940 	bl	8003144 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001eca:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8001ecc:	2002      	movs	r0, #2
}
 8001ece:	bd10      	pop	{r4, pc}

08001ed0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ed4:	f8d0 9000 	ldr.w	r9, [r0]
{
 8001ed8:	b087      	sub	sp, #28
 8001eda:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001edc:	4648      	mov	r0, r9
 8001ede:	f001 fcb2 	bl	8003846 <USB_GetMode>
 8001ee2:	9002      	str	r0, [sp, #8]
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	f040 812e 	bne.w	8002146 <HAL_PCD_IRQHandler+0x276>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8001eea:	6820      	ldr	r0, [r4, #0]
 8001eec:	f001 fc7d 	bl	80037ea <USB_ReadInterrupts>
 8001ef0:	2800      	cmp	r0, #0
 8001ef2:	f000 8128 	beq.w	8002146 <HAL_PCD_IRQHandler+0x276>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ef6:	6820      	ldr	r0, [r4, #0]
 8001ef8:	f001 fc77 	bl	80037ea <USB_ReadInterrupts>
 8001efc:	0785      	lsls	r5, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001efe:	bf48      	it	mi
 8001f00:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f02:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f04:	bf42      	ittt	mi
 8001f06:	6953      	ldrmi	r3, [r2, #20]
 8001f08:	f003 0302 	andmi.w	r3, r3, #2
 8001f0c:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f0e:	f001 fc6c 	bl	80037ea <USB_ReadInterrupts>
 8001f12:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8001f16:	d00a      	beq.n	8001f2e <HAL_PCD_IRQHandler+0x5e>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f18:	6820      	ldr	r0, [r4, #0]
 8001f1a:	f001 fc6a 	bl	80037f2 <USB_ReadDevAllOutEpInterrupt>
 8001f1e:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 8001f22:	4607      	mov	r7, r0
 8001f24:	46a2      	mov	sl, r4
      epnum = 0U;
 8001f26:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8001f28:	2f00      	cmp	r7, #0
 8001f2a:	f040 810f 	bne.w	800214c <HAL_PCD_IRQHandler+0x27c>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f2e:	6820      	ldr	r0, [r4, #0]
 8001f30:	f001 fc5b 	bl	80037ea <USB_ReadInterrupts>
 8001f34:	0341      	lsls	r1, r0, #13
 8001f36:	d50b      	bpl.n	8001f50 <HAL_PCD_IRQHandler+0x80>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f38:	6820      	ldr	r0, [r4, #0]
 8001f3a:	f001 fc62 	bl	8003802 <USB_ReadDevAllInEpInterrupt>
 8001f3e:	4626      	mov	r6, r4
 8001f40:	9003      	str	r0, [sp, #12]
 8001f42:	f509 6810 	add.w	r8, r9, #2304	; 0x900
      
      epnum = 0U;
 8001f46:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8001f48:	9b03      	ldr	r3, [sp, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 813f 	bne.w	80021ce <HAL_PCD_IRQHandler+0x2fe>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f50:	6820      	ldr	r0, [r4, #0]
 8001f52:	f001 fc4a 	bl	80037ea <USB_ReadInterrupts>
 8001f56:	2800      	cmp	r0, #0
 8001f58:	da0d      	bge.n	8001f76 <HAL_PCD_IRQHandler+0xa6>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f5a:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 8001f5e:	f023 0301 	bic.w	r3, r3, #1
 8001f62:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8001f66:	4620      	mov	r0, r4
 8001f68:	f003 fd48 	bl	80059fc <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f6c:	6822      	ldr	r2, [r4, #0]
 8001f6e:	6953      	ldr	r3, [r2, #20]
 8001f70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f74:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f76:	6820      	ldr	r0, [r4, #0]
 8001f78:	f001 fc37 	bl	80037ea <USB_ReadInterrupts>
 8001f7c:	0506      	lsls	r6, r0, #20
 8001f7e:	d50b      	bpl.n	8001f98 <HAL_PCD_IRQHandler+0xc8>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f80:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 8001f84:	07d8      	lsls	r0, r3, #31
 8001f86:	d502      	bpl.n	8001f8e <HAL_PCD_IRQHandler+0xbe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f003 fd1f 	bl	80059cc <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f8e:	6822      	ldr	r2, [r4, #0]
 8001f90:	6953      	ldr	r3, [r2, #20]
 8001f92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f96:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f98:	6820      	ldr	r0, [r4, #0]
 8001f9a:	f001 fc26 	bl	80037ea <USB_ReadInterrupts>
 8001f9e:	04c1      	lsls	r1, r0, #19
 8001fa0:	d537      	bpl.n	8002012 <HAL_PCD_IRQHandler+0x142>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8001fa2:	f509 6600 	add.w	r6, r9, #2048	; 0x800
 8001fa6:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8001fa8:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8001faa:	f023 0301 	bic.w	r3, r3, #1
 8001fae:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8001fb0:	2110      	movs	r1, #16
 8001fb2:	f001 f987 	bl	80032c4 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb6:	6861      	ldr	r1, [r4, #4]
 8001fb8:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8001fbc:	22ff      	movs	r2, #255	; 0xff
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fbe:	9802      	ldr	r0, [sp, #8]
 8001fc0:	4288      	cmp	r0, r1
 8001fc2:	f040 8192 	bne.w	80022ea <HAL_PCD_IRQHandler+0x41a>
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fca:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fcc:	69f3      	ldr	r3, [r6, #28]
 8001fce:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001fd2:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8001fd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 818f 	beq.w	80022fa <HAL_PCD_IRQHandler+0x42a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8001fdc:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8001fe0:	f043 030b 	orr.w	r3, r3, #11
 8001fe4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8001fe8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8001fea:	f043 030b 	orr.w	r3, r3, #11
 8001fee:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ff0:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ff4:	7c21      	ldrb	r1, [r4, #16]
 8001ff6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ff8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ffc:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002000:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8002004:	f001 fc3e 	bl	8003884 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002008:	6822      	ldr	r2, [r4, #0]
 800200a:	6953      	ldr	r3, [r2, #20]
 800200c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002010:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002012:	6820      	ldr	r0, [r4, #0]
 8002014:	f001 fbe9 	bl	80037ea <USB_ReadInterrupts>
 8002018:	0482      	lsls	r2, r0, #18
 800201a:	d51d      	bpl.n	8002058 <HAL_PCD_IRQHandler+0x188>
    {
      USB_ActivateSetup(hpcd->Instance);
 800201c:	6820      	ldr	r0, [r4, #0]
 800201e:	f001 fc16 	bl	800384e <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002022:	6820      	ldr	r0, [r4, #0]
 8002024:	68c3      	ldr	r3, [r0, #12]
 8002026:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800202a:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 800202c:	f001 f973 	bl	8003316 <USB_GetDevSpeed>
 8002030:	2800      	cmp	r0, #0
 8002032:	f040 816b 	bne.w	800230c <HAL_PCD_IRQHandler+0x43c>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002036:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8002038:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 800203a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800203e:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002040:	68d3      	ldr	r3, [r2, #12]
 8002042:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8002046:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8002048:	4620      	mov	r0, r4
 800204a:	f003 fcae 	bl	80059aa <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800204e:	6822      	ldr	r2, [r4, #0]
 8002050:	6953      	ldr	r3, [r2, #20]
 8002052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002056:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002058:	6820      	ldr	r0, [r4, #0]
 800205a:	f001 fbc6 	bl	80037ea <USB_ReadInterrupts>
 800205e:	06c3      	lsls	r3, r0, #27
 8002060:	d52b      	bpl.n	80020ba <HAL_PCD_IRQHandler+0x1ea>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002062:	6822      	ldr	r2, [r4, #0]
 8002064:	6993      	ldr	r3, [r2, #24]
 8002066:	f023 0310 	bic.w	r3, r3, #16
 800206a:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 800206c:	f8d9 6020 	ldr.w	r6, [r9, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8002070:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8002074:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002076:	f006 080f 	and.w	r8, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 800207a:	f040 81a8 	bne.w	80023ce <HAL_PCD_IRQHandler+0x4fe>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800207e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002082:	421e      	tst	r6, r3
 8002084:	d014      	beq.n	80020b0 <HAL_PCD_IRQHandler+0x1e0>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8002086:	271c      	movs	r7, #28
 8002088:	fb07 4708 	mla	r7, r7, r8, r4
 800208c:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8002090:	4632      	mov	r2, r6
 8002092:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8002096:	4648      	mov	r0, r9
 8002098:	f001 fb39 	bl	800370e <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 800209c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80020a0:	4433      	add	r3, r6
 80020a2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80020a6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80020aa:	441e      	add	r6, r3
 80020ac:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020b0:	6822      	ldr	r2, [r4, #0]
 80020b2:	6993      	ldr	r3, [r2, #24]
 80020b4:	f043 0310 	orr.w	r3, r3, #16
 80020b8:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020ba:	6820      	ldr	r0, [r4, #0]
 80020bc:	f001 fb95 	bl	80037ea <USB_ReadInterrupts>
 80020c0:	0707      	lsls	r7, r0, #28
 80020c2:	d507      	bpl.n	80020d4 <HAL_PCD_IRQHandler+0x204>
    {
      HAL_PCD_SOFCallback(hpcd);
 80020c4:	4620      	mov	r0, r4
 80020c6:	f003 fc6c 	bl	80059a2 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020ca:	6822      	ldr	r2, [r4, #0]
 80020cc:	6953      	ldr	r3, [r2, #20]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80020d4:	6820      	ldr	r0, [r4, #0]
 80020d6:	f001 fb88 	bl	80037ea <USB_ReadInterrupts>
 80020da:	02c6      	lsls	r6, r0, #11
 80020dc:	d508      	bpl.n	80020f0 <HAL_PCD_IRQHandler+0x220>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 80020de:	b2e9      	uxtb	r1, r5
 80020e0:	4620      	mov	r0, r4
 80020e2:	f003 fc93 	bl	8005a0c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80020e6:	6822      	ldr	r2, [r4, #0]
 80020e8:	6953      	ldr	r3, [r2, #20]
 80020ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ee:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020f0:	6820      	ldr	r0, [r4, #0]
 80020f2:	f001 fb7a 	bl	80037ea <USB_ReadInterrupts>
 80020f6:	0280      	lsls	r0, r0, #10
 80020f8:	d508      	bpl.n	800210c <HAL_PCD_IRQHandler+0x23c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 80020fa:	b2e9      	uxtb	r1, r5
 80020fc:	4620      	mov	r0, r4
 80020fe:	f003 fc81 	bl	8005a04 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002102:	6822      	ldr	r2, [r4, #0]
 8002104:	6953      	ldr	r3, [r2, #20]
 8002106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210a:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800210c:	6820      	ldr	r0, [r4, #0]
 800210e:	f001 fb6c 	bl	80037ea <USB_ReadInterrupts>
 8002112:	0041      	lsls	r1, r0, #1
 8002114:	d507      	bpl.n	8002126 <HAL_PCD_IRQHandler+0x256>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8002116:	4620      	mov	r0, r4
 8002118:	f003 fc7c 	bl	8005a14 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800211c:	6822      	ldr	r2, [r4, #0]
 800211e:	6953      	ldr	r3, [r2, #20]
 8002120:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002124:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002126:	6820      	ldr	r0, [r4, #0]
 8002128:	f001 fb5f 	bl	80037ea <USB_ReadInterrupts>
 800212c:	0742      	lsls	r2, r0, #29
 800212e:	d50a      	bpl.n	8002146 <HAL_PCD_IRQHandler+0x276>
    {
      temp = hpcd->Instance->GOTGINT;
 8002130:	6823      	ldr	r3, [r4, #0]
 8002132:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002134:	076b      	lsls	r3, r5, #29
 8002136:	d502      	bpl.n	800213e <HAL_PCD_IRQHandler+0x26e>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8002138:	4620      	mov	r0, r4
 800213a:	f003 fc6f 	bl	8005a1c <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	4315      	orrs	r5, r2
 8002144:	605d      	str	r5, [r3, #4]
    }
  }
}
 8002146:	b007      	add	sp, #28
 8002148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1U)
 800214c:	07f8      	lsls	r0, r7, #31
 800214e:	d538      	bpl.n	80021c2 <HAL_PCD_IRQHandler+0x2f2>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8002150:	fa5f fb85 	uxtb.w	fp, r5
 8002154:	4659      	mov	r1, fp
 8002156:	6820      	ldr	r0, [r4, #0]
 8002158:	f001 fb5b 	bl	8003812 <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800215c:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8002160:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002162:	d021      	beq.n	80021a8 <HAL_PCD_IRQHandler+0x2d8>
            if(hpcd->Init.dma_enable == 1U)
 8002164:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002166:	2301      	movs	r3, #1
            if(hpcd->Init.dma_enable == 1U)
 8002168:	4299      	cmp	r1, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800216a:	60b3      	str	r3, [r6, #8]
            if(hpcd->Init.dma_enable == 1U)
 800216c:	d10c      	bne.n	8002188 <HAL_PCD_IRQHandler+0x2b8>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 800216e:	6931      	ldr	r1, [r6, #16]
 8002170:	f8da 0200 	ldr.w	r0, [sl, #512]	; 0x200
 8002174:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8002178:	1a41      	subs	r1, r0, r1
 800217a:	f8ca 1210 	str.w	r1, [sl, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 800217e:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
 8002182:	4408      	add	r0, r1
 8002184:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8002188:	4659      	mov	r1, fp
 800218a:	4620      	mov	r0, r4
 800218c:	f003 fbf8 	bl	8005980 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8002190:	6921      	ldr	r1, [r4, #16]
 8002192:	2901      	cmp	r1, #1
 8002194:	d108      	bne.n	80021a8 <HAL_PCD_IRQHandler+0x2d8>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002196:	b93d      	cbnz	r5, 80021a8 <HAL_PCD_IRQHandler+0x2d8>
 8002198:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 800219c:	b922      	cbnz	r2, 80021a8 <HAL_PCD_IRQHandler+0x2d8>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800219e:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80021a2:	6820      	ldr	r0, [r4, #0]
 80021a4:	f001 fb6e 	bl	8003884 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80021a8:	f018 0f08 	tst.w	r8, #8
 80021ac:	d004      	beq.n	80021b8 <HAL_PCD_IRQHandler+0x2e8>
            HAL_PCD_SetupStageCallback(hpcd);
 80021ae:	4620      	mov	r0, r4
 80021b0:	f003 fbe0 	bl	8005974 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80021b4:	2308      	movs	r3, #8
 80021b6:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80021b8:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80021bc:	bf1c      	itt	ne
 80021be:	2310      	movne	r3, #16
 80021c0:	60b3      	strne	r3, [r6, #8]
        epnum++;
 80021c2:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80021c4:	087f      	lsrs	r7, r7, #1
 80021c6:	3620      	adds	r6, #32
 80021c8:	f10a 0a1c 	add.w	sl, sl, #28
 80021cc:	e6ac      	b.n	8001f28 <HAL_PCD_IRQHandler+0x58>
        if (ep_intr & 0x1U) /* In ITR */
 80021ce:	9b03      	ldr	r3, [sp, #12]
 80021d0:	07da      	lsls	r2, r3, #31
 80021d2:	d558      	bpl.n	8002286 <HAL_PCD_IRQHandler+0x3b6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80021d4:	fa5f fb85 	uxtb.w	fp, r5
 80021d8:	4659      	mov	r1, fp
 80021da:	6820      	ldr	r0, [r4, #0]
 80021dc:	f001 fb23 	bl	8003826 <USB_ReadDevInEPInterrupt>
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80021e0:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80021e2:	4607      	mov	r7, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80021e4:	d520      	bpl.n	8002228 <HAL_PCD_IRQHandler+0x358>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021e6:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = 0x1U << epnum;
 80021ea:	2101      	movs	r1, #1
 80021ec:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021ee:	ea23 0301 	bic.w	r3, r3, r1
 80021f2:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80021f6:	2301      	movs	r3, #1
 80021f8:	f8c8 3008 	str.w	r3, [r8, #8]
            if (hpcd->Init.dma_enable == 1U)
 80021fc:	6923      	ldr	r3, [r4, #16]
 80021fe:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8002200:	bf01      	itttt	eq
 8002202:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 8002204:	6c32      	ldreq	r2, [r6, #64]	; 0x40
 8002206:	189b      	addeq	r3, r3, r2
 8002208:	6473      	streq	r3, [r6, #68]	; 0x44
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 800220a:	4659      	mov	r1, fp
 800220c:	4620      	mov	r0, r4
 800220e:	f003 fbc0 	bl	8005992 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8002212:	6921      	ldr	r1, [r4, #16]
 8002214:	2901      	cmp	r1, #1
 8002216:	d107      	bne.n	8002228 <HAL_PCD_IRQHandler+0x358>
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002218:	b935      	cbnz	r5, 8002228 <HAL_PCD_IRQHandler+0x358>
 800221a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800221c:	b923      	cbnz	r3, 8002228 <HAL_PCD_IRQHandler+0x358>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800221e:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8002222:	6820      	ldr	r0, [r4, #0]
 8002224:	f001 fb2e 	bl	8003884 <USB_EP0_OutStart>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002228:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800222a:	bf44      	itt	mi
 800222c:	2308      	movmi	r3, #8
 800222e:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002232:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002234:	bf44      	itt	mi
 8002236:	2310      	movmi	r3, #16
 8002238:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800223c:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800223e:	bf44      	itt	mi
 8002240:	2340      	movmi	r3, #64	; 0x40
 8002242:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002246:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002248:	bf44      	itt	mi
 800224a:	2302      	movmi	r3, #2
 800224c:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002250:	063f      	lsls	r7, r7, #24
 8002252:	d518      	bpl.n	8002286 <HAL_PCD_IRQHandler+0x3b6>
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8002258:	6cf7      	ldr	r7, [r6, #76]	; 0x4c
 800225a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800225c:	1aff      	subs	r7, r7, r3
 800225e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002260:	429f      	cmp	r7, r3
 8002262:	bf28      	it	cs
 8002264:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8002266:	9b04      	ldr	r3, [sp, #16]
 8002268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800226c:	f107 0a03 	add.w	sl, r7, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8002270:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 8002274:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8002278:	9305      	str	r3, [sp, #20]
 800227a:	9b05      	ldr	r3, [sp, #20]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	b29b      	uxth	r3, r3
 8002280:	4553      	cmp	r3, sl
 8002282:	d808      	bhi.n	8002296 <HAL_PCD_IRQHandler+0x3c6>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 8002284:	b32f      	cbz	r7, 80022d2 <HAL_PCD_IRQHandler+0x402>
        ep_intr >>= 1U;
 8002286:	9b03      	ldr	r3, [sp, #12]
 8002288:	085b      	lsrs	r3, r3, #1
        epnum++;
 800228a:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 800228c:	9303      	str	r3, [sp, #12]
 800228e:	361c      	adds	r6, #28
 8002290:	f108 0820 	add.w	r8, r8, #32
 8002294:	e658      	b.n	8001f48 <HAL_PCD_IRQHandler+0x78>
          (ep->xfer_count < ep->xfer_len) &&
 8002296:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8002298:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800229a:	4293      	cmp	r3, r2
 800229c:	d9f2      	bls.n	8002284 <HAL_PCD_IRQHandler+0x3b4>
          (ep->xfer_count < ep->xfer_len) &&
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_PCD_IRQHandler+0x3b4>
 80022a2:	6c37      	ldr	r7, [r6, #64]	; 0x40
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80022a4:	9804      	ldr	r0, [sp, #16]
    len = ep->xfer_len - ep->xfer_count;
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	429f      	cmp	r7, r3
 80022aa:	bf28      	it	cs
 80022ac:	461f      	movcs	r7, r3
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80022ae:	7c23      	ldrb	r3, [r4, #16]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	465a      	mov	r2, fp
 80022b4:	b2bb      	uxth	r3, r7
 80022b6:	6c71      	ldr	r1, [r6, #68]	; 0x44
 80022b8:	f001 fa15 	bl	80036e6 <USB_WritePacket>
    ep->xfer_buff  += len;
 80022bc:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80022be:	443b      	add	r3, r7
 80022c0:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 80022c2:	6d33      	ldr	r3, [r6, #80]	; 0x50
    len32b = (len + 3U) / 4U;
 80022c4:	f107 0a03 	add.w	sl, r7, #3
    ep->xfer_count += len;
 80022c8:	443b      	add	r3, r7
    len32b = (len + 3U) / 4U;
 80022ca:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_count += len;
 80022ce:	6533      	str	r3, [r6, #80]	; 0x50
 80022d0:	e7d3      	b.n	800227a <HAL_PCD_IRQHandler+0x3aa>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022d2:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = 0x1U << epnum;
 80022d4:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022d6:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 80022da:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1U << epnum;
 80022de:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022e0:	ea23 0302 	bic.w	r3, r3, r2
 80022e4:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 80022e8:	e7cd      	b.n	8002286 <HAL_PCD_IRQHandler+0x3b6>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ea:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(i)->DIEPINT = 0xFFU;
 80022ec:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ee:	3001      	adds	r0, #1
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 80022f0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f4:	9002      	str	r0, [sp, #8]
 80022f6:	3320      	adds	r3, #32
 80022f8:	e661      	b.n	8001fbe <HAL_PCD_IRQHandler+0xee>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80022fa:	6973      	ldr	r3, [r6, #20]
 80022fc:	f043 030b 	orr.w	r3, r3, #11
 8002300:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8002302:	6933      	ldr	r3, [r6, #16]
 8002304:	f043 030b 	orr.w	r3, r3, #11
 8002308:	6133      	str	r3, [r6, #16]
 800230a:	e671      	b.n	8001ff0 <HAL_PCD_IRQHandler+0x120>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800230c:	2303      	movs	r3, #3
 800230e:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8002310:	2340      	movs	r3, #64	; 0x40
 8002312:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 8002314:	f000 fbf0 	bl	8002af8 <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8002318:	4b34      	ldr	r3, [pc, #208]	; (80023ec <HAL_PCD_IRQHandler+0x51c>)
 800231a:	4a35      	ldr	r2, [pc, #212]	; (80023f0 <HAL_PCD_IRQHandler+0x520>)
 800231c:	4403      	add	r3, r0
 800231e:	4293      	cmp	r3, r2
 8002320:	6823      	ldr	r3, [r4, #0]
 8002322:	d804      	bhi.n	800232e <HAL_PCD_IRQHandler+0x45e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800232a:	60da      	str	r2, [r3, #12]
 800232c:	e68c      	b.n	8002048 <HAL_PCD_IRQHandler+0x178>
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 800232e:	4a31      	ldr	r2, [pc, #196]	; (80023f4 <HAL_PCD_IRQHandler+0x524>)
 8002330:	4931      	ldr	r1, [pc, #196]	; (80023f8 <HAL_PCD_IRQHandler+0x528>)
 8002332:	4402      	add	r2, r0
 8002334:	428a      	cmp	r2, r1
 8002336:	d803      	bhi.n	8002340 <HAL_PCD_IRQHandler+0x470>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 800233e:	e7f4      	b.n	800232a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8002340:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8002344:	492d      	ldr	r1, [pc, #180]	; (80023fc <HAL_PCD_IRQHandler+0x52c>)
 8002346:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 800234a:	428a      	cmp	r2, r1
 800234c:	d803      	bhi.n	8002356 <HAL_PCD_IRQHandler+0x486>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8002354:	e7e9      	b.n	800232a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8002356:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 800235a:	4929      	ldr	r1, [pc, #164]	; (8002400 <HAL_PCD_IRQHandler+0x530>)
 800235c:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8002360:	428a      	cmp	r2, r1
 8002362:	d803      	bhi.n	800236c <HAL_PCD_IRQHandler+0x49c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800236a:	e7de      	b.n	800232a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 800236c:	4a25      	ldr	r2, [pc, #148]	; (8002404 <HAL_PCD_IRQHandler+0x534>)
 800236e:	4926      	ldr	r1, [pc, #152]	; (8002408 <HAL_PCD_IRQHandler+0x538>)
 8002370:	4402      	add	r2, r0
 8002372:	428a      	cmp	r2, r1
 8002374:	d803      	bhi.n	800237e <HAL_PCD_IRQHandler+0x4ae>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 800237c:	e7d5      	b.n	800232a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 800237e:	4a23      	ldr	r2, [pc, #140]	; (800240c <HAL_PCD_IRQHandler+0x53c>)
 8002380:	4923      	ldr	r1, [pc, #140]	; (8002410 <HAL_PCD_IRQHandler+0x540>)
 8002382:	4402      	add	r2, r0
 8002384:	428a      	cmp	r2, r1
 8002386:	d803      	bhi.n	8002390 <HAL_PCD_IRQHandler+0x4c0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 800238e:	e7cc      	b.n	800232a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8002390:	4a20      	ldr	r2, [pc, #128]	; (8002414 <HAL_PCD_IRQHandler+0x544>)
 8002392:	4921      	ldr	r1, [pc, #132]	; (8002418 <HAL_PCD_IRQHandler+0x548>)
 8002394:	4402      	add	r2, r0
 8002396:	428a      	cmp	r2, r1
 8002398:	d803      	bhi.n	80023a2 <HAL_PCD_IRQHandler+0x4d2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80023a0:	e7c3      	b.n	800232a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 80023a2:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 80023a6:	491d      	ldr	r1, [pc, #116]	; (800241c <HAL_PCD_IRQHandler+0x54c>)
 80023a8:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 80023ac:	428a      	cmp	r2, r1
 80023ae:	d803      	bhi.n	80023b8 <HAL_PCD_IRQHandler+0x4e8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023b6:	e7b8      	b.n	800232a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 80023b8:	4a19      	ldr	r2, [pc, #100]	; (8002420 <HAL_PCD_IRQHandler+0x550>)
 80023ba:	491a      	ldr	r1, [pc, #104]	; (8002424 <HAL_PCD_IRQHandler+0x554>)
 80023bc:	4402      	add	r2, r0
 80023be:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	bf94      	ite	ls
 80023c4:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80023c8:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 80023cc:	e7ad      	b.n	800232a <HAL_PCD_IRQHandler+0x45a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 80023ce:	2b06      	cmp	r3, #6
 80023d0:	f47f ae6e 	bne.w	80020b0 <HAL_PCD_IRQHandler+0x1e0>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023d4:	2208      	movs	r2, #8
 80023d6:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 80023da:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80023dc:	271c      	movs	r7, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023de:	f001 f996 	bl	800370e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80023e2:	fb07 4708 	mla	r7, r7, r8, r4
 80023e6:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80023ea:	e65c      	b.n	80020a6 <HAL_PCD_IRQHandler+0x1d6>
 80023ec:	ff275340 	.word	0xff275340
 80023f0:	000c34ff 	.word	0x000c34ff
 80023f4:	ff1b1e40 	.word	0xff1b1e40
 80023f8:	000f423f 	.word	0x000f423f
 80023fc:	00124f7f 	.word	0x00124f7f
 8002400:	0013d61f 	.word	0x0013d61f
 8002404:	fee5b660 	.word	0xfee5b660
 8002408:	0016e35f 	.word	0x0016e35f
 800240c:	feced300 	.word	0xfeced300
 8002410:	001b773f 	.word	0x001b773f
 8002414:	feb35bc0 	.word	0xfeb35bc0
 8002418:	002191bf 	.word	0x002191bf
 800241c:	0038751f 	.word	0x0038751f
 8002420:	fe5954e0 	.word	0xfe5954e0
 8002424:	00419cdf 	.word	0x00419cdf

08002428 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8002428:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 800242c:	2b01      	cmp	r3, #1
{
 800242e:	b510      	push	{r4, lr}
 8002430:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8002432:	d009      	beq.n	8002448 <HAL_PCD_SetAddress+0x20>
 8002434:	2301      	movs	r3, #1
 8002436:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 800243a:	6800      	ldr	r0, [r0, #0]
 800243c:	f001 f9ad 	bl	800379a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8002440:	2000      	movs	r0, #0
 8002442:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8002446:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8002448:	2002      	movs	r0, #2
}
 800244a:	bd10      	pop	{r4, pc}

0800244c <HAL_PCD_EP_Open>:
{
 800244c:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 800244e:	b24e      	sxtb	r6, r1
 8002450:	2e00      	cmp	r6, #0
{
 8002452:	4604      	mov	r4, r0
 8002454:	f04f 051c 	mov.w	r5, #28
 8002458:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800245c:	bfb5      	itete	lt
 800245e:	fb05 4100 	mlalt	r1, r5, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002462:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002466:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002468:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->num   = ep_addr & 0x7F;
 800246c:	b2c0      	uxtb	r0, r0
  if (ep->is_in)
 800246e:	2e00      	cmp	r6, #0
    ep->tx_fifo_num = ep->num;
 8002470:	bfb8      	it	lt
 8002472:	80c8      	strhlt	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK )
 8002474:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8002476:	70cb      	strb	r3, [r1, #3]
  ep->is_in = (0x80 & ep_addr) != 0;
 8002478:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->data_pid_start = 0U;
 800247c:	bf04      	itt	eq
 800247e:	2300      	moveq	r3, #0
 8002480:	710b      	strbeq	r3, [r1, #4]
  ep->num   = ep_addr & 0x7F;
 8002482:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8002484:	704d      	strb	r5, [r1, #1]
  __HAL_LOCK(hpcd); 
 8002486:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
  ep->maxpacket = ep_mps;
 800248a:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd); 
 800248c:	2b01      	cmp	r3, #1
 800248e:	d009      	beq.n	80024a4 <HAL_PCD_EP_Open+0x58>
 8002490:	2301      	movs	r3, #1
 8002492:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8002496:	6820      	ldr	r0, [r4, #0]
 8002498:	f000 ff58 	bl	800334c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 800249c:	2000      	movs	r0, #0
 800249e:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 80024a2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 80024a4:	2002      	movs	r0, #2
}
 80024a6:	bd70      	pop	{r4, r5, r6, pc}

080024a8 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 80024a8:	b24b      	sxtb	r3, r1
 80024aa:	2b00      	cmp	r3, #0
{  
 80024ac:	b510      	push	{r4, lr}
 80024ae:	f04f 021c 	mov.w	r2, #28
 80024b2:	4604      	mov	r4, r0
 80024b4:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80024b8:	bfb5      	itete	lt
 80024ba:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80024be:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80024c2:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80024c4:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = (0x80 & ep_addr) != 0;
 80024c8:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80024ca:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80024cc:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80024ce:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d009      	beq.n	80024ea <HAL_PCD_EP_Close+0x42>
 80024d6:	2301      	movs	r3, #1
 80024d8:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80024dc:	6820      	ldr	r0, [r4, #0]
 80024de:	f000 ff74 	bl	80033ca <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80024e2:	2000      	movs	r0, #0
 80024e4:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 80024e8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80024ea:	2002      	movs	r0, #2
}
 80024ec:	bd10      	pop	{r4, pc}

080024ee <HAL_PCD_EP_Receive>:
{
 80024ee:	b538      	push	{r3, r4, r5, lr}
 80024f0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80024f4:	241c      	movs	r4, #28
 80024f6:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 80024fa:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80024fe:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_len = len;
 8002502:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 8002506:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 8002508:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0U;
 800250c:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 8002510:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 8002514:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1U)
 8002518:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800251a:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800251c:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 800251e:	bf08      	it	eq
 8002520:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
 8002524:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8002526:	b91d      	cbnz	r5, 8002530 <HAL_PCD_EP_Receive+0x42>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002528:	f001 f870 	bl	800360c <USB_EP0StartXfer>
}
 800252c:	2000      	movs	r0, #0
 800252e:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002530:	f000 ffa6 	bl	8003480 <USB_EPStartXfer>
 8002534:	e7fa      	b.n	800252c <HAL_PCD_EP_Receive+0x3e>

08002536 <HAL_PCD_EP_Transmit>:
{
 8002536:	b538      	push	{r3, r4, r5, lr}
 8002538:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800253c:	241c      	movs	r4, #28
 800253e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8002542:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002546:	3138      	adds	r1, #56	; 0x38
  ep->xfer_len = len;
 8002548:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 800254e:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 8002550:	6462      	str	r2, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8002552:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 8002556:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (hpcd->Init.dma_enable == 1U)
 800255a:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800255c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800255e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8002560:	bf08      	it	eq
 8002562:	64a2      	streq	r2, [r4, #72]	; 0x48
 8002564:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8002566:	b91d      	cbnz	r5, 8002570 <HAL_PCD_EP_Transmit+0x3a>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002568:	f001 f850 	bl	800360c <USB_EP0StartXfer>
}
 800256c:	2000      	movs	r0, #0
 800256e:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002570:	f000 ff86 	bl	8003480 <USB_EPStartXfer>
 8002574:	e7fa      	b.n	800256c <HAL_PCD_EP_Transmit+0x36>

08002576 <HAL_PCD_EP_SetStall>:
{
 8002576:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8002578:	b24b      	sxtb	r3, r1
 800257a:	2b00      	cmp	r3, #0
 800257c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8002580:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002584:	bfb5      	itete	lt
 8002586:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 800258a:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800258e:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 8002590:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 1U;
 8002594:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002596:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8002598:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 800259a:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 800259c:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800259e:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80025a0:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80025a4:	4293      	cmp	r3, r2
{
 80025a6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80025a8:	d00f      	beq.n	80025ca <HAL_PCD_EP_SetStall+0x54>
 80025aa:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 80025ae:	6800      	ldr	r0, [r0, #0]
 80025b0:	f001 f8bb 	bl	800372a <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80025b4:	b92d      	cbnz	r5, 80025c2 <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80025b6:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80025ba:	7c21      	ldrb	r1, [r4, #16]
 80025bc:	6820      	ldr	r0, [r4, #0]
 80025be:	f001 f961 	bl	8003884 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 80025c2:	2000      	movs	r0, #0
 80025c4:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 80025c8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80025ca:	2002      	movs	r0, #2
}
 80025cc:	bd38      	pop	{r3, r4, r5, pc}

080025ce <HAL_PCD_EP_ClrStall>:
{
 80025ce:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 80025d0:	b24b      	sxtb	r3, r1
 80025d2:	2b00      	cmp	r3, #0
{
 80025d4:	4605      	mov	r5, r0
 80025d6:	f04f 021c 	mov.w	r2, #28
 80025da:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80025de:	bfb5      	itete	lt
 80025e0:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 80025e4:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80025e8:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 80025ea:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80025ee:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 80025f0:	2400      	movs	r4, #0
 80025f2:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80025f4:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80025f6:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80025f8:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d009      	beq.n	8002614 <HAL_PCD_EP_ClrStall+0x46>
 8002600:	2301      	movs	r3, #1
 8002602:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8002606:	6828      	ldr	r0, [r5, #0]
 8002608:	f001 f8ae 	bl	8003768 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 800260c:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 8002610:	4620      	mov	r0, r4
 8002612:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8002614:	2002      	movs	r0, #2
}
 8002616:	bd38      	pop	{r3, r4, r5, pc}

08002618 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002618:	6800      	ldr	r0, [r0, #0]
{
 800261a:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800261c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 800261e:	b921      	cbnz	r1, 800262a <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8002620:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002624:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
  }
  
  return HAL_OK;
}
 8002626:	2000      	movs	r0, #0
 8002628:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 800262a:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 800262c:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 800262e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 8002632:	1e4e      	subs	r6, r1, #1
 8002634:	b2ec      	uxtb	r4, r5
 8002636:	42b4      	cmp	r4, r6
 8002638:	f105 0501 	add.w	r5, r5, #1
 800263c:	db06      	blt.n	800264c <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 800263e:	313f      	adds	r1, #63	; 0x3f
 8002640:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8002644:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002648:	6043      	str	r3, [r0, #4]
 800264a:	e7ec      	b.n	8002626 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 800264c:	3440      	adds	r4, #64	; 0x40
 800264e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8002652:	6864      	ldr	r4, [r4, #4]
 8002654:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8002658:	e7ec      	b.n	8002634 <HAL_PCDEx_SetTxFiFo+0x1c>

0800265a <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800265a:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 800265c:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800265e:	6259      	str	r1, [r3, #36]	; 0x24
}
 8002660:	4770      	bx	lr
	...

08002664 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002664:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002668:	4604      	mov	r4, r0
 800266a:	b918      	cbnz	r0, 8002674 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800266c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800266e:	b002      	add	sp, #8
 8002670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002674:	6803      	ldr	r3, [r0, #0]
 8002676:	07dd      	lsls	r5, r3, #31
 8002678:	d410      	bmi.n	800269c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	0798      	lsls	r0, r3, #30
 800267e:	d458      	bmi.n	8002732 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002680:	6823      	ldr	r3, [r4, #0]
 8002682:	071a      	lsls	r2, r3, #28
 8002684:	f100 809a 	bmi.w	80027bc <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	075b      	lsls	r3, r3, #29
 800268c:	f100 80b8 	bmi.w	8002800 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002690:	69a2      	ldr	r2, [r4, #24]
 8002692:	2a00      	cmp	r2, #0
 8002694:	f040 8119 	bne.w	80028ca <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8002698:	2000      	movs	r0, #0
 800269a:	e7e8      	b.n	800266e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800269c:	4ba6      	ldr	r3, [pc, #664]	; (8002938 <HAL_RCC_OscConfig+0x2d4>)
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	f002 020c 	and.w	r2, r2, #12
 80026a4:	2a04      	cmp	r2, #4
 80026a6:	d007      	beq.n	80026b8 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ae:	2a08      	cmp	r2, #8
 80026b0:	d10a      	bne.n	80026c8 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	0259      	lsls	r1, r3, #9
 80026b6:	d507      	bpl.n	80026c8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b8:	4b9f      	ldr	r3, [pc, #636]	; (8002938 <HAL_RCC_OscConfig+0x2d4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	039a      	lsls	r2, r3, #14
 80026be:	d5dc      	bpl.n	800267a <HAL_RCC_OscConfig+0x16>
 80026c0:	6863      	ldr	r3, [r4, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1d9      	bne.n	800267a <HAL_RCC_OscConfig+0x16>
 80026c6:	e7d1      	b.n	800266c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c8:	6863      	ldr	r3, [r4, #4]
 80026ca:	4d9b      	ldr	r5, [pc, #620]	; (8002938 <HAL_RCC_OscConfig+0x2d4>)
 80026cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d0:	d111      	bne.n	80026f6 <HAL_RCC_OscConfig+0x92>
 80026d2:	682b      	ldr	r3, [r5, #0]
 80026d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80026da:	f7fe ff5d 	bl	8001598 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4d96      	ldr	r5, [pc, #600]	; (8002938 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80026e0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e2:	682b      	ldr	r3, [r5, #0]
 80026e4:	039b      	lsls	r3, r3, #14
 80026e6:	d4c8      	bmi.n	800267a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e8:	f7fe ff56 	bl	8001598 <HAL_GetTick>
 80026ec:	1b80      	subs	r0, r0, r6
 80026ee:	2864      	cmp	r0, #100	; 0x64
 80026f0:	d9f7      	bls.n	80026e2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80026f2:	2003      	movs	r0, #3
 80026f4:	e7bb      	b.n	800266e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026fa:	d104      	bne.n	8002706 <HAL_RCC_OscConfig+0xa2>
 80026fc:	682b      	ldr	r3, [r5, #0]
 80026fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002702:	602b      	str	r3, [r5, #0]
 8002704:	e7e5      	b.n	80026d2 <HAL_RCC_OscConfig+0x6e>
 8002706:	682a      	ldr	r2, [r5, #0]
 8002708:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800270c:	602a      	str	r2, [r5, #0]
 800270e:	682a      	ldr	r2, [r5, #0]
 8002710:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002714:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1df      	bne.n	80026da <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800271a:	f7fe ff3d 	bl	8001598 <HAL_GetTick>
 800271e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002720:	682b      	ldr	r3, [r5, #0]
 8002722:	039f      	lsls	r7, r3, #14
 8002724:	d5a9      	bpl.n	800267a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002726:	f7fe ff37 	bl	8001598 <HAL_GetTick>
 800272a:	1b80      	subs	r0, r0, r6
 800272c:	2864      	cmp	r0, #100	; 0x64
 800272e:	d9f7      	bls.n	8002720 <HAL_RCC_OscConfig+0xbc>
 8002730:	e7df      	b.n	80026f2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002732:	4b81      	ldr	r3, [pc, #516]	; (8002938 <HAL_RCC_OscConfig+0x2d4>)
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	f012 0f0c 	tst.w	r2, #12
 800273a:	d007      	beq.n	800274c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002742:	2a08      	cmp	r2, #8
 8002744:	d111      	bne.n	800276a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	025e      	lsls	r6, r3, #9
 800274a:	d40e      	bmi.n	800276a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274c:	4b7a      	ldr	r3, [pc, #488]	; (8002938 <HAL_RCC_OscConfig+0x2d4>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	0795      	lsls	r5, r2, #30
 8002752:	d502      	bpl.n	800275a <HAL_RCC_OscConfig+0xf6>
 8002754:	68e2      	ldr	r2, [r4, #12]
 8002756:	2a01      	cmp	r2, #1
 8002758:	d188      	bne.n	800266c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	6921      	ldr	r1, [r4, #16]
 800275e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002762:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002766:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002768:	e78a      	b.n	8002680 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800276a:	68e2      	ldr	r2, [r4, #12]
 800276c:	4b73      	ldr	r3, [pc, #460]	; (800293c <HAL_RCC_OscConfig+0x2d8>)
 800276e:	b1b2      	cbz	r2, 800279e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002770:	2201      	movs	r2, #1
 8002772:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002774:	f7fe ff10 	bl	8001598 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002778:	4d6f      	ldr	r5, [pc, #444]	; (8002938 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800277a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277c:	682b      	ldr	r3, [r5, #0]
 800277e:	0798      	lsls	r0, r3, #30
 8002780:	d507      	bpl.n	8002792 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002782:	682b      	ldr	r3, [r5, #0]
 8002784:	6922      	ldr	r2, [r4, #16]
 8002786:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800278a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800278e:	602b      	str	r3, [r5, #0]
 8002790:	e776      	b.n	8002680 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002792:	f7fe ff01 	bl	8001598 <HAL_GetTick>
 8002796:	1b80      	subs	r0, r0, r6
 8002798:	2802      	cmp	r0, #2
 800279a:	d9ef      	bls.n	800277c <HAL_RCC_OscConfig+0x118>
 800279c:	e7a9      	b.n	80026f2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800279e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027a0:	f7fe fefa 	bl	8001598 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a4:	4d64      	ldr	r5, [pc, #400]	; (8002938 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80027a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a8:	682b      	ldr	r3, [r5, #0]
 80027aa:	0799      	lsls	r1, r3, #30
 80027ac:	f57f af68 	bpl.w	8002680 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b0:	f7fe fef2 	bl	8001598 <HAL_GetTick>
 80027b4:	1b80      	subs	r0, r0, r6
 80027b6:	2802      	cmp	r0, #2
 80027b8:	d9f6      	bls.n	80027a8 <HAL_RCC_OscConfig+0x144>
 80027ba:	e79a      	b.n	80026f2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027bc:	6962      	ldr	r2, [r4, #20]
 80027be:	4b60      	ldr	r3, [pc, #384]	; (8002940 <HAL_RCC_OscConfig+0x2dc>)
 80027c0:	b17a      	cbz	r2, 80027e2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80027c6:	f7fe fee7 	bl	8001598 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ca:	4d5b      	ldr	r5, [pc, #364]	; (8002938 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80027cc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80027d0:	079f      	lsls	r7, r3, #30
 80027d2:	f53f af59 	bmi.w	8002688 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d6:	f7fe fedf 	bl	8001598 <HAL_GetTick>
 80027da:	1b80      	subs	r0, r0, r6
 80027dc:	2802      	cmp	r0, #2
 80027de:	d9f6      	bls.n	80027ce <HAL_RCC_OscConfig+0x16a>
 80027e0:	e787      	b.n	80026f2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80027e2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80027e4:	f7fe fed8 	bl	8001598 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e8:	4d53      	ldr	r5, [pc, #332]	; (8002938 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80027ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ec:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80027ee:	0798      	lsls	r0, r3, #30
 80027f0:	f57f af4a 	bpl.w	8002688 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f4:	f7fe fed0 	bl	8001598 <HAL_GetTick>
 80027f8:	1b80      	subs	r0, r0, r6
 80027fa:	2802      	cmp	r0, #2
 80027fc:	d9f6      	bls.n	80027ec <HAL_RCC_OscConfig+0x188>
 80027fe:	e778      	b.n	80026f2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002800:	4b4d      	ldr	r3, [pc, #308]	; (8002938 <HAL_RCC_OscConfig+0x2d4>)
 8002802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002804:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002808:	d128      	bne.n	800285c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800280a:	9201      	str	r2, [sp, #4]
 800280c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800280e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281a:	9301      	str	r3, [sp, #4]
 800281c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800281e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002820:	4d48      	ldr	r5, [pc, #288]	; (8002944 <HAL_RCC_OscConfig+0x2e0>)
 8002822:	682b      	ldr	r3, [r5, #0]
 8002824:	05d9      	lsls	r1, r3, #23
 8002826:	d51b      	bpl.n	8002860 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002828:	68a3      	ldr	r3, [r4, #8]
 800282a:	4d43      	ldr	r5, [pc, #268]	; (8002938 <HAL_RCC_OscConfig+0x2d4>)
 800282c:	2b01      	cmp	r3, #1
 800282e:	d127      	bne.n	8002880 <HAL_RCC_OscConfig+0x21c>
 8002830:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002838:	f7fe feae 	bl	8001598 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283c:	4d3e      	ldr	r5, [pc, #248]	; (8002938 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800283e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002844:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002846:	079b      	lsls	r3, r3, #30
 8002848:	d539      	bpl.n	80028be <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800284a:	2e00      	cmp	r6, #0
 800284c:	f43f af20 	beq.w	8002690 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002850:	4a39      	ldr	r2, [pc, #228]	; (8002938 <HAL_RCC_OscConfig+0x2d4>)
 8002852:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002858:	6413      	str	r3, [r2, #64]	; 0x40
 800285a:	e719      	b.n	8002690 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 800285c:	2600      	movs	r6, #0
 800285e:	e7df      	b.n	8002820 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002860:	682b      	ldr	r3, [r5, #0]
 8002862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002866:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002868:	f7fe fe96 	bl	8001598 <HAL_GetTick>
 800286c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286e:	682b      	ldr	r3, [r5, #0]
 8002870:	05da      	lsls	r2, r3, #23
 8002872:	d4d9      	bmi.n	8002828 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002874:	f7fe fe90 	bl	8001598 <HAL_GetTick>
 8002878:	1bc0      	subs	r0, r0, r7
 800287a:	2802      	cmp	r0, #2
 800287c:	d9f7      	bls.n	800286e <HAL_RCC_OscConfig+0x20a>
 800287e:	e738      	b.n	80026f2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002880:	2b05      	cmp	r3, #5
 8002882:	d104      	bne.n	800288e <HAL_RCC_OscConfig+0x22a>
 8002884:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002886:	f043 0304 	orr.w	r3, r3, #4
 800288a:	672b      	str	r3, [r5, #112]	; 0x70
 800288c:	e7d0      	b.n	8002830 <HAL_RCC_OscConfig+0x1cc>
 800288e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002890:	f022 0201 	bic.w	r2, r2, #1
 8002894:	672a      	str	r2, [r5, #112]	; 0x70
 8002896:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002898:	f022 0204 	bic.w	r2, r2, #4
 800289c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1ca      	bne.n	8002838 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80028a2:	f7fe fe79 	bl	8001598 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80028aa:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80028ae:	0798      	lsls	r0, r3, #30
 80028b0:	d5cb      	bpl.n	800284a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b2:	f7fe fe71 	bl	8001598 <HAL_GetTick>
 80028b6:	1bc0      	subs	r0, r0, r7
 80028b8:	4540      	cmp	r0, r8
 80028ba:	d9f7      	bls.n	80028ac <HAL_RCC_OscConfig+0x248>
 80028bc:	e719      	b.n	80026f2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028be:	f7fe fe6b 	bl	8001598 <HAL_GetTick>
 80028c2:	1bc0      	subs	r0, r0, r7
 80028c4:	4540      	cmp	r0, r8
 80028c6:	d9bd      	bls.n	8002844 <HAL_RCC_OscConfig+0x1e0>
 80028c8:	e713      	b.n	80026f2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ca:	4d1b      	ldr	r5, [pc, #108]	; (8002938 <HAL_RCC_OscConfig+0x2d4>)
 80028cc:	68ab      	ldr	r3, [r5, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	f43f aeca 	beq.w	800266c <HAL_RCC_OscConfig+0x8>
 80028d8:	4e1b      	ldr	r6, [pc, #108]	; (8002948 <HAL_RCC_OscConfig+0x2e4>)
 80028da:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028dc:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80028de:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e0:	d134      	bne.n	800294c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80028e2:	f7fe fe59 	bl	8001598 <HAL_GetTick>
 80028e6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e8:	682b      	ldr	r3, [r5, #0]
 80028ea:	0199      	lsls	r1, r3, #6
 80028ec:	d41e      	bmi.n	800292c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028ee:	6a22      	ldr	r2, [r4, #32]
 80028f0:	69e3      	ldr	r3, [r4, #28]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028f6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80028fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80028fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002900:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002902:	4c0d      	ldr	r4, [pc, #52]	; (8002938 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002904:	0852      	lsrs	r2, r2, #1
 8002906:	3a01      	subs	r2, #1
 8002908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800290c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800290e:	2301      	movs	r3, #1
 8002910:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002912:	f7fe fe41 	bl	8001598 <HAL_GetTick>
 8002916:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002918:	6823      	ldr	r3, [r4, #0]
 800291a:	019a      	lsls	r2, r3, #6
 800291c:	f53f aebc 	bmi.w	8002698 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002920:	f7fe fe3a 	bl	8001598 <HAL_GetTick>
 8002924:	1b40      	subs	r0, r0, r5
 8002926:	2802      	cmp	r0, #2
 8002928:	d9f6      	bls.n	8002918 <HAL_RCC_OscConfig+0x2b4>
 800292a:	e6e2      	b.n	80026f2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe fe34 	bl	8001598 <HAL_GetTick>
 8002930:	1bc0      	subs	r0, r0, r7
 8002932:	2802      	cmp	r0, #2
 8002934:	d9d8      	bls.n	80028e8 <HAL_RCC_OscConfig+0x284>
 8002936:	e6dc      	b.n	80026f2 <HAL_RCC_OscConfig+0x8e>
 8002938:	40023800 	.word	0x40023800
 800293c:	42470000 	.word	0x42470000
 8002940:	42470e80 	.word	0x42470e80
 8002944:	40007000 	.word	0x40007000
 8002948:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 800294c:	f7fe fe24 	bl	8001598 <HAL_GetTick>
 8002950:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002952:	682b      	ldr	r3, [r5, #0]
 8002954:	019b      	lsls	r3, r3, #6
 8002956:	f57f ae9f 	bpl.w	8002698 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295a:	f7fe fe1d 	bl	8001598 <HAL_GetTick>
 800295e:	1b00      	subs	r0, r0, r4
 8002960:	2802      	cmp	r0, #2
 8002962:	d9f6      	bls.n	8002952 <HAL_RCC_OscConfig+0x2ee>
 8002964:	e6c5      	b.n	80026f2 <HAL_RCC_OscConfig+0x8e>
 8002966:	bf00      	nop

08002968 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002968:	4913      	ldr	r1, [pc, #76]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800296a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800296c:	688b      	ldr	r3, [r1, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b04      	cmp	r3, #4
 8002974:	d003      	beq.n	800297e <HAL_RCC_GetSysClockFreq+0x16>
 8002976:	2b08      	cmp	r3, #8
 8002978:	d003      	beq.n	8002982 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800297a:	4810      	ldr	r0, [pc, #64]	; (80029bc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800297c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800297e:	4810      	ldr	r0, [pc, #64]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x58>)
 8002980:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002982:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002984:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002986:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002988:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298c:	bf14      	ite	ne
 800298e:	480c      	ldrne	r0, [pc, #48]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002990:	480a      	ldreq	r0, [pc, #40]	; (80029bc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002992:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002996:	bf18      	it	ne
 8002998:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800299a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800299e:	fba1 0100 	umull	r0, r1, r1, r0
 80029a2:	f7fd fc2f 	bl	8000204 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029a6:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x50>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80029ae:	3301      	adds	r3, #1
 80029b0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80029b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80029b6:	bd08      	pop	{r3, pc}
 80029b8:	40023800 	.word	0x40023800
 80029bc:	00f42400 	.word	0x00f42400
 80029c0:	017d7840 	.word	0x017d7840

080029c4 <HAL_RCC_ClockConfig>:
{
 80029c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029c8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80029ca:	4604      	mov	r4, r0
 80029cc:	b910      	cbnz	r0, 80029d4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80029ce:	2001      	movs	r0, #1
 80029d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d4:	4b44      	ldr	r3, [pc, #272]	; (8002ae8 <HAL_RCC_ClockConfig+0x124>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	f002 020f 	and.w	r2, r2, #15
 80029dc:	428a      	cmp	r2, r1
 80029de:	d328      	bcc.n	8002a32 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e0:	6821      	ldr	r1, [r4, #0]
 80029e2:	078f      	lsls	r7, r1, #30
 80029e4:	d42d      	bmi.n	8002a42 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e6:	07c8      	lsls	r0, r1, #31
 80029e8:	d440      	bmi.n	8002a6c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ea:	4b3f      	ldr	r3, [pc, #252]	; (8002ae8 <HAL_RCC_ClockConfig+0x124>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	f002 020f 	and.w	r2, r2, #15
 80029f2:	4295      	cmp	r5, r2
 80029f4:	d366      	bcc.n	8002ac4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f6:	6822      	ldr	r2, [r4, #0]
 80029f8:	0751      	lsls	r1, r2, #29
 80029fa:	d46c      	bmi.n	8002ad6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fc:	0713      	lsls	r3, r2, #28
 80029fe:	d507      	bpl.n	8002a10 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a00:	4a3a      	ldr	r2, [pc, #232]	; (8002aec <HAL_RCC_ClockConfig+0x128>)
 8002a02:	6921      	ldr	r1, [r4, #16]
 8002a04:	6893      	ldr	r3, [r2, #8]
 8002a06:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002a0a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a0e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a10:	f7ff ffaa 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8002a14:	4b35      	ldr	r3, [pc, #212]	; (8002aec <HAL_RCC_ClockConfig+0x128>)
 8002a16:	4a36      	ldr	r2, [pc, #216]	; (8002af0 <HAL_RCC_ClockConfig+0x12c>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a1e:	5cd3      	ldrb	r3, [r2, r3]
 8002a20:	40d8      	lsrs	r0, r3
 8002a22:	4b34      	ldr	r3, [pc, #208]	; (8002af4 <HAL_RCC_ClockConfig+0x130>)
 8002a24:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a26:	2000      	movs	r0, #0
 8002a28:	f002 fe72 	bl	8005710 <HAL_InitTick>
  return HAL_OK;
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	b2ca      	uxtb	r2, r1
 8002a34:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	4299      	cmp	r1, r3
 8002a3e:	d1c6      	bne.n	80029ce <HAL_RCC_ClockConfig+0xa>
 8002a40:	e7ce      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1c>
 8002a42:	4b2a      	ldr	r3, [pc, #168]	; (8002aec <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a48:	bf1e      	ittt	ne
 8002a4a:	689a      	ldrne	r2, [r3, #8]
 8002a4c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002a50:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a52:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a54:	bf42      	ittt	mi
 8002a56:	689a      	ldrmi	r2, [r3, #8]
 8002a58:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002a5c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	68a0      	ldr	r0, [r4, #8]
 8002a62:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a66:	4302      	orrs	r2, r0
 8002a68:	609a      	str	r2, [r3, #8]
 8002a6a:	e7bc      	b.n	80029e6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a6c:	6862      	ldr	r2, [r4, #4]
 8002a6e:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <HAL_RCC_ClockConfig+0x128>)
 8002a70:	2a01      	cmp	r2, #1
 8002a72:	d11d      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7a:	d0a8      	beq.n	80029ce <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a7c:	4e1b      	ldr	r6, [pc, #108]	; (8002aec <HAL_RCC_ClockConfig+0x128>)
 8002a7e:	68b3      	ldr	r3, [r6, #8]
 8002a80:	f023 0303 	bic.w	r3, r3, #3
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002a88:	f7fe fd86 	bl	8001598 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002a90:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	68b3      	ldr	r3, [r6, #8]
 8002a94:	6862      	ldr	r2, [r4, #4]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a9e:	d0a4      	beq.n	80029ea <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa0:	f7fe fd7a 	bl	8001598 <HAL_GetTick>
 8002aa4:	1bc0      	subs	r0, r0, r7
 8002aa6:	4540      	cmp	r0, r8
 8002aa8:	d9f3      	bls.n	8002a92 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002aaa:	2003      	movs	r0, #3
}
 8002aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ab0:	1e91      	subs	r1, r2, #2
 8002ab2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ab6:	d802      	bhi.n	8002abe <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002abc:	e7dd      	b.n	8002a7a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abe:	f013 0f02 	tst.w	r3, #2
 8002ac2:	e7da      	b.n	8002a7a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac4:	b2ea      	uxtb	r2, r5
 8002ac6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	429d      	cmp	r5, r3
 8002ad0:	f47f af7d 	bne.w	80029ce <HAL_RCC_ClockConfig+0xa>
 8002ad4:	e78f      	b.n	80029f6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad6:	4905      	ldr	r1, [pc, #20]	; (8002aec <HAL_RCC_ClockConfig+0x128>)
 8002ad8:	68e0      	ldr	r0, [r4, #12]
 8002ada:	688b      	ldr	r3, [r1, #8]
 8002adc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002ae0:	4303      	orrs	r3, r0
 8002ae2:	608b      	str	r3, [r1, #8]
 8002ae4:	e78a      	b.n	80029fc <HAL_RCC_ClockConfig+0x38>
 8002ae6:	bf00      	nop
 8002ae8:	40023c00 	.word	0x40023c00
 8002aec:	40023800 	.word	0x40023800
 8002af0:	08006d03 	.word	0x08006d03
 8002af4:	2000008c 	.word	0x2000008c

08002af8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002af8:	4b01      	ldr	r3, [pc, #4]	; (8002b00 <HAL_RCC_GetHCLKFreq+0x8>)
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	2000008c 	.word	0x2000008c

08002b04 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002b06:	4a05      	ldr	r2, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002b12:	6810      	ldr	r0, [r2, #0]
}
 8002b14:	40d8      	lsrs	r0, r3
 8002b16:	4770      	bx	lr
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	08006d13 	.word	0x08006d13
 8002b20:	2000008c 	.word	0x2000008c

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002b26:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002b2e:	5cd3      	ldrb	r3, [r2, r3]
 8002b30:	4a03      	ldr	r2, [pc, #12]	; (8002b40 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002b32:	6810      	ldr	r0, [r2, #0]
}
 8002b34:	40d8      	lsrs	r0, r3
 8002b36:	4770      	bx	lr
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	08006d13 	.word	0x08006d13
 8002b40:	2000008c 	.word	0x2000008c

08002b44 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b44:	230f      	movs	r3, #15
 8002b46:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_GetClockConfig+0x34>)
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	f002 0203 	and.w	r2, r2, #3
 8002b50:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002b58:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002b60:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	08db      	lsrs	r3, r3, #3
 8002b66:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002b6a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <HAL_RCC_GetClockConfig+0x38>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	600b      	str	r3, [r1, #0]
 8002b76:	4770      	bx	lr
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40023c00 	.word	0x40023c00

08002b80 <HAL_RCCEx_PeriphCLKConfig>:

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b80:	6803      	ldr	r3, [r0, #0]
{
 8002b82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b84:	079a      	lsls	r2, r3, #30
{
 8002b86:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b88:	f040 8088 	bne.w	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x11c>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	f013 0f0c 	tst.w	r3, #12
 8002b92:	d044      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b94:	4d80      	ldr	r5, [pc, #512]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x218>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b96:	4e81      	ldr	r6, [pc, #516]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLSAI_DISABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002b9c:	f7fe fcfc 	bl	8001598 <HAL_GetTick>
 8002ba0:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ba2:	6833      	ldr	r3, [r6, #0]
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	f100 80bd 	bmi.w	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002baa:	6821      	ldr	r1, [r4, #0]
 8002bac:	074f      	lsls	r7, r1, #29
 8002bae:	d515      	bpl.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x5c>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002bb0:	6963      	ldr	r3, [r4, #20]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bb2:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002bb6:	6920      	ldr	r0, [r4, #16]
 8002bb8:	061b      	lsls	r3, r3, #24
 8002bba:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8002bbe:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bc8:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8002bcc:	6a22      	ldr	r2, [r4, #32]
 8002bce:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002bd2:	3a01      	subs	r2, #1
 8002bd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002bd8:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002bdc:	070e      	lsls	r6, r1, #28
 8002bde:	d514      	bpl.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002be0:	4a6e      	ldr	r2, [pc, #440]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002be2:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002be4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002be8:	6920      	ldr	r0, [r4, #16]
 8002bea:	071b      	lsls	r3, r3, #28
 8002bec:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002bf0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002bfa:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002bfe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002c00:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002c04:	430b      	orrs	r3, r1
 8002c06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c0e:	f7fe fcc3 	bl	8001598 <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c12:	4d62      	ldr	r5, [pc, #392]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 8002c14:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c16:	682b      	ldr	r3, [r5, #0]
 8002c18:	0098      	lsls	r0, r3, #2
 8002c1a:	f140 808a 	bpl.w	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	069a      	lsls	r2, r3, #26
 8002c22:	d531      	bpl.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c24:	2300      	movs	r3, #0
 8002c26:	9301      	str	r3, [sp, #4]
 8002c28:	4b5c      	ldr	r3, [pc, #368]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x21c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002c2a:	4d5d      	ldr	r5, [pc, #372]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	9301      	str	r3, [sp, #4]
 8002c3c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002c3e:	682b      	ldr	r3, [r5, #0]
 8002c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c44:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c46:	f7fe fca7 	bl	8001598 <HAL_GetTick>
 8002c4a:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c4c:	682b      	ldr	r3, [r5, #0]
 8002c4e:	05d9      	lsls	r1, r3, #23
 8002c50:	d576      	bpl.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c52:	4d52      	ldr	r5, [pc, #328]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002c54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c56:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002c5a:	d177      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c5e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002c62:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002c66:	4a4d      	ldr	r2, [pc, #308]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002c68:	f040 8091 	bne.w	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8002c6c:	6891      	ldr	r1, [r2, #8]
 8002c6e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002c72:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002c76:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002c7a:	4301      	orrs	r1, r0
 8002c7c:	6091      	str	r1, [r2, #8]
 8002c7e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c84:	430b      	orrs	r3, r1
 8002c86:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c88:	6820      	ldr	r0, [r4, #0]
 8002c8a:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c8e:	bf1f      	itttt	ne
 8002c90:	4b44      	ldrne	r3, [pc, #272]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c92:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 8002c96:	601a      	strne	r2, [r3, #0]
  }
  return HAL_OK;
 8002c98:	2000      	movne	r0, #0
 8002c9a:	e041      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_PLLI2S_DISABLE();
 8002c9c:	4d42      	ldr	r5, [pc, #264]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c9e:	4e3f      	ldr	r6, [pc, #252]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002ca4:	f7fe fc78 	bl	8001598 <HAL_GetTick>
 8002ca8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002caa:	6833      	ldr	r3, [r6, #0]
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	d431      	bmi.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x194>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002cb0:	6822      	ldr	r2, [r4, #0]
 8002cb2:	07d7      	lsls	r7, r2, #31
 8002cb4:	d506      	bpl.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002cb6:	68a3      	ldr	r3, [r4, #8]
 8002cb8:	6861      	ldr	r1, [r4, #4]
 8002cba:	071b      	lsls	r3, r3, #28
 8002cbc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002cc0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002cc4:	0790      	lsls	r0, r2, #30
 8002cc6:	d515      	bpl.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x174>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cc8:	4a34      	ldr	r2, [pc, #208]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002cca:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ccc:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002cd0:	6860      	ldr	r0, [r4, #4]
 8002cd2:	061b      	lsls	r3, r3, #24
 8002cd4:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002cd8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ce2:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002ce6:	69e3      	ldr	r3, [r4, #28]
 8002ce8:	f021 011f 	bic.w	r1, r1, #31
 8002cec:	3b01      	subs	r3, #1
 8002cee:	430b      	orrs	r3, r1
 8002cf0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLI2S_ENABLE();
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002cf8:	f7fe fc4e 	bl	8001598 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cfc:	4d27      	ldr	r5, [pc, #156]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 8002cfe:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d00:	682b      	ldr	r3, [r5, #0]
 8002d02:	0119      	lsls	r1, r3, #4
 8002d04:	f53f af42 	bmi.w	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d08:	f7fe fc46 	bl	8001598 <HAL_GetTick>
 8002d0c:	1b80      	subs	r0, r0, r6
 8002d0e:	2802      	cmp	r0, #2
 8002d10:	d9f6      	bls.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002d12:	e004      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d14:	f7fe fc40 	bl	8001598 <HAL_GetTick>
 8002d18:	1bc0      	subs	r0, r0, r7
 8002d1a:	2802      	cmp	r0, #2
 8002d1c:	d9c5      	bls.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x12a>
        return HAL_TIMEOUT;
 8002d1e:	2003      	movs	r0, #3
}
 8002d20:	b003      	add	sp, #12
 8002d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d24:	f7fe fc38 	bl	8001598 <HAL_GetTick>
 8002d28:	1bc0      	subs	r0, r0, r7
 8002d2a:	2802      	cmp	r0, #2
 8002d2c:	f67f af39 	bls.w	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8002d30:	e7f5      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d32:	f7fe fc31 	bl	8001598 <HAL_GetTick>
 8002d36:	1b80      	subs	r0, r0, r6
 8002d38:	2802      	cmp	r0, #2
 8002d3a:	f67f af6c 	bls.w	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8002d3e:	e7ee      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d40:	f7fe fc2a 	bl	8001598 <HAL_GetTick>
 8002d44:	1b80      	subs	r0, r0, r6
 8002d46:	2802      	cmp	r0, #2
 8002d48:	d980      	bls.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002d4a:	e7e8      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002d4e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d082      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xdc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d56:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d58:	4a14      	ldr	r2, [pc, #80]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d62:	2100      	movs	r1, #0
 8002d64:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8002d66:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d68:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002d6a:	07da      	lsls	r2, r3, #31
 8002d6c:	f57f af76 	bpl.w	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xdc>
        tickstart = HAL_GetTick();
 8002d70:	f7fe fc12 	bl	8001598 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d74:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002d78:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002d7c:	079b      	lsls	r3, r3, #30
 8002d7e:	f53f af6d 	bmi.w	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7fe fc09 	bl	8001598 <HAL_GetTick>
 8002d86:	1b80      	subs	r0, r0, r6
 8002d88:	42b8      	cmp	r0, r7
 8002d8a:	d9f6      	bls.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002d8c:	e7c7      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d8e:	6891      	ldr	r1, [r2, #8]
 8002d90:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002d94:	e772      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002d96:	bf00      	nop
 8002d98:	42470070 	.word	0x42470070
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40007000 	.word	0x40007000
 8002da4:	424711e0 	.word	0x424711e0
 8002da8:	42470068 	.word	0x42470068
 8002dac:	42470e40 	.word	0x42470e40

08002db0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002db0:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002db2:	4604      	mov	r4, r0
 8002db4:	2800      	cmp	r0, #0
 8002db6:	d036      	beq.n	8002e26 <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002dbc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002dc0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dc4:	b91b      	cbnz	r3, 8002dce <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dc6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dca:	f002 fc1d 	bl	8005608 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dce:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002dd0:	68a0      	ldr	r0, [r4, #8]
 8002dd2:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002dda:	680b      	ldr	r3, [r1, #0]
 8002ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002de0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002de2:	6863      	ldr	r3, [r4, #4]
 8002de4:	4303      	orrs	r3, r0
 8002de6:	68e0      	ldr	r0, [r4, #12]
 8002de8:	4303      	orrs	r3, r0
 8002dea:	6920      	ldr	r0, [r4, #16]
 8002dec:	4303      	orrs	r3, r0
 8002dee:	6960      	ldr	r0, [r4, #20]
 8002df0:	4303      	orrs	r3, r0
 8002df2:	69e0      	ldr	r0, [r4, #28]
 8002df4:	4303      	orrs	r3, r0
 8002df6:	6a20      	ldr	r0, [r4, #32]
 8002df8:	4303      	orrs	r3, r0
 8002dfa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002dfc:	4303      	orrs	r3, r0
 8002dfe:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002e02:	4303      	orrs	r3, r0
 8002e04:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002e06:	0c12      	lsrs	r2, r2, #16
 8002e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e0a:	f002 0204 	and.w	r2, r2, #4
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e12:	69cb      	ldr	r3, [r1, #28]
 8002e14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e18:	61cb      	str	r3, [r1, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e1a:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002e1c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e1e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e20:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8002e24:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002e26:	2001      	movs	r0, #1
}
 8002e28:	bd10      	pop	{r4, pc}

08002e2a <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e2a:	6803      	ldr	r3, [r0, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	4770      	bx	lr

08002e40 <HAL_TIM_OC_DelayElapsedCallback>:
 8002e40:	4770      	bx	lr

08002e42 <HAL_TIM_IC_CaptureCallback>:
 8002e42:	4770      	bx	lr

08002e44 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002e44:	4770      	bx	lr

08002e46 <HAL_TIM_TriggerCallback>:
 8002e46:	4770      	bx	lr

08002e48 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e48:	6803      	ldr	r3, [r0, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	0791      	lsls	r1, r2, #30
{
 8002e4e:	b510      	push	{r4, lr}
 8002e50:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e52:	d50e      	bpl.n	8002e72 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	0792      	lsls	r2, r2, #30
 8002e58:	d50b      	bpl.n	8002e72 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e5a:	f06f 0202 	mvn.w	r2, #2
 8002e5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e60:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e62:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e64:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e66:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e68:	d077      	beq.n	8002f5a <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002e6a:	f7ff ffea 	bl	8002e42 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	0750      	lsls	r0, r2, #29
 8002e78:	d510      	bpl.n	8002e9c <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	0751      	lsls	r1, r2, #29
 8002e7e:	d50d      	bpl.n	8002e9c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e80:	f06f 0204 	mvn.w	r2, #4
 8002e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e86:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e88:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e8a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e8e:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002e90:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e92:	d068      	beq.n	8002f66 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e94:	f7ff ffd5 	bl	8002e42 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	0712      	lsls	r2, r2, #28
 8002ea2:	d50f      	bpl.n	8002ec4 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	0710      	lsls	r0, r2, #28
 8002ea8:	d50c      	bpl.n	8002ec4 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002eaa:	f06f 0208 	mvn.w	r2, #8
 8002eae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002eb0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eb2:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002eb4:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eb6:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002eba:	d05a      	beq.n	8002f72 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ebc:	f7ff ffc1 	bl	8002e42 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	06d2      	lsls	r2, r2, #27
 8002eca:	d510      	bpl.n	8002eee <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	06d0      	lsls	r0, r2, #27
 8002ed0:	d50d      	bpl.n	8002eee <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ed2:	f06f 0210 	mvn.w	r2, #16
 8002ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ed8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eda:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002edc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ee0:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ee4:	d04b      	beq.n	8002f7e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee6:	f7ff ffac 	bl	8002e42 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eea:	2300      	movs	r3, #0
 8002eec:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002eee:	6823      	ldr	r3, [r4, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	07d1      	lsls	r1, r2, #31
 8002ef4:	d508      	bpl.n	8002f08 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	07d2      	lsls	r2, r2, #31
 8002efa:	d505      	bpl.n	8002f08 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002efc:	f06f 0201 	mvn.w	r2, #1
 8002f00:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f02:	4620      	mov	r0, r4
 8002f04:	f002 fa8a 	bl	800541c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	0610      	lsls	r0, r2, #24
 8002f0e:	d508      	bpl.n	8002f22 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	0611      	lsls	r1, r2, #24
 8002f14:	d505      	bpl.n	8002f22 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f1a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	f000 f8d6 	bl	80030ce <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	0652      	lsls	r2, r2, #25
 8002f28:	d508      	bpl.n	8002f3c <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	0650      	lsls	r0, r2, #25
 8002f2e:	d505      	bpl.n	8002f3c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f34:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002f36:	4620      	mov	r0, r4
 8002f38:	f7ff ff85 	bl	8002e46 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	0691      	lsls	r1, r2, #26
 8002f42:	d522      	bpl.n	8002f8a <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	0692      	lsls	r2, r2, #26
 8002f48:	d51f      	bpl.n	8002f8a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f4a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002f4e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f50:	611a      	str	r2, [r3, #16]
    }
  }
}
 8002f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002f56:	f000 b8b9 	b.w	80030cc <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5a:	f7ff ff71 	bl	8002e40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5e:	4620      	mov	r0, r4
 8002f60:	f7ff ff70 	bl	8002e44 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f64:	e783      	b.n	8002e6e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f66:	f7ff ff6b 	bl	8002e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f7ff ff6a 	bl	8002e44 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f70:	e792      	b.n	8002e98 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f72:	f7ff ff65 	bl	8002e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002f76:	4620      	mov	r0, r4
 8002f78:	f7ff ff64 	bl	8002e44 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f7c:	e7a0      	b.n	8002ec0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7e:	f7ff ff5f 	bl	8002e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f82:	4620      	mov	r0, r4
 8002f84:	f7ff ff5e 	bl	8002e44 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f88:	e7af      	b.n	8002eea <HAL_TIM_IRQHandler+0xa2>
 8002f8a:	bd10      	pop	{r4, pc}

08002f8c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002f8c:	4a2e      	ldr	r2, [pc, #184]	; (8003048 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8002f8e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002f90:	4290      	cmp	r0, r2
 8002f92:	d012      	beq.n	8002fba <TIM_Base_SetConfig+0x2e>
 8002f94:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f98:	d00f      	beq.n	8002fba <TIM_Base_SetConfig+0x2e>
 8002f9a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002f9e:	4290      	cmp	r0, r2
 8002fa0:	d00b      	beq.n	8002fba <TIM_Base_SetConfig+0x2e>
 8002fa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fa6:	4290      	cmp	r0, r2
 8002fa8:	d007      	beq.n	8002fba <TIM_Base_SetConfig+0x2e>
 8002faa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fae:	4290      	cmp	r0, r2
 8002fb0:	d003      	beq.n	8002fba <TIM_Base_SetConfig+0x2e>
 8002fb2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002fb6:	4290      	cmp	r0, r2
 8002fb8:	d11d      	bne.n	8002ff6 <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002fba:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002fc0:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002fc2:	4a21      	ldr	r2, [pc, #132]	; (8003048 <TIM_Base_SetConfig+0xbc>)
 8002fc4:	4290      	cmp	r0, r2
 8002fc6:	d104      	bne.n	8002fd2 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fc8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	e028      	b.n	8003024 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002fd2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002fd6:	d0f7      	beq.n	8002fc8 <TIM_Base_SetConfig+0x3c>
 8002fd8:	4a1c      	ldr	r2, [pc, #112]	; (800304c <TIM_Base_SetConfig+0xc0>)
 8002fda:	4290      	cmp	r0, r2
 8002fdc:	d0f4      	beq.n	8002fc8 <TIM_Base_SetConfig+0x3c>
 8002fde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fe2:	4290      	cmp	r0, r2
 8002fe4:	d0f0      	beq.n	8002fc8 <TIM_Base_SetConfig+0x3c>
 8002fe6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fea:	4290      	cmp	r0, r2
 8002fec:	d0ec      	beq.n	8002fc8 <TIM_Base_SetConfig+0x3c>
 8002fee:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002ff2:	4290      	cmp	r0, r2
 8002ff4:	d0e8      	beq.n	8002fc8 <TIM_Base_SetConfig+0x3c>
 8002ff6:	4a16      	ldr	r2, [pc, #88]	; (8003050 <TIM_Base_SetConfig+0xc4>)
 8002ff8:	4290      	cmp	r0, r2
 8002ffa:	d0e5      	beq.n	8002fc8 <TIM_Base_SetConfig+0x3c>
 8002ffc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003000:	4290      	cmp	r0, r2
 8003002:	d0e1      	beq.n	8002fc8 <TIM_Base_SetConfig+0x3c>
 8003004:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003008:	4290      	cmp	r0, r2
 800300a:	d0dd      	beq.n	8002fc8 <TIM_Base_SetConfig+0x3c>
 800300c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003010:	4290      	cmp	r0, r2
 8003012:	d0d9      	beq.n	8002fc8 <TIM_Base_SetConfig+0x3c>
 8003014:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003018:	4290      	cmp	r0, r2
 800301a:	d0d5      	beq.n	8002fc8 <TIM_Base_SetConfig+0x3c>
 800301c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003020:	4290      	cmp	r0, r2
 8003022:	d0d1      	beq.n	8002fc8 <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 8003024:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003026:	688b      	ldr	r3, [r1, #8]
 8003028:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800302a:	680b      	ldr	r3, [r1, #0]
 800302c:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <TIM_Base_SetConfig+0xbc>)
 8003030:	4298      	cmp	r0, r3
 8003032:	d006      	beq.n	8003042 <TIM_Base_SetConfig+0xb6>
 8003034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003038:	4298      	cmp	r0, r3
 800303a:	d002      	beq.n	8003042 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800303c:	2301      	movs	r3, #1
 800303e:	6143      	str	r3, [r0, #20]
}
 8003040:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003042:	690b      	ldr	r3, [r1, #16]
 8003044:	6303      	str	r3, [r0, #48]	; 0x30
 8003046:	e7f9      	b.n	800303c <TIM_Base_SetConfig+0xb0>
 8003048:	40010000 	.word	0x40010000
 800304c:	40000400 	.word	0x40000400
 8003050:	40014000 	.word	0x40014000

08003054 <HAL_TIM_Base_Init>:
{ 
 8003054:	b510      	push	{r4, lr}
  if(htim == NULL)
 8003056:	4604      	mov	r4, r0
 8003058:	b1a0      	cbz	r0, 8003084 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800305a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800305e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003062:	b91b      	cbnz	r3, 800306c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003064:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8003068:	f002 fc04 	bl	8005874 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800306c:	2302      	movs	r3, #2
 800306e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003072:	6820      	ldr	r0, [r4, #0]
 8003074:	1d21      	adds	r1, r4, #4
 8003076:	f7ff ff89 	bl	8002f8c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800307a:	2301      	movs	r3, #1
 800307c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003080:	2000      	movs	r0, #0
 8003082:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003084:	2001      	movs	r0, #1
}
 8003086:	bd10      	pop	{r4, pc}

08003088 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8003088:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800308c:	2b01      	cmp	r3, #1
{
 800308e:	b510      	push	{r4, lr}
 8003090:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003094:	d018      	beq.n	80030c8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8003096:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800309a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800309c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800309e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80030a0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80030a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030a6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	4322      	orrs	r2, r4
 80030ac:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030b4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80030bc:	2301      	movs	r3, #1
 80030be:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80030c2:	2300      	movs	r3, #0
 80030c4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80030c8:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80030ca:	bd10      	pop	{r4, pc}

080030cc <HAL_TIMEx_CommutationCallback>:
 80030cc:	4770      	bx	lr

080030ce <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030ce:	4770      	bx	lr

080030d0 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80030d0:	b084      	sub	sp, #16
 80030d2:	b538      	push	{r3, r4, r5, lr}
 80030d4:	ad05      	add	r5, sp, #20
 80030d6:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030dc:	2b01      	cmp	r3, #1
{
 80030de:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030e0:	d126      	bne.n	8003130 <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80030e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80030e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e8:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80030ea:	68c3      	ldr	r3, [r0, #12]
 80030ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80030f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030f4:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80030f6:	68c3      	ldr	r3, [r0, #12]
 80030f8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80030fc:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 80030fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003100:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003102:	bf02      	ittt	eq
 8003104:	68c3      	ldreq	r3, [r0, #12]
 8003106:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800310a:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 800310c:	f000 fbde 	bl	80038cc <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 8003110:	9b08      	ldr	r3, [sp, #32]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d107      	bne.n	8003126 <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003116:	68a3      	ldr	r3, [r4, #8]
 8003118:	f043 0306 	orr.w	r3, r3, #6
 800311c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800311e:	68a3      	ldr	r3, [r4, #8]
 8003120:	f043 0320 	orr.w	r3, r3, #32
 8003124:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8003126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800312a:	2000      	movs	r0, #0
 800312c:	b004      	add	sp, #16
 800312e:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003130:	68c3      	ldr	r3, [r0, #12]
 8003132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003136:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8003138:	f000 fbc8 	bl	80038cc <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800313c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003140:	63a3      	str	r3, [r4, #56]	; 0x38
 8003142:	e7e5      	b.n	8003110 <USB_CoreInit+0x40>

08003144 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003144:	6883      	ldr	r3, [r0, #8]
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 800314c:	2000      	movs	r0, #0
 800314e:	4770      	bx	lr

08003150 <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003150:	6883      	ldr	r3, [r0, #8]
 8003152:	f023 0301 	bic.w	r3, r3, #1
 8003156:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8003158:	2000      	movs	r0, #0
 800315a:	4770      	bx	lr

0800315c <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 800315c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800315e:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8003160:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8003162:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003166:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8003168:	d108      	bne.n	800317c <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 800316a:	68c3      	ldr	r3, [r0, #12]
 800316c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003170:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 8003172:	2032      	movs	r0, #50	; 0x32
 8003174:	f7fe fa16 	bl	80015a4 <HAL_Delay>
  
  return HAL_OK;
}
 8003178:	2000      	movs	r0, #0
 800317a:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 800317c:	2900      	cmp	r1, #0
 800317e:	d1f8      	bne.n	8003172 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8003180:	68c3      	ldr	r3, [r0, #12]
 8003182:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003186:	60c3      	str	r3, [r0, #12]
 8003188:	e7f3      	b.n	8003172 <USB_SetCurrentMode+0x16>
	...

0800318c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800318c:	b084      	sub	sp, #16
 800318e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003192:	4604      	mov	r4, r0
 8003194:	a807      	add	r0, sp, #28
 8003196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800319a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800319c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800319e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031a0:	4688      	mov	r8, r1
  if (cfg.vbus_sensing_enable == 0U)
 80031a2:	b9a6      	cbnz	r6, 80031ce <USB_DevInit+0x42>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80031a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031a8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80031b0:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80031b4:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80031b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031ba:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80031bc:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80031c0:	d15e      	bne.n	8003280 <USB_DevInit+0xf4>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80031c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80031c4:	b939      	cbnz	r1, 80031d6 <USB_DevInit+0x4a>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80031c6:	4620      	mov	r0, r4
 80031c8:	f000 f89e 	bl	8003308 <USB_SetDevSpeed>
 80031cc:	e007      	b.n	80031de <USB_DevInit+0x52>
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80031ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80031d2:	63a3      	str	r3, [r4, #56]	; 0x38
 80031d4:	e7e9      	b.n	80031aa <USB_DevInit+0x1e>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 80031d6:	4619      	mov	r1, r3
 80031d8:	4620      	mov	r0, r4
 80031da:	f000 f895 	bl	8003308 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 80031de:	2110      	movs	r1, #16
 80031e0:	4620      	mov	r0, r4
 80031e2:	f000 f86f 	bl	80032c4 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80031e6:	4620      	mov	r0, r4
 80031e8:	f000 f87e 	bl	80032e8 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80031ec:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80031ee:	f04f 32ff 	mov.w	r2, #4294967295
  USBx_DEVICE->DIEPMSK = 0U;
 80031f2:	612b      	str	r3, [r5, #16]
 80031f4:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0U;
 80031f6:	616b      	str	r3, [r5, #20]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80031f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80031fc:	61aa      	str	r2, [r5, #24]
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 80031fe:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0U;
 8003202:	61eb      	str	r3, [r5, #28]
 8003204:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003208:	4543      	cmp	r3, r8
 800320a:	d13b      	bne.n	8003284 <USB_DevInit+0xf8>
 800320c:	2100      	movs	r1, #0
 800320e:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
 8003212:	4608      	mov	r0, r1
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8003214:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8003218:	f04f 0cff 	mov.w	ip, #255	; 0xff
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800321c:	428b      	cmp	r3, r1
 800321e:	d13e      	bne.n	800329e <USB_DevInit+0x112>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003220:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 8003222:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003228:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 800322a:	d108      	bne.n	800323e <USB_DevInit+0xb2>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 800322c:	4b23      	ldr	r3, [pc, #140]	; (80032bc <USB_DevInit+0x130>)
 800322e:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8003230:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003236:	f043 0303 	orr.w	r3, r3, #3
 800323a:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 800323c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003242:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8003246:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8003248:	b91f      	cbnz	r7, 8003252 <USB_DevInit+0xc6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 800324a:	69a3      	ldr	r3, [r4, #24]
 800324c:	f043 0310 	orr.w	r3, r3, #16
 8003250:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8003252:	69a2      	ldr	r2, [r4, #24]
 8003254:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <USB_DevInit+0x134>)
 8003256:	4313      	orrs	r3, r2
 8003258:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 800325a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800325c:	b11b      	cbz	r3, 8003266 <USB_DevInit+0xda>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800325e:	69a3      	ldr	r3, [r4, #24]
 8003260:	f043 0308 	orr.w	r3, r3, #8
 8003264:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8003266:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8003268:	bf01      	itttt	eq
 800326a:	69a3      	ldreq	r3, [r4, #24]
 800326c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8003270:	f043 0304 	orreq.w	r3, r3, #4
 8003274:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 8003276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800327a:	2000      	movs	r0, #0
 800327c:	b004      	add	sp, #16
 800327e:	4770      	bx	lr
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8003280:	2103      	movs	r1, #3
 8003282:	e7a0      	b.n	80031c6 <USB_DevInit+0x3a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003284:	f8d2 c000 	ldr.w	ip, [r2]
 8003288:	f1bc 0f00 	cmp.w	ip, #0
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800328c:	bfb4      	ite	lt
 800328e:	6010      	strlt	r0, [r2, #0]
      USBx_INEP(i)->DIEPCTL = 0U;
 8003290:	6011      	strge	r1, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003292:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003294:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8003296:	f8c2 e008 	str.w	lr, [r2, #8]
 800329a:	3220      	adds	r2, #32
 800329c:	e7b4      	b.n	8003208 <USB_DevInit+0x7c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800329e:	f8d2 8000 	ldr.w	r8, [r2]
 80032a2:	f1b8 0f00 	cmp.w	r8, #0
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80032a6:	bfb4      	ite	lt
 80032a8:	f8c2 e000 	strlt.w	lr, [r2]
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80032ac:	6010      	strge	r0, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032ae:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80032b0:	6110      	str	r0, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 80032b2:	f8c2 c008 	str.w	ip, [r2, #8]
 80032b6:	3220      	adds	r2, #32
 80032b8:	e7b0      	b.n	800321c <USB_DevInit+0x90>
 80032ba:	bf00      	nop
 80032bc:	00800100 	.word	0x00800100
 80032c0:	803c3800 	.word	0x803c3800

080032c4 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80032c4:	0189      	lsls	r1, r1, #6
 80032c6:	f041 0120 	orr.w	r1, r1, #32
 80032ca:	4a06      	ldr	r2, [pc, #24]	; (80032e4 <USB_FlushTxFifo+0x20>)
 80032cc:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80032ce:	3a01      	subs	r2, #1
 80032d0:	d005      	beq.n	80032de <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80032d2:	6903      	ldr	r3, [r0, #16]
 80032d4:	f013 0320 	ands.w	r3, r3, #32
 80032d8:	d1f9      	bne.n	80032ce <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 80032da:	4618      	mov	r0, r3
 80032dc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80032de:	2003      	movs	r0, #3
}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	00030d41 	.word	0x00030d41

080032e8 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80032e8:	2310      	movs	r3, #16
 80032ea:	4a06      	ldr	r2, [pc, #24]	; (8003304 <USB_FlushRxFifo+0x1c>)
 80032ec:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80032ee:	3a01      	subs	r2, #1
 80032f0:	d005      	beq.n	80032fe <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80032f2:	6903      	ldr	r3, [r0, #16]
 80032f4:	f013 0310 	ands.w	r3, r3, #16
 80032f8:	d1f9      	bne.n	80032ee <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 80032fa:	4618      	mov	r0, r3
 80032fc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80032fe:	2003      	movs	r0, #3
}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	00030d41 	.word	0x00030d41

08003308 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8003308:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800330c:	4319      	orrs	r1, r3
 800330e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8003312:	2000      	movs	r0, #0
 8003314:	4770      	bx	lr

08003316 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003316:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800331a:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 800331e:	f010 0006 	ands.w	r0, r0, #6
 8003322:	d012      	beq.n	800334a <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8003324:	6893      	ldr	r3, [r2, #8]
 8003326:	f003 0306 	and.w	r3, r3, #6
 800332a:	2b02      	cmp	r3, #2
 800332c:	d00c      	beq.n	8003348 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 800332e:	6893      	ldr	r3, [r2, #8]
 8003330:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8003334:	2b06      	cmp	r3, #6
 8003336:	d007      	beq.n	8003348 <USB_GetDevSpeed+0x32>
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003338:	6893      	ldr	r3, [r2, #8]
 800333a:	f003 0306 	and.w	r3, r3, #6
 800333e:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 8003340:	bf14      	ite	ne
 8003342:	2000      	movne	r0, #0
 8003344:	2002      	moveq	r0, #2
 8003346:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 8003348:	2003      	movs	r0, #3
  }
  
  return speed;
}
 800334a:	4770      	bx	lr

0800334c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800334c:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 800334e:	784b      	ldrb	r3, [r1, #1]
 8003350:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8003352:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8003356:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 800335a:	2b01      	cmp	r3, #1
 800335c:	d11b      	bne.n	8003396 <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 800335e:	40a3      	lsls	r3, r4
 8003360:	b29b      	uxth	r3, r3
 8003362:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003364:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8003368:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800336a:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	0412      	lsls	r2, r2, #16
 8003372:	d40e      	bmi.n	8003392 <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003374:	688a      	ldr	r2, [r1, #8]
 8003376:	78c8      	ldrb	r0, [r1, #3]
 8003378:	681d      	ldr	r5, [r3, #0]
 800337a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800337e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003386:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 800338a:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 800338e:	4328      	orrs	r0, r5
 8003390:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8003392:	2000      	movs	r0, #0
 8003394:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8003396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800339a:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800339c:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80033a0:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80033a2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80033a6:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80033a8:	6803      	ldr	r3, [r0, #0]
 80033aa:	041b      	lsls	r3, r3, #16
 80033ac:	d4f1      	bmi.n	8003392 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80033ae:	688b      	ldr	r3, [r1, #8]
 80033b0:	78c9      	ldrb	r1, [r1, #3]
 80033b2:	6802      	ldr	r2, [r0, #0]
 80033b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80033c4:	4313      	orrs	r3, r2
 80033c6:	6003      	str	r3, [r0, #0]
 80033c8:	e7e3      	b.n	8003392 <USB_ActivateEndpoint+0x46>

080033ca <USB_DeactivateEndpoint>:
 80033ca:	f000 b801 	b.w	80033d0 <USB_DeactivateDedicatedEndpoint>
	...

080033d0 <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80033d0:	b570      	push	{r4, r5, r6, lr}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 80033d2:	784b      	ldrb	r3, [r1, #1]
 80033d4:	2b01      	cmp	r3, #1
{
 80033d6:	460e      	mov	r6, r1
 80033d8:	4605      	mov	r5, r0
 80033da:	7809      	ldrb	r1, [r1, #0]
 80033dc:	f04f 0320 	mov.w	r3, #32
  if (ep->is_in == 1U)
 80033e0:	d126      	bne.n	8003430 <USB_DeactivateDedicatedEndpoint+0x60>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 80033e2:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 80033e6:	fb13 2301 	smlabb	r3, r3, r1, r2
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033f0:	601a      	str	r2, [r3, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80033f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033f6:	601a      	str	r2, [r3, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 80033f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	4a1f      	ldr	r2, [pc, #124]	; (800347c <USB_DeactivateDedicatedEndpoint+0xac>)
    
    do
    {
      if (++count > 200000U)
 8003400:	3a01      	subs	r2, #1
 8003402:	d101      	bne.n	8003408 <USB_DeactivateDedicatedEndpoint+0x38>
      {
        return HAL_TIMEOUT;
 8003404:	2003      	movs	r0, #3
 8003406:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8003408:	689c      	ldr	r4, [r3, #8]
 800340a:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 800340e:	d1f7      	bne.n	8003400 <USB_DeactivateDedicatedEndpoint+0x30>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8003410:	2110      	movs	r1, #16
 8003412:	4628      	mov	r0, r5
 8003414:	f7ff ff56 	bl	80032c4 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8003418:	7831      	ldrb	r1, [r6, #0]
 800341a:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 800341e:	2301      	movs	r3, #1
 8003420:	408b      	lsls	r3, r1
 8003422:	b29b      	uxth	r3, r3
 8003424:	ea22 0303 	bic.w	r3, r2, r3
 8003428:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
 800342c:	4620      	mov	r0, r4
 800342e:	bd70      	pop	{r4, r5, r6, pc}
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8003430:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8003434:	fb13 2301 	smlabb	r3, r3, r1, r2
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800343e:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003440:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003444:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8003446:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	4a0b      	ldr	r2, [pc, #44]	; (800347c <USB_DeactivateDedicatedEndpoint+0xac>)
      if (++count > 200000U)
 800344e:	3a01      	subs	r2, #1
 8003450:	d0d8      	beq.n	8003404 <USB_DeactivateDedicatedEndpoint+0x34>
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8003452:	6898      	ldr	r0, [r3, #8]
 8003454:	f010 0010 	ands.w	r0, r0, #16
 8003458:	d1f9      	bne.n	800344e <USB_DeactivateDedicatedEndpoint+0x7e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800345a:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800345e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003462:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 8003466:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 800346a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800346e:	408a      	lsls	r2, r1
 8003470:	ea23 0302 	bic.w	r3, r3, r2
 8003474:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c

}
 8003478:	bd70      	pop	{r4, r5, r6, pc}
 800347a:	bf00      	nop
 800347c:	00030d41 	.word	0x00030d41

08003480 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003482:	784b      	ldrb	r3, [r1, #1]
 8003484:	780c      	ldrb	r4, [r1, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	694b      	ldr	r3, [r1, #20]
 800348a:	d177      	bne.n	800357c <USB_EPStartXfer+0xfc>
 800348c:	2620      	movs	r6, #32
 800348e:	f500 6510 	add.w	r5, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003492:	fb16 5404 	smlabb	r4, r6, r4, r5
 8003496:	6926      	ldr	r6, [r4, #16]
    if (ep->xfer_len == 0U)
 8003498:	2b00      	cmp	r3, #0
 800349a:	d138      	bne.n	800350e <USB_EPStartXfer+0x8e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800349c:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 80034a0:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 80034a4:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80034a6:	6926      	ldr	r6, [r4, #16]
 80034a8:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 80034ac:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80034ae:	6926      	ldr	r6, [r4, #16]
 80034b0:	0cf6      	lsrs	r6, r6, #19
 80034b2:	04f6      	lsls	r6, r6, #19
 80034b4:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 80034b6:	2a01      	cmp	r2, #1
 80034b8:	d150      	bne.n	800355c <USB_EPStartXfer+0xdc>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80034ba:	780c      	ldrb	r4, [r1, #0]
 80034bc:	690e      	ldr	r6, [r1, #16]
 80034be:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 80034c2:	6166      	str	r6, [r4, #20]
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80034c4:	78ce      	ldrb	r6, [r1, #3]
 80034c6:	2e01      	cmp	r6, #1
 80034c8:	d10f      	bne.n	80034ea <USB_EPStartXfer+0x6a>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80034ca:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 80034ce:	780f      	ldrb	r7, [r1, #0]
 80034d0:	f414 7f80 	tst.w	r4, #256	; 0x100
 80034d4:	f04f 0420 	mov.w	r4, #32
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80034d8:	fb14 5407 	smlabb	r4, r4, r7, r5
 80034dc:	6827      	ldr	r7, [r4, #0]
 80034de:	bf0c      	ite	eq
 80034e0:	f047 5700 	orreq.w	r7, r7, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80034e4:	f047 5780 	orrne.w	r7, r7, #268435456	; 0x10000000
 80034e8:	6027      	str	r7, [r4, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80034ea:	780f      	ldrb	r7, [r1, #0]
 80034ec:	eb05 1547 	add.w	r5, r5, r7, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 80034f0:	2e01      	cmp	r6, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80034f2:	682c      	ldr	r4, [r5, #0]
 80034f4:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80034f8:	602c      	str	r4, [r5, #0]
    if (ep->type == EP_TYPE_ISOC)
 80034fa:	d105      	bne.n	8003508 <USB_EPStartXfer+0x88>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 80034fc:	9200      	str	r2, [sp, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	463a      	mov	r2, r7
 8003502:	68c9      	ldr	r1, [r1, #12]
 8003504:	f000 f8ef 	bl	80036e6 <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8003508:	2000      	movs	r0, #0
 800350a:	b003      	add	sp, #12
 800350c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800350e:	0cf6      	lsrs	r6, r6, #19
 8003510:	04f6      	lsls	r6, r6, #19
 8003512:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003514:	6926      	ldr	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8003516:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003518:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 800351c:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8003520:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8003522:	19de      	adds	r6, r3, r7
 8003524:	3e01      	subs	r6, #1
 8003526:	fbb6 f7f7 	udiv	r7, r6, r7
 800352a:	4e37      	ldr	r6, [pc, #220]	; (8003608 <USB_EPStartXfer+0x188>)
 800352c:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8003530:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 8003534:	ea46 060e 	orr.w	r6, r6, lr
 8003538:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800353a:	6927      	ldr	r7, [r4, #16]
 800353c:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8003540:	433e      	orrs	r6, r7
 8003542:	6126      	str	r6, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8003544:	78ce      	ldrb	r6, [r1, #3]
 8003546:	2e01      	cmp	r6, #1
 8003548:	d15a      	bne.n	8003600 <USB_EPStartXfer+0x180>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 800354a:	6926      	ldr	r6, [r4, #16]
 800354c:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8003550:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8003552:	6926      	ldr	r6, [r4, #16]
 8003554:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8003558:	6126      	str	r6, [r4, #16]
 800355a:	e7ac      	b.n	80034b6 <USB_EPStartXfer+0x36>
      if (ep->type != EP_TYPE_ISOC)
 800355c:	78ce      	ldrb	r6, [r1, #3]
 800355e:	2e01      	cmp	r6, #1
 8003560:	d0b3      	beq.n	80034ca <USB_EPStartXfer+0x4a>
        if (ep->xfer_len > 0U)
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0ae      	beq.n	80034c4 <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8003566:	f891 e000 	ldrb.w	lr, [r1]
 800356a:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 800356e:	2401      	movs	r4, #1
 8003570:	fa04 f40e 	lsl.w	r4, r4, lr
 8003574:	433c      	orrs	r4, r7
 8003576:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 800357a:	e7a3      	b.n	80034c4 <USB_EPStartXfer+0x44>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 800357c:	f500 6530 	add.w	r5, r0, #2816	; 0xb00
 8003580:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8003584:	6925      	ldr	r5, [r4, #16]
 8003586:	0ced      	lsrs	r5, r5, #19
 8003588:	04ed      	lsls	r5, r5, #19
 800358a:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800358c:	6925      	ldr	r5, [r4, #16]
 800358e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003592:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8003596:	6125      	str	r5, [r4, #16]
 8003598:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 800359a:	b9fb      	cbnz	r3, 80035dc <USB_EPStartXfer+0x15c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800359c:	6923      	ldr	r3, [r4, #16]
 800359e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80035a2:	431d      	orrs	r5, r3
 80035a4:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80035a6:	6923      	ldr	r3, [r4, #16]
 80035a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035ac:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 80035ae:	2a01      	cmp	r2, #1
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 80035b0:	bf04      	itt	eq
 80035b2:	68cb      	ldreq	r3, [r1, #12]
 80035b4:	6163      	streq	r3, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 80035b6:	78cb      	ldrb	r3, [r1, #3]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d10a      	bne.n	80035d2 <USB_EPStartXfer+0x152>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80035bc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80035c0:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	bf0c      	ite	eq
 80035c8:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80035cc:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80035d0:	6023      	str	r3, [r4, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80035d8:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 80035da:	e795      	b.n	8003508 <USB_EPStartXfer+0x88>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 80035dc:	4e0a      	ldr	r6, [pc, #40]	; (8003608 <USB_EPStartXfer+0x188>)
 80035de:	6927      	ldr	r7, [r4, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 80035e0:	442b      	add	r3, r5
 80035e2:	3b01      	subs	r3, #1
 80035e4:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 80035e8:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 80035ec:	433e      	orrs	r6, r7
 80035ee:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	6926      	ldr	r6, [r4, #16]
 80035f4:	435d      	muls	r5, r3
 80035f6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80035fa:	4335      	orrs	r5, r6
 80035fc:	6125      	str	r5, [r4, #16]
 80035fe:	e7d6      	b.n	80035ae <USB_EPStartXfer+0x12e>
    if (dma == 1U)
 8003600:	2a01      	cmp	r2, #1
 8003602:	d1ae      	bne.n	8003562 <USB_EPStartXfer+0xe2>
 8003604:	e759      	b.n	80034ba <USB_EPStartXfer+0x3a>
 8003606:	bf00      	nop
 8003608:	1ff80000 	.word	0x1ff80000

0800360c <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  /* IN endpoint */
  if (ep->is_in == 1U)
 800360c:	784b      	ldrb	r3, [r1, #1]
 800360e:	2b01      	cmp	r3, #1
{
 8003610:	b570      	push	{r4, r5, r6, lr}
 8003612:	780b      	ldrb	r3, [r1, #0]
 8003614:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1U)
 8003616:	d143      	bne.n	80036a0 <USB_EP0StartXfer+0x94>
 8003618:	2420      	movs	r4, #32
 800361a:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800361e:	fb14 6303 	smlabb	r3, r4, r3, r6
 8003622:	691c      	ldr	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8003624:	b9cd      	cbnz	r5, 800365a <USB_EP0StartXfer+0x4e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003626:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800362a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800362e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003630:	691c      	ldr	r4, [r3, #16]
 8003632:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003636:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003638:	691c      	ldr	r4, [r3, #16]
 800363a:	0ce4      	lsrs	r4, r4, #19
 800363c:	04e4      	lsls	r4, r4, #19
 800363e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8003640:	780d      	ldrb	r5, [r1, #0]
 8003642:	eb06 1345 	add.w	r3, r6, r5, lsl #5
    
    if (dma == 1)
 8003646:	2a01      	cmp	r2, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8003648:	681c      	ldr	r4, [r3, #0]
 800364a:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800364e:	601c      	str	r4, [r3, #0]
    if (dma == 1)
 8003650:	d11b      	bne.n	800368a <USB_EP0StartXfer+0x7e>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003652:	690a      	ldr	r2, [r1, #16]
 8003654:	615a      	str	r2, [r3, #20]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8003656:	2000      	movs	r0, #0
 8003658:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800365a:	0ce4      	lsrs	r4, r4, #19
 800365c:	04e4      	lsls	r4, r4, #19
 800365e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003660:	691c      	ldr	r4, [r3, #16]
 8003662:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8003666:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800366a:	611c      	str	r4, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 800366c:	688c      	ldr	r4, [r1, #8]
 800366e:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8003670:	bf88      	it	hi
 8003672:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003674:	691c      	ldr	r4, [r3, #16]
 8003676:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800367a:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800367c:	694c      	ldr	r4, [r1, #20]
 800367e:	691d      	ldr	r5, [r3, #16]
 8003680:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003684:	432c      	orrs	r4, r5
 8003686:	611c      	str	r4, [r3, #16]
 8003688:	e7da      	b.n	8003640 <USB_EP0StartXfer+0x34>
      if (ep->xfer_len > 0U)
 800368a:	694b      	ldr	r3, [r1, #20]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0e2      	beq.n	8003656 <USB_EP0StartXfer+0x4a>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8003690:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8003694:	2301      	movs	r3, #1
 8003696:	40ab      	lsls	r3, r5
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800369e:	e7da      	b.n	8003656 <USB_EP0StartXfer+0x4a>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80036a0:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 80036a4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80036a8:	6903      	ldr	r3, [r0, #16]
 80036aa:	0cdb      	lsrs	r3, r3, #19
 80036ac:	04db      	lsls	r3, r3, #19
 80036ae:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80036b0:	6903      	ldr	r3, [r0, #16]
 80036b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036ba:	6103      	str	r3, [r0, #16]
 80036bc:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0U)
 80036be:	b105      	cbz	r5, 80036c2 <USB_EP0StartXfer+0xb6>
      ep->xfer_len = ep->maxpacket;
 80036c0:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80036c2:	6904      	ldr	r4, [r0, #16]
 80036c4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80036c8:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80036ca:	6904      	ldr	r4, [r0, #16]
 80036cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d0:	4323      	orrs	r3, r4
    if (dma == 1U)
 80036d2:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80036d4:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80036d6:	bf04      	itt	eq
 80036d8:	68cb      	ldreq	r3, [r1, #12]
 80036da:	6143      	streq	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 80036dc:	6803      	ldr	r3, [r0, #0]
 80036de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80036e2:	6003      	str	r3, [r0, #0]
 80036e4:	e7b7      	b.n	8003656 <USB_EP0StartXfer+0x4a>

080036e6 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80036e6:	b510      	push	{r4, lr}
 80036e8:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 80036ec:	b94c      	cbnz	r4, 8003702 <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 80036ee:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80036f0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80036f4:	f023 0303 	bic.w	r3, r3, #3
 80036f8:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 80036fc:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 80036fe:	4299      	cmp	r1, r3
 8003700:	d101      	bne.n	8003706 <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 8003702:	2000      	movs	r0, #0
 8003704:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003706:	f851 0b04 	ldr.w	r0, [r1], #4
 800370a:	6010      	str	r0, [r2, #0]
 800370c:	e7f7      	b.n	80036fe <USB_WritePacket+0x18>

0800370e <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 800370e:	3203      	adds	r2, #3
 8003710:	f022 0203 	bic.w	r2, r2, #3
 8003714:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8003716:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 800371a:	4291      	cmp	r1, r2
 800371c:	d101      	bne.n	8003722 <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 800371e:	4608      	mov	r0, r1
 8003720:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8003722:	6803      	ldr	r3, [r0, #0]
 8003724:	f841 3b04 	str.w	r3, [r1], #4
 8003728:	e7f7      	b.n	800371a <USB_ReadPacket+0xc>

0800372a <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 800372a:	784b      	ldrb	r3, [r1, #1]
 800372c:	780a      	ldrb	r2, [r1, #0]
 800372e:	2b01      	cmp	r3, #1
 8003730:	f04f 0320 	mov.w	r3, #32
 8003734:	d10b      	bne.n	800374e <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8003736:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800373a:	fb13 0002 	smlabb	r0, r3, r2, r0
 800373e:	6803      	ldr	r3, [r0, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	db0b      	blt.n	800375c <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8003744:	6803      	ldr	r3, [r0, #0]
 8003746:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800374a:	6003      	str	r3, [r0, #0]
 800374c:	e006      	b.n	800375c <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 800374e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8003752:	fb13 0002 	smlabb	r0, r3, r2, r0
 8003756:	6803      	ldr	r3, [r0, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	daf3      	bge.n	8003744 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800375c:	6803      	ldr	r3, [r0, #0]
 800375e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003762:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8003764:	2000      	movs	r0, #0
 8003766:	4770      	bx	lr

08003768 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8003768:	784b      	ldrb	r3, [r1, #1]
 800376a:	780a      	ldrb	r2, [r1, #0]
 800376c:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800376e:	bf0c      	ite	eq
 8003770:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003774:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8003778:	2320      	movs	r3, #32
 800377a:	fb13 0002 	smlabb	r0, r3, r2, r0
 800377e:	6803      	ldr	r3, [r0, #0]
 8003780:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003784:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003786:	78cb      	ldrb	r3, [r1, #3]
 8003788:	3b02      	subs	r3, #2
 800378a:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800378c:	bf9e      	ittt	ls
 800378e:	6803      	ldrls	r3, [r0, #0]
 8003790:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8003794:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8003796:	2000      	movs	r0, #0
 8003798:	4770      	bx	lr

0800379a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 800379a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800379e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037a2:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 80037a6:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80037aa:	0109      	lsls	r1, r1, #4
 80037ac:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80037b0:	4319      	orrs	r1, r3
 80037b2:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 80037b6:	2000      	movs	r0, #0
 80037b8:	4770      	bx	lr

080037ba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 80037ba:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 80037bc:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80037c0:	f023 0302 	bic.w	r3, r3, #2
 80037c4:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80037c8:	2003      	movs	r0, #3
 80037ca:	f7fd feeb 	bl	80015a4 <HAL_Delay>
  
  return HAL_OK;  
}
 80037ce:	2000      	movs	r0, #0
 80037d0:	bd08      	pop	{r3, pc}

080037d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 80037d2:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80037d4:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80037d8:	f043 0302 	orr.w	r3, r3, #2
 80037dc:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80037e0:	2003      	movs	r0, #3
 80037e2:	f7fd fedf 	bl	80015a4 <HAL_Delay>
  
  return HAL_OK;  
}
 80037e6:	2000      	movs	r0, #0
 80037e8:	bd08      	pop	{r3, pc}

080037ea <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 80037ea:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 80037ec:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 80037ee:	4010      	ands	r0, r2
 80037f0:	4770      	bx	lr

080037f2 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 80037f2:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80037f6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 80037fa:	69c0      	ldr	r0, [r0, #28]
 80037fc:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 80037fe:	0c00      	lsrs	r0, r0, #16
 8003800:	4770      	bx	lr

08003802 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003802:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003806:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 800380a:	69c0      	ldr	r0, [r0, #28]
 800380c:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 800380e:	b280      	uxth	r0, r0
 8003810:	4770      	bx	lr

08003812 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8003812:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8003816:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 800381a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 800381e:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8003820:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8003822:	4010      	ands	r0, r2
 8003824:	4770      	bx	lr

08003826 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003826:	b510      	push	{r4, lr}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8003828:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800382c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003830:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8003834:	40cb      	lsrs	r3, r1
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003836:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 800383a:	01db      	lsls	r3, r3, #7
  v = USBx_INEP(epnum)->DIEPINT & msk;
 800383c:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 800383e:	b2db      	uxtb	r3, r3
 8003840:	4323      	orrs	r3, r4
  return v;
}
 8003842:	4018      	ands	r0, r3
 8003844:	bd10      	pop	{r4, pc}

08003846 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8003846:	6940      	ldr	r0, [r0, #20]
}
 8003848:	f000 0001 	and.w	r0, r0, #1
 800384c:	4770      	bx	lr

0800384e <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800384e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003852:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003856:	f023 0307 	bic.w	r3, r3, #7
 800385a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800385e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	f002 0206 	and.w	r2, r2, #6
 8003868:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800386a:	bf02      	ittt	eq
 800386c:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8003870:	f042 0203 	orreq.w	r2, r2, #3
 8003874:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800387e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8003880:	2000      	movs	r0, #0
 8003882:	4770      	bx	lr

08003884 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003884:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003886:	2400      	movs	r4, #0
 8003888:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 800388c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003890:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003894:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003898:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800389c:	f044 0418 	orr.w	r4, r4, #24
 80038a0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80038a4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 80038a8:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80038aa:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80038ae:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80038b2:	bf08      	it	eq
 80038b4:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80038b8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80038bc:	bf04      	itt	eq
 80038be:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80038c2:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 80038c6:	2000      	movs	r0, #0
 80038c8:	bd10      	pop	{r4, pc}
	...

080038cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80038cc:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80038ce:	3b01      	subs	r3, #1
 80038d0:	d101      	bne.n	80038d6 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80038d2:	2003      	movs	r0, #3
 80038d4:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80038d6:	6902      	ldr	r2, [r0, #16]
 80038d8:	2a00      	cmp	r2, #0
 80038da:	daf8      	bge.n	80038ce <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80038dc:	6903      	ldr	r3, [r0, #16]
 80038de:	4a06      	ldr	r2, [pc, #24]	; (80038f8 <USB_CoreReset+0x2c>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80038e6:	3a01      	subs	r2, #1
 80038e8:	d0f3      	beq.n	80038d2 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80038ea:	6903      	ldr	r3, [r0, #16]
 80038ec:	f013 0301 	ands.w	r3, r3, #1
 80038f0:	d1f9      	bne.n	80038e6 <USB_CoreReset+0x1a>
  
  return HAL_OK;
 80038f2:	4618      	mov	r0, r3
}
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	00030d41 	.word	0x00030d41

080038fc <USBD_CUSTOM_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgDesc);
 80038fc:	2329      	movs	r3, #41	; 0x29
 80038fe:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgDesc;
}
 8003900:	4800      	ldr	r0, [pc, #0]	; (8003904 <USBD_CUSTOM_HID_GetCfgDesc+0x8>)
 8003902:	4770      	bx	lr
 8003904:	20000044 	.word	0x20000044

08003908 <USBD_CUSTOM_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8003908:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 800390c:	2000      	movs	r0, #0
 800390e:	7518      	strb	r0, [r3, #20]

  return USBD_OK;
}
 8003910:	4770      	bx	lr

08003912 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003912:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 8003914:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218

  if (hhid->IsReportAvailable == 1)
 8003918:	6923      	ldr	r3, [r4, #16]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d107      	bne.n	800392e <USBD_CUSTOM_HID_EP0_RxReady+0x1c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 800391e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8003922:	7861      	ldrb	r1, [r4, #1]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	7820      	ldrb	r0, [r4, #0]
 8003928:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0;      
 800392a:	2300      	movs	r3, #0
 800392c:	6123      	str	r3, [r4, #16]
  }

  return USBD_OK;
}
 800392e:	2000      	movs	r0, #0
 8003930:	bd10      	pop	{r4, pc}
	...

08003934 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8003934:	230a      	movs	r3, #10
 8003936:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8003938:	4800      	ldr	r0, [pc, #0]	; (800393c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 800393a:	4770      	bx	lr
 800393c:	2000007c 	.word	0x2000007c

08003940 <USBD_CUSTOM_HID_DataOut>:
{
 8003940:	b538      	push	{r3, r4, r5, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 8003942:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8003946:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800394a:	7869      	ldrb	r1, [r5, #1]
 800394c:	68db      	ldr	r3, [r3, #12]
{
 800394e:	4604      	mov	r4, r0
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8003950:	7828      	ldrb	r0, [r5, #0]
 8003952:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf, 
 8003954:	2302      	movs	r3, #2
 8003956:	462a      	mov	r2, r5
 8003958:	2101      	movs	r1, #1
 800395a:	4620      	mov	r0, r4
 800395c:	f002 f910 	bl	8005b80 <USBD_LL_PrepareReceive>
}
 8003960:	2000      	movs	r0, #0
 8003962:	bd38      	pop	{r3, r4, r5, pc}

08003964 <USBD_CUSTOM_HID_Setup>:
{
 8003964:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003966:	780c      	ldrb	r4, [r1, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8003968:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800396c:	f014 0460 	ands.w	r4, r4, #96	; 0x60
{
 8003970:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003972:	d02c      	beq.n	80039ce <USBD_CUSTOM_HID_Setup+0x6a>
 8003974:	2c20      	cmp	r4, #32
 8003976:	d10c      	bne.n	8003992 <USBD_CUSTOM_HID_Setup+0x2e>
    switch (req->bRequest)
 8003978:	784a      	ldrb	r2, [r1, #1]
 800397a:	3a02      	subs	r2, #2
 800397c:	2a09      	cmp	r2, #9
 800397e:	d820      	bhi.n	80039c2 <USBD_CUSTOM_HID_Setup+0x5e>
 8003980:	e8df f002 	tbb	[pc, r2]
 8003984:	1f1f0913 	.word	0x1f1f0913
 8003988:	171f1f1f 	.word	0x171f1f1f
 800398c:	050f      	.short	0x050f
      hhid->Protocol = (uint8_t)(req->wValue);
 800398e:	788a      	ldrb	r2, [r1, #2]
 8003990:	605a      	str	r2, [r3, #4]
  return USBD_OK;
 8003992:	2400      	movs	r4, #0
 8003994:	e019      	b.n	80039ca <USBD_CUSTOM_HID_Setup+0x66>
      USBD_CtlSendData (pdev, 
 8003996:	2201      	movs	r2, #1
 8003998:	1d19      	adds	r1, r3, #4
      USBD_CtlSendData (pdev, 
 800399a:	4628      	mov	r0, r5
 800399c:	f000 fb76 	bl	800408c <USBD_CtlSendData>
 80039a0:	e7f7      	b.n	8003992 <USBD_CUSTOM_HID_Setup+0x2e>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80039a2:	884a      	ldrh	r2, [r1, #2]
 80039a4:	0a12      	lsrs	r2, r2, #8
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	e7f3      	b.n	8003992 <USBD_CUSTOM_HID_Setup+0x2e>
      USBD_CtlSendData (pdev, 
 80039aa:	2201      	movs	r2, #1
 80039ac:	f103 0108 	add.w	r1, r3, #8
 80039b0:	e7f3      	b.n	800399a <USBD_CUSTOM_HID_Setup+0x36>
      hhid->IsReportAvailable = 1;
 80039b2:	2201      	movs	r2, #1
 80039b4:	611a      	str	r2, [r3, #16]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, (uint8_t)(req->wLength));
 80039b6:	4628      	mov	r0, r5
 80039b8:	798a      	ldrb	r2, [r1, #6]
 80039ba:	4619      	mov	r1, r3
 80039bc:	f000 fb7b 	bl	80040b6 <USBD_CtlPrepareRx>
 80039c0:	e7e7      	b.n	8003992 <USBD_CUSTOM_HID_Setup+0x2e>
      USBD_CtlError (pdev, req);
 80039c2:	4628      	mov	r0, r5
 80039c4:	f000 fb3b 	bl	800403e <USBD_CtlError>
      return USBD_FAIL; 
 80039c8:	2402      	movs	r4, #2
}
 80039ca:	4620      	mov	r0, r4
 80039cc:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 80039ce:	784a      	ldrb	r2, [r1, #1]
 80039d0:	2a0a      	cmp	r2, #10
 80039d2:	d01a      	beq.n	8003a0a <USBD_CUSTOM_HID_Setup+0xa6>
 80039d4:	2a0b      	cmp	r2, #11
 80039d6:	d01e      	beq.n	8003a16 <USBD_CUSTOM_HID_Setup+0xb2>
 80039d8:	2a06      	cmp	r2, #6
 80039da:	d1f6      	bne.n	80039ca <USBD_CUSTOM_HID_Setup+0x66>
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80039dc:	884b      	ldrh	r3, [r1, #2]
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	2b22      	cmp	r3, #34	; 0x22
 80039e2:	d107      	bne.n	80039f4 <USBD_CUSTOM_HID_Setup+0x90>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 80039e4:	88ca      	ldrh	r2, [r1, #6]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80039e6:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 80039ea:	2a02      	cmp	r2, #2
 80039ec:	bf28      	it	cs
 80039ee:	2202      	movcs	r2, #2
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80039f0:	6819      	ldr	r1, [r3, #0]
 80039f2:	e7d2      	b.n	800399a <USBD_CUSTOM_HID_Setup+0x36>
      else if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80039f4:	2b21      	cmp	r3, #33	; 0x21
 80039f6:	d105      	bne.n	8003a04 <USBD_CUSTOM_HID_Setup+0xa0>
        len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 80039f8:	88ca      	ldrh	r2, [r1, #6]
        pbuf = USBD_CUSTOM_HID_Desc;   
 80039fa:	4908      	ldr	r1, [pc, #32]	; (8003a1c <USBD_CUSTOM_HID_Setup+0xb8>)
        len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 80039fc:	2a09      	cmp	r2, #9
 80039fe:	bf28      	it	cs
 8003a00:	2209      	movcs	r2, #9
 8003a02:	e7ca      	b.n	800399a <USBD_CUSTOM_HID_Setup+0x36>
  uint8_t  *pbuf = NULL;
 8003a04:	4621      	mov	r1, r4
  uint16_t len = 0;
 8003a06:	4622      	mov	r2, r4
 8003a08:	e7c7      	b.n	800399a <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlSendData (pdev,
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f103 010c 	add.w	r1, r3, #12
 8003a10:	f000 fb3c 	bl	800408c <USBD_CtlSendData>
      break;
 8003a14:	e7d9      	b.n	80039ca <USBD_CUSTOM_HID_Setup+0x66>
      hhid->AltSetting = (uint8_t)(req->wValue);
 8003a16:	788a      	ldrb	r2, [r1, #2]
 8003a18:	60da      	str	r2, [r3, #12]
      break;
 8003a1a:	e7d6      	b.n	80039ca <USBD_CUSTOM_HID_Setup+0x66>
 8003a1c:	20000070 	.word	0x20000070

08003a20 <USBD_CUSTOM_HID_DeInit>:
{
 8003a20:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8003a22:	2181      	movs	r1, #129	; 0x81
{
 8003a24:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8003a26:	f002 f851 	bl	8005acc <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	f002 f84d 	bl	8005acc <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8003a32:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8003a36:	b153      	cbz	r3, 8003a4e <USBD_CUSTOM_HID_DeInit+0x2e>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003a38:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003a40:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8003a44:	f002 ffc8 	bl	80069d8 <free>
    pdev->pClassData = NULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8003a4e:	2000      	movs	r0, #0
 8003a50:	bd10      	pop	{r4, pc}

08003a52 <USBD_CUSTOM_HID_Init>:
{
 8003a52:	b570      	push	{r4, r5, r6, lr}
  USBD_LL_OpenEP(pdev,
 8003a54:	2302      	movs	r3, #2
{
 8003a56:	4605      	mov	r5, r0
  USBD_LL_OpenEP(pdev,
 8003a58:	2203      	movs	r2, #3
 8003a5a:	2181      	movs	r1, #129	; 0x81
 8003a5c:	f002 f826 	bl	8005aac <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8003a60:	2302      	movs	r3, #2
 8003a62:	2203      	movs	r2, #3
 8003a64:	2101      	movs	r1, #1
 8003a66:	4628      	mov	r0, r5
 8003a68:	f002 f820 	bl	8005aac <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8003a6c:	2018      	movs	r0, #24
 8003a6e:	f002 ffab 	bl	80069c8 <malloc>
 8003a72:	4606      	mov	r6, r0
 8003a74:	f8c5 0218 	str.w	r0, [r5, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8003a78:	b168      	cbz	r0, 8003a96 <USBD_CUSTOM_HID_Init+0x44>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8003a7a:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
    hhid->state = CUSTOM_HID_IDLE;
 8003a7e:	2400      	movs	r4, #0
 8003a80:	7504      	strb	r4, [r0, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf, 
 8003a86:	2302      	movs	r3, #2
 8003a88:	4632      	mov	r2, r6
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	f002 f877 	bl	8005b80 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8003a92:	4620      	mov	r0, r4
 8003a94:	bd70      	pop	{r4, r5, r6, pc}
    ret = 1; 
 8003a96:	2001      	movs	r0, #1
}
 8003a98:	bd70      	pop	{r4, r5, r6, pc}

08003a9a <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8003a9a:	b119      	cbz	r1, 8003aa4 <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8003a9c:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003aa4:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8003aa6:	4770      	bx	lr

08003aa8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003aa8:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8003aaa:	b180      	cbz	r0, 8003ace <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003aac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003ab0:	b113      	cbz	r3, 8003ab8 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003ab8:	b109      	cbz	r1, 8003abe <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003aba:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8003ac4:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003ac6:	f001 ffad 	bl	8005a24 <USBD_LL_Init>
  
  return USBD_OK; 
 8003aca:	2000      	movs	r0, #0
 8003acc:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8003ace:	2002      	movs	r0, #2
}
 8003ad0:	bd08      	pop	{r3, pc}

08003ad2 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8003ad2:	b119      	cbz	r1, 8003adc <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003ad4:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8003ad8:	2000      	movs	r0, #0
 8003ada:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8003adc:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003ade:	4770      	bx	lr

08003ae0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003ae0:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8003ae2:	f001 ffd5 	bl	8005a90 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	bd08      	pop	{r3, pc}

08003aea <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003aea:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003aec:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003af0:	b90b      	cbnz	r3, 8003af6 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8003af2:	2002      	movs	r0, #2
 8003af4:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4798      	blx	r3
 8003afa:	2800      	cmp	r0, #0
 8003afc:	d1f9      	bne.n	8003af2 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8003afe:	bd08      	pop	{r3, pc}

08003b00 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003b00:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8003b02:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	4798      	blx	r3
  return USBD_OK;
}
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	bd08      	pop	{r3, pc}

08003b0e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003b0e:	b538      	push	{r3, r4, r5, lr}
 8003b10:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003b12:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8003b16:	4628      	mov	r0, r5
 8003b18:	f000 fa7d 	bl	8004016 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8003b1c:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8003b1e:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8003b22:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8003b26:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8003b2a:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8003b2e:	f001 031f 	and.w	r3, r1, #31
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d00e      	beq.n	8003b54 <USBD_LL_SetupStage+0x46>
 8003b36:	d307      	bcc.n	8003b48 <USBD_LL_SetupStage+0x3a>
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d010      	beq.n	8003b5e <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8003b3c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003b40:	4620      	mov	r0, r4
 8003b42:	f001 ffd1 	bl	8005ae8 <USBD_LL_StallEP>
    break;
 8003b46:	e003      	b.n	8003b50 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8003b48:	4629      	mov	r1, r5
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f000 f8e6 	bl	8003d1c <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8003b50:	2000      	movs	r0, #0
 8003b52:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8003b54:	4629      	mov	r1, r5
 8003b56:	4620      	mov	r0, r4
 8003b58:	f000 f9e2 	bl	8003f20 <USBD_StdItfReq>
    break;
 8003b5c:	e7f8      	b.n	8003b50 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8003b5e:	4629      	mov	r1, r5
 8003b60:	4620      	mov	r0, r4
 8003b62:	f000 f9f5 	bl	8003f50 <USBD_StdEPReq>
    break;
 8003b66:	e7f3      	b.n	8003b50 <USBD_LL_SetupStage+0x42>

08003b68 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8003b68:	b538      	push	{r3, r4, r5, lr}
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8003b6e:	bb11      	cbnz	r1, 8003bb6 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003b70:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d10f      	bne.n	8003b98 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8003b78:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8003b7c:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d90b      	bls.n	8003b9c <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8003b84:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8003b86:	429a      	cmp	r2, r3
 8003b88:	bf28      	it	cs
 8003b8a:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8003b8c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8003b90:	b292      	uxth	r2, r2
 8003b92:	4629      	mov	r1, r5
 8003b94:	f000 fa9e 	bl	80040d4 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003b98:	2000      	movs	r0, #0
 8003b9a:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003b9c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	b123      	cbz	r3, 8003bae <USBD_LL_DataOutStage+0x46>
 8003ba4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003ba8:	2a03      	cmp	r2, #3
 8003baa:	d100      	bne.n	8003bae <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8003bac:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f000 fa98 	bl	80040e4 <USBD_CtlSendStatus>
 8003bb4:	e7f0      	b.n	8003b98 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8003bb6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0eb      	beq.n	8003b98 <USBD_LL_DataOutStage+0x30>
 8003bc0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003bc4:	2a03      	cmp	r2, #3
 8003bc6:	d1e7      	bne.n	8003b98 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8003bc8:	4798      	blx	r3
 8003bca:	e7e5      	b.n	8003b98 <USBD_LL_DataOutStage+0x30>

08003bcc <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8003bcc:	b570      	push	{r4, r5, r6, lr}
 8003bce:	4613      	mov	r3, r2
 8003bd0:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8003bd2:	460e      	mov	r6, r1
 8003bd4:	2900      	cmp	r1, #0
 8003bd6:	d13d      	bne.n	8003c54 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003bd8:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8003bdc:	2a02      	cmp	r2, #2
 8003bde:	d10f      	bne.n	8003c00 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8003be0:	69c5      	ldr	r5, [r0, #28]
 8003be2:	6a02      	ldr	r2, [r0, #32]
 8003be4:	4295      	cmp	r5, r2
 8003be6:	d914      	bls.n	8003c12 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8003be8:	1aaa      	subs	r2, r5, r2
 8003bea:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8003bec:	4619      	mov	r1, r3
 8003bee:	b292      	uxth	r2, r2
 8003bf0:	f000 fa59 	bl	80040a6 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8003bf4:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f001 ffc0 	bl	8005b80 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8003c00:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d102      	bne.n	8003c0e <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003c0e:	2000      	movs	r0, #0
 8003c10:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8003c12:	6983      	ldr	r3, [r0, #24]
 8003c14:	fbb3 f5f2 	udiv	r5, r3, r2
 8003c18:	fb02 3515 	mls	r5, r2, r5, r3
 8003c1c:	b965      	cbnz	r5, 8003c38 <USBD_LL_DataInStage+0x6c>
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d80a      	bhi.n	8003c38 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8003c22:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d206      	bcs.n	8003c38 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003c2a:	462a      	mov	r2, r5
 8003c2c:	f000 fa3b 	bl	80040a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8003c30:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8003c34:	462b      	mov	r3, r5
 8003c36:	e7de      	b.n	8003bf6 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003c38:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	b12b      	cbz	r3, 8003c4c <USBD_LL_DataInStage+0x80>
 8003c40:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8003c44:	2a03      	cmp	r2, #3
 8003c46:	d101      	bne.n	8003c4c <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8003c48:	4620      	mov	r0, r4
 8003c4a:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	f000 fa54 	bl	80040fa <USBD_CtlReceiveStatus>
 8003c52:	e7d5      	b.n	8003c00 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8003c54:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0d7      	beq.n	8003c0e <USBD_LL_DataInStage+0x42>
 8003c5e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003c62:	2a03      	cmp	r2, #3
 8003c64:	d1d3      	bne.n	8003c0e <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8003c66:	4798      	blx	r3
 8003c68:	e7d1      	b.n	8003c0e <USBD_LL_DataInStage+0x42>

08003c6a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003c6a:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003c6c:	2200      	movs	r2, #0
{
 8003c6e:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8003c70:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003c72:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8003c74:	2340      	movs	r3, #64	; 0x40
 8003c76:	f001 ff19 	bl	8005aac <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003c7a:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003c7c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8003c80:	2200      	movs	r2, #0
 8003c82:	2180      	movs	r1, #128	; 0x80
 8003c84:	4620      	mov	r0, r4
 8003c86:	f001 ff11 	bl	8005aac <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8003c90:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003c94:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8003c96:	b12b      	cbz	r3, 8003ca4 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003c98:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003c9c:	7921      	ldrb	r1, [r4, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	bd38      	pop	{r3, r4, r5, pc}

08003ca8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003ca8:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8003caa:	2000      	movs	r0, #0
 8003cac:	4770      	bx	lr

08003cae <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003cae:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003cb2:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003cb6:	2304      	movs	r3, #4
 8003cb8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	4770      	bx	lr

08003cc0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8003cc0:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8003cc4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003cc8:	2000      	movs	r0, #0
 8003cca:	4770      	bx	lr

08003ccc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003ccc:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003cce:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003cd2:	2a03      	cmp	r2, #3
 8003cd4:	d104      	bne.n	8003ce0 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8003cd6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	b103      	cbz	r3, 8003ce0 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003cde:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	bd08      	pop	{r3, pc}

08003ce4 <USBD_LL_IsoINIncomplete>:
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	4770      	bx	lr

08003ce8 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8003ce8:	2000      	movs	r0, #0
 8003cea:	4770      	bx	lr

08003cec <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8003cec:	2000      	movs	r0, #0
 8003cee:	4770      	bx	lr

08003cf0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8003cf0:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003cf8:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8003cfc:	7901      	ldrb	r1, [r0, #4]
 8003cfe:	6852      	ldr	r2, [r2, #4]
 8003d00:	4790      	blx	r2
   
  return USBD_OK;
}
 8003d02:	2000      	movs	r0, #0
 8003d04:	bd08      	pop	{r3, pc}

08003d06 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8003d06:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8003d08:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8003d0a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8003d0c:	f001 feec 	bl	8005ae8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003d10:	4620      	mov	r0, r4
 8003d12:	2100      	movs	r1, #0
}
 8003d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8003d18:	f001 bee6 	b.w	8005ae8 <USBD_LL_StallEP>

08003d1c <USBD_StdDevReq>:
{
 8003d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8003d1e:	784b      	ldrb	r3, [r1, #1]
{
 8003d20:	4604      	mov	r4, r0
 8003d22:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8003d24:	2b09      	cmp	r3, #9
 8003d26:	f200 8081 	bhi.w	8003e2c <USBD_StdDevReq+0x110>
 8003d2a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003d2e:	00d0      	.short	0x00d0
 8003d30:	007f00ec 	.word	0x007f00ec
 8003d34:	007f00e0 	.word	0x007f00e0
 8003d38:	000a0074 	.word	0x000a0074
 8003d3c:	00c0007f 	.word	0x00c0007f
 8003d40:	0094      	.short	0x0094
  switch (req->wValue >> 8)
 8003d42:	8849      	ldrh	r1, [r1, #2]
 8003d44:	0a0b      	lsrs	r3, r1, #8
 8003d46:	3b01      	subs	r3, #1
 8003d48:	2b06      	cmp	r3, #6
 8003d4a:	d86f      	bhi.n	8003e2c <USBD_StdDevReq+0x110>
 8003d4c:	e8df f003 	tbb	[pc, r3]
 8003d50:	6e291c04 	.word	0x6e291c04
 8003d54:	506e      	.short	0x506e
 8003d56:	59          	.byte	0x59
 8003d57:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003d58:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003d5c:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003d5e:	7c20      	ldrb	r0, [r4, #16]
 8003d60:	f10d 0106 	add.w	r1, sp, #6
 8003d64:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8003d66:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003d6a:	2a00      	cmp	r2, #0
 8003d6c:	d06e      	beq.n	8003e4c <USBD_StdDevReq+0x130>
 8003d6e:	88eb      	ldrh	r3, [r5, #6]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d06b      	beq.n	8003e4c <USBD_StdDevReq+0x130>
    len = MIN(len , req->wLength);
 8003d74:	429a      	cmp	r2, r3
 8003d76:	bf28      	it	cs
 8003d78:	461a      	movcs	r2, r3
 8003d7a:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8003d7e:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 8003d80:	4620      	mov	r0, r4
 8003d82:	f000 f983 	bl	800408c <USBD_CtlSendData>
 8003d86:	e061      	b.n	8003e4c <USBD_StdDevReq+0x130>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8003d88:	7c02      	ldrb	r2, [r0, #16]
 8003d8a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003d8e:	b932      	cbnz	r2, 8003d9e <USBD_StdDevReq+0x82>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003d92:	f10d 0006 	add.w	r0, sp, #6
 8003d96:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003d98:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003d9a:	7043      	strb	r3, [r0, #1]
 8003d9c:	e7e3      	b.n	8003d66 <USBD_StdDevReq+0x4a>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	e7f7      	b.n	8003d92 <USBD_StdDevReq+0x76>
    switch ((uint8_t)(req->wValue))
 8003da2:	b2c9      	uxtb	r1, r1
 8003da4:	2905      	cmp	r1, #5
 8003da6:	d81c      	bhi.n	8003de2 <USBD_StdDevReq+0xc6>
 8003da8:	e8df f001 	tbb	[pc, r1]
 8003dac:	0f0b0703 	.word	0x0f0b0703
 8003db0:	1713      	.short	0x1713
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003db2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	e7d1      	b.n	8003d5e <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003dba:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	e7cd      	b.n	8003d5e <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003dc2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	e7c9      	b.n	8003d5e <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003dca:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	e7c5      	b.n	8003d5e <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003dd2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	e7c1      	b.n	8003d5e <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003dda:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	e7bd      	b.n	8003d5e <USBD_StdDevReq+0x42>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 8003de2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003de6:	f10d 0206 	add.w	r2, sp, #6
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	4798      	blx	r3
 8003dee:	e7ba      	b.n	8003d66 <USBD_StdDevReq+0x4a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003df0:	7c03      	ldrb	r3, [r0, #16]
 8003df2:	b9db      	cbnz	r3, 8003e2c <USBD_StdDevReq+0x110>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003df4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003df8:	f10d 0006 	add.w	r0, sp, #6
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfe:	4798      	blx	r3
 8003e00:	e7b1      	b.n	8003d66 <USBD_StdDevReq+0x4a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003e02:	7c03      	ldrb	r3, [r0, #16]
 8003e04:	b993      	cbnz	r3, 8003e2c <USBD_StdDevReq+0x110>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003e06:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003e0a:	f10d 0006 	add.w	r0, sp, #6
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003e12:	2307      	movs	r3, #7
 8003e14:	e7c1      	b.n	8003d9a <USBD_StdDevReq+0x7e>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8003e16:	888b      	ldrh	r3, [r1, #4]
 8003e18:	b943      	cbnz	r3, 8003e2c <USBD_StdDevReq+0x110>
 8003e1a:	88cb      	ldrh	r3, [r1, #6]
 8003e1c:	b933      	cbnz	r3, 8003e2c <USBD_StdDevReq+0x110>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003e1e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003e22:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003e24:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003e26:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003e2a:	d103      	bne.n	8003e34 <USBD_StdDevReq+0x118>
    USBD_CtlError(pdev , req);
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f7ff ff6a 	bl	8003d06 <USBD_CtlError.constprop.0>
    break;
 8003e32:	e00b      	b.n	8003e4c <USBD_StdDevReq+0x130>
      pdev->dev_address = dev_addr;
 8003e34:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8003e38:	4629      	mov	r1, r5
 8003e3a:	f001 fe85 	bl	8005b48 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f000 f950 	bl	80040e4 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8003e44:	b12d      	cbz	r5, 8003e52 <USBD_StdDevReq+0x136>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8003e46:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003e48:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	b003      	add	sp, #12
 8003e50:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003e52:	2301      	movs	r3, #1
 8003e54:	e7f8      	b.n	8003e48 <USBD_StdDevReq+0x12c>
  cfgidx = (uint8_t)(req->wValue);                 
 8003e56:	7889      	ldrb	r1, [r1, #2]
 8003e58:	4d30      	ldr	r5, [pc, #192]	; (8003f1c <USBD_StdDevReq+0x200>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003e5a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8003e5c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003e5e:	d8e5      	bhi.n	8003e2c <USBD_StdDevReq+0x110>
    switch (pdev->dev_state) 
 8003e60:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d00c      	beq.n	8003e82 <USBD_StdDevReq+0x166>
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d1df      	bne.n	8003e2c <USBD_StdDevReq+0x110>
      if (cfgidx == 0) 
 8003e6c:	b9b1      	cbnz	r1, 8003e9c <USBD_StdDevReq+0x180>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8003e74:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8003e76:	f7ff fe43 	bl	8003b00 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f000 f932 	bl	80040e4 <USBD_CtlSendStatus>
 8003e80:	e7e4      	b.n	8003e4c <USBD_StdDevReq+0x130>
      if (cfgidx) 
 8003e82:	2900      	cmp	r1, #0
 8003e84:	d0f9      	beq.n	8003e7a <USBD_StdDevReq+0x15e>
        pdev->dev_config = cfgidx;
 8003e86:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003e88:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8003e8a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003e8c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003e90:	4620      	mov	r0, r4
 8003e92:	f7ff fe2a 	bl	8003aea <USBD_SetClassConfig>
 8003e96:	2802      	cmp	r0, #2
 8003e98:	d1ef      	bne.n	8003e7a <USBD_StdDevReq+0x15e>
 8003e9a:	e7c7      	b.n	8003e2c <USBD_StdDevReq+0x110>
      else  if (cfgidx != pdev->dev_config) 
 8003e9c:	6841      	ldr	r1, [r0, #4]
 8003e9e:	2901      	cmp	r1, #1
 8003ea0:	d0eb      	beq.n	8003e7a <USBD_StdDevReq+0x15e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8003ea2:	b2c9      	uxtb	r1, r1
 8003ea4:	f7ff fe2c 	bl	8003b00 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003ea8:	7829      	ldrb	r1, [r5, #0]
 8003eaa:	6061      	str	r1, [r4, #4]
 8003eac:	e7f0      	b.n	8003e90 <USBD_StdDevReq+0x174>
  if (req->wLength != 1) 
 8003eae:	88ca      	ldrh	r2, [r1, #6]
 8003eb0:	2a01      	cmp	r2, #1
 8003eb2:	d1bb      	bne.n	8003e2c <USBD_StdDevReq+0x110>
    switch (pdev->dev_state )  
 8003eb4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d003      	beq.n	8003ec4 <USBD_StdDevReq+0x1a8>
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d1b5      	bne.n	8003e2c <USBD_StdDevReq+0x110>
      USBD_CtlSendData (pdev, 
 8003ec0:	1d01      	adds	r1, r0, #4
 8003ec2:	e75d      	b.n	8003d80 <USBD_StdDevReq+0x64>
      pdev->dev_default_config = 0;
 8003ec4:	4601      	mov	r1, r0
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f841 3f08 	str.w	r3, [r1, #8]!
 8003ecc:	e758      	b.n	8003d80 <USBD_StdDevReq+0x64>
  switch (pdev->dev_state) 
 8003ece:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003ed2:	3b02      	subs	r3, #2
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d8a9      	bhi.n	8003e2c <USBD_StdDevReq+0x110>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8003ed8:	2301      	movs	r3, #1
 8003eda:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8003edc:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003ee0:	b10b      	cbz	r3, 8003ee6 <USBD_StdDevReq+0x1ca>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f104 010c 	add.w	r1, r4, #12
 8003eec:	e748      	b.n	8003d80 <USBD_StdDevReq+0x64>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003eee:	884b      	ldrh	r3, [r1, #2]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d1ab      	bne.n	8003e4c <USBD_StdDevReq+0x130>
      pdev->dev_remote_wakeup = 0; 
 8003ef4:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003ef8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003efc:	4629      	mov	r1, r5
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4620      	mov	r0, r4
 8003f02:	4798      	blx	r3
 8003f04:	e7b9      	b.n	8003e7a <USBD_StdDevReq+0x15e>
  switch (pdev->dev_state)
 8003f06:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003f0a:	3b02      	subs	r3, #2
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d88d      	bhi.n	8003e2c <USBD_StdDevReq+0x110>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003f10:	884b      	ldrh	r3, [r1, #2]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d19a      	bne.n	8003e4c <USBD_StdDevReq+0x130>
      pdev->dev_remote_wakeup = 0; 
 8003f16:	2300      	movs	r3, #0
 8003f18:	e7ec      	b.n	8003ef4 <USBD_StdDevReq+0x1d8>
 8003f1a:	bf00      	nop
 8003f1c:	20000160 	.word	0x20000160

08003f20 <USBD_StdItfReq>:
{
 8003f20:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8003f22:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003f26:	2b03      	cmp	r3, #3
{
 8003f28:	4604      	mov	r4, r0
 8003f2a:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8003f2c:	d10d      	bne.n	8003f4a <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8003f2e:	790b      	ldrb	r3, [r1, #4]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d80a      	bhi.n	8003f4a <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8003f34:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003f3c:	88eb      	ldrh	r3, [r5, #6]
 8003f3e:	b913      	cbnz	r3, 8003f46 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8003f40:	4620      	mov	r0, r4
 8003f42:	f000 f8cf 	bl	80040e4 <USBD_CtlSendStatus>
}
 8003f46:	2000      	movs	r0, #0
 8003f48:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8003f4a:	f7ff fedc 	bl	8003d06 <USBD_CtlError.constprop.0>
    break;
 8003f4e:	e7fa      	b.n	8003f46 <USBD_StdItfReq+0x26>

08003f50 <USBD_StdEPReq>:
{
 8003f50:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8003f52:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8003f54:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8003f56:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003f5a:	2a20      	cmp	r2, #32
{
 8003f5c:	4604      	mov	r4, r0
 8003f5e:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8003f60:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8003f62:	d105      	bne.n	8003f70 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8003f64:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	4798      	blx	r3
}
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8003f70:	784a      	ldrb	r2, [r1, #1]
 8003f72:	2a01      	cmp	r2, #1
 8003f74:	d01c      	beq.n	8003fb0 <USBD_StdEPReq+0x60>
 8003f76:	d32a      	bcc.n	8003fce <USBD_StdEPReq+0x7e>
 8003f78:	2a03      	cmp	r2, #3
 8003f7a:	d1f7      	bne.n	8003f6c <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003f7c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003f80:	2a02      	cmp	r2, #2
 8003f82:	d040      	beq.n	8004006 <USBD_StdEPReq+0xb6>
 8003f84:	2a03      	cmp	r2, #3
 8003f86:	d002      	beq.n	8003f8e <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8003f88:	f7ff febd 	bl	8003d06 <USBD_CtlError.constprop.0>
      break;
 8003f8c:	e7ee      	b.n	8003f6c <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003f8e:	884a      	ldrh	r2, [r1, #2]
 8003f90:	b922      	cbnz	r2, 8003f9c <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003f92:	065e      	lsls	r6, r3, #25
 8003f94:	d002      	beq.n	8003f9c <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8003f96:	4619      	mov	r1, r3
 8003f98:	f001 fda6 	bl	8005ae8 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8003f9c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003fa0:	4629      	mov	r1, r5
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f000 f89b 	bl	80040e4 <USBD_CtlSendStatus>
 8003fae:	e7dd      	b.n	8003f6c <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003fb0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003fb4:	2a02      	cmp	r2, #2
 8003fb6:	d026      	beq.n	8004006 <USBD_StdEPReq+0xb6>
 8003fb8:	2a03      	cmp	r2, #3
 8003fba:	d1e5      	bne.n	8003f88 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003fbc:	884a      	ldrh	r2, [r1, #2]
 8003fbe:	2a00      	cmp	r2, #0
 8003fc0:	d1d4      	bne.n	8003f6c <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8003fc2:	0659      	lsls	r1, r3, #25
 8003fc4:	d0f0      	beq.n	8003fa8 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	f001 fd9c 	bl	8005b04 <USBD_LL_ClearStallEP>
 8003fcc:	e7e6      	b.n	8003f9c <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8003fce:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003fd2:	2a02      	cmp	r2, #2
 8003fd4:	d017      	beq.n	8004006 <USBD_StdEPReq+0xb6>
 8003fd6:	2a03      	cmp	r2, #3
 8003fd8:	d1d6      	bne.n	8003f88 <USBD_StdEPReq+0x38>
 8003fda:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003fde:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003fe2:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003fe6:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003fe8:	bf14      	ite	ne
 8003fea:	3514      	addne	r5, #20
 8003fec:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003ff0:	f001 fd96 	bl	8005b20 <USBD_LL_IsStallEP>
 8003ff4:	b168      	cbz	r0, 8004012 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	4620      	mov	r0, r4
 8004000:	f000 f844 	bl	800408c <USBD_CtlSendData>
      break;
 8004004:	e7b2      	b.n	8003f6c <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8004006:	065a      	lsls	r2, r3, #25
 8004008:	d0b0      	beq.n	8003f6c <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 800400a:	4619      	mov	r1, r3
 800400c:	f001 fd6c 	bl	8005ae8 <USBD_LL_StallEP>
 8004010:	e7ac      	b.n	8003f6c <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8004012:	6028      	str	r0, [r5, #0]
 8004014:	e7f1      	b.n	8003ffa <USBD_StdEPReq+0xaa>

08004016 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8004016:	780b      	ldrb	r3, [r1, #0]
 8004018:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800401a:	784b      	ldrb	r3, [r1, #1]
 800401c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800401e:	78ca      	ldrb	r2, [r1, #3]
 8004020:	788b      	ldrb	r3, [r1, #2]
 8004022:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004026:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8004028:	794a      	ldrb	r2, [r1, #5]
 800402a:	790b      	ldrb	r3, [r1, #4]
 800402c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004030:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8004032:	79ca      	ldrb	r2, [r1, #7]
 8004034:	798b      	ldrb	r3, [r1, #6]
 8004036:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800403a:	80c3      	strh	r3, [r0, #6]
 800403c:	4770      	bx	lr

0800403e <USBD_CtlError>:
{
 800403e:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 8004040:	2180      	movs	r1, #128	; 0x80
{
 8004042:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8004044:	f001 fd50 	bl	8005ae8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8004048:	4620      	mov	r0, r4
 800404a:	2100      	movs	r1, #0
}
 800404c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8004050:	f001 bd4a 	b.w	8005ae8 <USBD_LL_StallEP>

08004054 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004054:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8004056:	b188      	cbz	r0, 800407c <USBD_GetString+0x28>
 8004058:	4605      	mov	r5, r0
 800405a:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800405c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2c00      	cmp	r4, #0
 8004064:	d1f9      	bne.n	800405a <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	3302      	adds	r3, #2
 800406a:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800406c:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800406e:	2303      	movs	r3, #3
 8004070:	704b      	strb	r3, [r1, #1]
 8004072:	3801      	subs	r0, #1
 8004074:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8004076:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800407a:	b905      	cbnz	r5, 800407e <USBD_GetString+0x2a>
 800407c:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8004084:	3302      	adds	r3, #2
 8004086:	b2db      	uxtb	r3, r3
 8004088:	548c      	strb	r4, [r1, r2]
 800408a:	e7f4      	b.n	8004076 <USBD_GetString+0x22>

0800408c <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800408c:	b510      	push	{r4, lr}
 800408e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8004090:	2202      	movs	r2, #2
 8004092:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8004096:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8004098:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800409a:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800409c:	2100      	movs	r1, #0
 800409e:	f001 fd61 	bl	8005b64 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80040a2:	2000      	movs	r0, #0
 80040a4:	bd10      	pop	{r4, pc}

080040a6 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80040a6:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80040a8:	4613      	mov	r3, r2
 80040aa:	460a      	mov	r2, r1
 80040ac:	2100      	movs	r1, #0
 80040ae:	f001 fd59 	bl	8005b64 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80040b2:	2000      	movs	r0, #0
 80040b4:	bd08      	pop	{r3, pc}

080040b6 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80040b6:	b510      	push	{r4, lr}
 80040b8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80040ba:	2203      	movs	r2, #3
 80040bc:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80040c0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80040c4:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80040c6:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 80040ca:	2100      	movs	r1, #0
 80040cc:	f001 fd58 	bl	8005b80 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80040d0:	2000      	movs	r0, #0
 80040d2:	bd10      	pop	{r4, pc}

080040d4 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80040d4:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80040d6:	4613      	mov	r3, r2
 80040d8:	460a      	mov	r2, r1
 80040da:	2100      	movs	r1, #0
 80040dc:	f001 fd50 	bl	8005b80 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80040e0:	2000      	movs	r0, #0
 80040e2:	bd08      	pop	{r3, pc}

080040e4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80040e4:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80040e6:	2304      	movs	r3, #4
 80040e8:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80040ec:	2300      	movs	r3, #0
 80040ee:	461a      	mov	r2, r3
 80040f0:	4619      	mov	r1, r3
 80040f2:	f001 fd37 	bl	8005b64 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80040f6:	2000      	movs	r0, #0
 80040f8:	bd08      	pop	{r3, pc}

080040fa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80040fa:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80040fc:	2305      	movs	r3, #5
 80040fe:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8004102:	2300      	movs	r3, #0
 8004104:	461a      	mov	r2, r3
 8004106:	4619      	mov	r1, r3
 8004108:	f001 fd3a 	bl	8005b80 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800410c:	2000      	movs	r0, #0
 800410e:	bd08      	pop	{r3, pc}

08004110 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004110:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004112:	f000 fbd9 	bl	80048c8 <vTaskStartScheduler>
  
  return osOK;
}
 8004116:	2000      	movs	r0, #0
 8004118:	bd08      	pop	{r3, pc}

0800411a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800411a:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800411c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8004120:	8a02      	ldrh	r2, [r0, #16]
{
 8004122:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004124:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8004128:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 800412a:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800412c:	bf14      	ite	ne
 800412e:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004130:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004132:	a803      	add	r0, sp, #12
 8004134:	9001      	str	r0, [sp, #4]
 8004136:	9400      	str	r4, [sp, #0]
 8004138:	4628      	mov	r0, r5
 800413a:	f000 faf5 	bl	8004728 <xTaskCreate>
 800413e:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004140:	bf0c      	ite	eq
 8004142:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8004144:	2000      	movne	r0, #0
}
 8004146:	b005      	add	sp, #20
 8004148:	bd30      	pop	{r4, r5, pc}

0800414a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800414a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800414c:	2800      	cmp	r0, #0
 800414e:	bf08      	it	eq
 8004150:	2001      	moveq	r0, #1
 8004152:	f000 fd07 	bl	8004b64 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004156:	2000      	movs	r0, #0
 8004158:	bd08      	pop	{r3, pc}

0800415a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800415a:	f100 0308 	add.w	r3, r0, #8
 800415e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004160:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004164:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004166:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004168:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800416a:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800416c:	6003      	str	r3, [r0, #0]
 800416e:	4770      	bx	lr

08004170 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004170:	2300      	movs	r3, #0
 8004172:	6103      	str	r3, [r0, #16]
 8004174:	4770      	bx	lr

08004176 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004176:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004178:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004182:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004184:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004186:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004188:	3301      	adds	r3, #1
 800418a:	6003      	str	r3, [r0, #0]
 800418c:	4770      	bx	lr

0800418e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800418e:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004190:	1c53      	adds	r3, r2, #1
{
 8004192:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8004194:	d10a      	bne.n	80041ac <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004196:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800419c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800419e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80041a0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80041a2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80041a4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80041a6:	3301      	adds	r3, #1
 80041a8:	6003      	str	r3, [r0, #0]
 80041aa:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041ac:	f100 0308 	add.w	r3, r0, #8
 80041b0:	685c      	ldr	r4, [r3, #4]
 80041b2:	6825      	ldr	r5, [r4, #0]
 80041b4:	42aa      	cmp	r2, r5
 80041b6:	d3ef      	bcc.n	8004198 <vListInsert+0xa>
 80041b8:	4623      	mov	r3, r4
 80041ba:	e7f9      	b.n	80041b0 <vListInsert+0x22>

080041bc <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041bc:	6841      	ldr	r1, [r0, #4]
 80041be:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80041c0:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041c2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041c4:	6882      	ldr	r2, [r0, #8]
 80041c6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041c8:	6859      	ldr	r1, [r3, #4]
 80041ca:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041cc:	bf08      	it	eq
 80041ce:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80041d0:	2200      	movs	r2, #0
 80041d2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	3801      	subs	r0, #1
 80041d8:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80041da:	4770      	bx	lr

080041dc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <prvTaskExitError+0x2c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3301      	adds	r3, #1
 80041e2:	d008      	beq.n	80041f6 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	e7fe      	b.n	80041f4 <prvTaskExitError+0x18>
 80041f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	e7fe      	b.n	8004206 <prvTaskExitError+0x2a>
 8004208:	20000088 	.word	0x20000088

0800420c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800420c:	4806      	ldr	r0, [pc, #24]	; (8004228 <prvPortStartFirstTask+0x1c>)
 800420e:	6800      	ldr	r0, [r0, #0]
 8004210:	6800      	ldr	r0, [r0, #0]
 8004212:	f380 8808 	msr	MSP, r0
 8004216:	b662      	cpsie	i
 8004218:	b661      	cpsie	f
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	df00      	svc	0
 8004224:	bf00      	nop
 8004226:	0000      	.short	0x0000
 8004228:	e000ed08 	.word	0xe000ed08

0800422c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800422c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800423c <vPortEnableVFP+0x10>
 8004230:	6801      	ldr	r1, [r0, #0]
 8004232:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004236:	6001      	str	r1, [r0, #0]
 8004238:	4770      	bx	lr
 800423a:	0000      	.short	0x0000
 800423c:	e000ed88 	.word	0xe000ed88

08004240 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004240:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004244:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004248:	4b07      	ldr	r3, [pc, #28]	; (8004268 <pxPortInitialiseStack+0x28>)
 800424a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800424e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8004252:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004256:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800425a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800425e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8004262:	3844      	subs	r0, #68	; 0x44
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	080041dd 	.word	0x080041dd
 800426c:	00000000 	.word	0x00000000

08004270 <SVC_Handler>:
	__asm volatile (
 8004270:	4b07      	ldr	r3, [pc, #28]	; (8004290 <pxCurrentTCBConst2>)
 8004272:	6819      	ldr	r1, [r3, #0]
 8004274:	6808      	ldr	r0, [r1, #0]
 8004276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427a:	f380 8809 	msr	PSP, r0
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f380 8811 	msr	BASEPRI, r0
 800428a:	4770      	bx	lr
 800428c:	f3af 8000 	nop.w

08004290 <pxCurrentTCBConst2>:
 8004290:	20003d80 	.word	0x20003d80

08004294 <vPortEnterCritical>:
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80042a4:	4a0a      	ldr	r2, [pc, #40]	; (80042d0 <vPortEnterCritical+0x3c>)
 80042a6:	6813      	ldr	r3, [r2, #0]
 80042a8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80042aa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80042ac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80042ae:	d10d      	bne.n	80042cc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042b0:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <vPortEnterCritical+0x40>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80042b8:	d008      	beq.n	80042cc <vPortEnterCritical+0x38>
 80042ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	e7fe      	b.n	80042ca <vPortEnterCritical+0x36>
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20000088 	.word	0x20000088
 80042d4:	e000ed04 	.word	0xe000ed04

080042d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80042d8:	4a08      	ldr	r2, [pc, #32]	; (80042fc <vPortExitCritical+0x24>)
 80042da:	6813      	ldr	r3, [r2, #0]
 80042dc:	b943      	cbnz	r3, 80042f0 <vPortExitCritical+0x18>
 80042de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	e7fe      	b.n	80042ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80042f0:	3b01      	subs	r3, #1
 80042f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042f4:	b90b      	cbnz	r3, 80042fa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	4770      	bx	lr
 80042fc:	20000088 	.word	0x20000088

08004300 <PendSV_Handler>:
	__asm volatile
 8004300:	f3ef 8009 	mrs	r0, PSP
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	4b15      	ldr	r3, [pc, #84]	; (8004360 <pxCurrentTCBConst>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	f01e 0f10 	tst.w	lr, #16
 8004310:	bf08      	it	eq
 8004312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800431a:	6010      	str	r0, [r2, #0]
 800431c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8004320:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004324:	f380 8811 	msr	BASEPRI, r0
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f000 fc76 	bl	8004c20 <vTaskSwitchContext>
 8004334:	f04f 0000 	mov.w	r0, #0
 8004338:	f380 8811 	msr	BASEPRI, r0
 800433c:	bc08      	pop	{r3}
 800433e:	6819      	ldr	r1, [r3, #0]
 8004340:	6808      	ldr	r0, [r1, #0]
 8004342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004346:	f01e 0f10 	tst.w	lr, #16
 800434a:	bf08      	it	eq
 800434c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004350:	f380 8809 	msr	PSP, r0
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	f3af 8000 	nop.w

08004360 <pxCurrentTCBConst>:
 8004360:	20003d80 	.word	0x20003d80

08004364 <SysTick_Handler>:
{
 8004364:	b508      	push	{r3, lr}
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8004376:	f000 faeb 	bl	8004950 <xTaskIncrementTick>
 800437a:	b118      	cbz	r0, 8004384 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800437c:	4b03      	ldr	r3, [pc, #12]	; (800438c <SysTick_Handler+0x28>)
 800437e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004382:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004384:	2300      	movs	r3, #0
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	bd08      	pop	{r3, pc}
 800438c:	e000ed04 	.word	0xe000ed04

08004390 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004390:	4b06      	ldr	r3, [pc, #24]	; (80043ac <vPortSetupTimerInterrupt+0x1c>)
 8004392:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	fbb3 f3f2 	udiv	r3, r3, r2
 800439c:	4a04      	ldr	r2, [pc, #16]	; (80043b0 <vPortSetupTimerInterrupt+0x20>)
 800439e:	3b01      	subs	r3, #1
 80043a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043a2:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <vPortSetupTimerInterrupt+0x24>)
 80043a4:	2207      	movs	r2, #7
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	2000008c 	.word	0x2000008c
 80043b0:	e000e014 	.word	0xe000e014
 80043b4:	e000e010 	.word	0xe000e010

080043b8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043b8:	4b31      	ldr	r3, [pc, #196]	; (8004480 <xPortStartScheduler+0xc8>)
 80043ba:	4a32      	ldr	r2, [pc, #200]	; (8004484 <xPortStartScheduler+0xcc>)
{
 80043bc:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043be:	6819      	ldr	r1, [r3, #0]
 80043c0:	4291      	cmp	r1, r2
 80043c2:	d108      	bne.n	80043d6 <xPortStartScheduler+0x1e>
	__asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	e7fe      	b.n	80043d4 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b2b      	ldr	r3, [pc, #172]	; (8004488 <xPortStartScheduler+0xd0>)
 80043da:	429a      	cmp	r2, r3
 80043dc:	d108      	bne.n	80043f0 <xPortStartScheduler+0x38>
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	e7fe      	b.n	80043ee <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043f0:	4b26      	ldr	r3, [pc, #152]	; (800448c <xPortStartScheduler+0xd4>)
 80043f2:	781a      	ldrb	r2, [r3, #0]
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043f8:	22ff      	movs	r2, #255	; 0xff
 80043fa:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043fc:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043fe:	4a24      	ldr	r2, [pc, #144]	; (8004490 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004406:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800440a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800440e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004410:	4b20      	ldr	r3, [pc, #128]	; (8004494 <xPortStartScheduler+0xdc>)
 8004412:	2207      	movs	r2, #7
 8004414:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004416:	2100      	movs	r1, #0
 8004418:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800441c:	0600      	lsls	r0, r0, #24
 800441e:	f102 34ff 	add.w	r4, r2, #4294967295
 8004422:	d423      	bmi.n	800446c <xPortStartScheduler+0xb4>
 8004424:	b101      	cbz	r1, 8004428 <xPortStartScheduler+0x70>
 8004426:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800442c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004430:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004432:	9b01      	ldr	r3, [sp, #4]
 8004434:	4a15      	ldr	r2, [pc, #84]	; (800448c <xPortStartScheduler+0xd4>)
 8004436:	b2db      	uxtb	r3, r3
 8004438:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800443a:	4b17      	ldr	r3, [pc, #92]	; (8004498 <xPortStartScheduler+0xe0>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004442:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800444a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800444c:	f7ff ffa0 	bl	8004390 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004450:	4b12      	ldr	r3, [pc, #72]	; (800449c <xPortStartScheduler+0xe4>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8004456:	f7ff fee9 	bl	800422c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800445a:	4a11      	ldr	r2, [pc, #68]	; (80044a0 <xPortStartScheduler+0xe8>)
 800445c:	6813      	ldr	r3, [r2, #0]
 800445e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004462:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8004464:	f7ff fed2 	bl	800420c <prvPortStartFirstTask>
	prvTaskExitError();
 8004468:	f7ff feb8 	bl	80041dc <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800446c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004470:	0052      	lsls	r2, r2, #1
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	f88d 2003 	strb.w	r2, [sp, #3]
 8004478:	2101      	movs	r1, #1
 800447a:	4622      	mov	r2, r4
 800447c:	e7cc      	b.n	8004418 <xPortStartScheduler+0x60>
 800447e:	bf00      	nop
 8004480:	e000ed00 	.word	0xe000ed00
 8004484:	410fc271 	.word	0x410fc271
 8004488:	410fc270 	.word	0x410fc270
 800448c:	e000e400 	.word	0xe000e400
 8004490:	20000161 	.word	0x20000161
 8004494:	20000164 	.word	0x20000164
 8004498:	e000ed20 	.word	0xe000ed20
 800449c:	20000088 	.word	0x20000088
 80044a0:	e000ef34 	.word	0xe000ef34

080044a4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80044a4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044a6:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <prvInsertBlockIntoFreeList+0x40>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4282      	cmp	r2, r0
 80044ac:	d318      	bcc.n	80044e0 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044ae:	685c      	ldr	r4, [r3, #4]
 80044b0:	1919      	adds	r1, r3, r4
 80044b2:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044b4:	bf01      	itttt	eq
 80044b6:	6841      	ldreq	r1, [r0, #4]
 80044b8:	4618      	moveq	r0, r3
 80044ba:	1909      	addeq	r1, r1, r4
 80044bc:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044be:	6844      	ldr	r4, [r0, #4]
 80044c0:	1901      	adds	r1, r0, r4
 80044c2:	428a      	cmp	r2, r1
 80044c4:	d107      	bne.n	80044d6 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044c6:	4908      	ldr	r1, [pc, #32]	; (80044e8 <prvInsertBlockIntoFreeList+0x44>)
 80044c8:	6809      	ldr	r1, [r1, #0]
 80044ca:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044cc:	bf1f      	itttt	ne
 80044ce:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044d0:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044d2:	1909      	addne	r1, r1, r4
 80044d4:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80044d6:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80044d8:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80044da:	bf18      	it	ne
 80044dc:	6018      	strne	r0, [r3, #0]
 80044de:	bd10      	pop	{r4, pc}
 80044e0:	4613      	mov	r3, r2
 80044e2:	e7e1      	b.n	80044a8 <prvInsertBlockIntoFreeList+0x4>
 80044e4:	20003d78 	.word	0x20003d78
 80044e8:	20000168 	.word	0x20000168

080044ec <pvPortMalloc>:
{
 80044ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044f0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80044f2:	f000 fa25 	bl	8004940 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80044f6:	493e      	ldr	r1, [pc, #248]	; (80045f0 <pvPortMalloc+0x104>)
 80044f8:	4d3e      	ldr	r5, [pc, #248]	; (80045f4 <pvPortMalloc+0x108>)
 80044fa:	680b      	ldr	r3, [r1, #0]
 80044fc:	bb0b      	cbnz	r3, 8004542 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80044fe:	4a3e      	ldr	r2, [pc, #248]	; (80045f8 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004500:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004502:	bf1f      	itttt	ne
 8004504:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004506:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800450a:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800450e:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004510:	bf14      	ite	ne
 8004512:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004514:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004518:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800451a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800451c:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004520:	4e36      	ldr	r6, [pc, #216]	; (80045fc <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8004522:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004524:	2000      	movs	r0, #0
 8004526:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004528:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800452a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800452c:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800452e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004530:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004532:	4b33      	ldr	r3, [pc, #204]	; (8004600 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004534:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004536:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004538:	4b32      	ldr	r3, [pc, #200]	; (8004604 <pvPortMalloc+0x118>)
 800453a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800453c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004540:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004542:	682f      	ldr	r7, [r5, #0]
 8004544:	4227      	tst	r7, r4
 8004546:	d116      	bne.n	8004576 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8004548:	2c00      	cmp	r4, #0
 800454a:	d041      	beq.n	80045d0 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 800454c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004550:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004552:	bf1c      	itt	ne
 8004554:	f023 0307 	bicne.w	r3, r3, #7
 8004558:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800455a:	b163      	cbz	r3, 8004576 <pvPortMalloc+0x8a>
 800455c:	4a29      	ldr	r2, [pc, #164]	; (8004604 <pvPortMalloc+0x118>)
 800455e:	6816      	ldr	r6, [r2, #0]
 8004560:	42b3      	cmp	r3, r6
 8004562:	4690      	mov	r8, r2
 8004564:	d807      	bhi.n	8004576 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8004566:	4a25      	ldr	r2, [pc, #148]	; (80045fc <pvPortMalloc+0x110>)
 8004568:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800456a:	6868      	ldr	r0, [r5, #4]
 800456c:	4283      	cmp	r3, r0
 800456e:	d804      	bhi.n	800457a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8004570:	6809      	ldr	r1, [r1, #0]
 8004572:	428d      	cmp	r5, r1
 8004574:	d107      	bne.n	8004586 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8004576:	2400      	movs	r4, #0
 8004578:	e02a      	b.n	80045d0 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800457a:	682c      	ldr	r4, [r5, #0]
 800457c:	2c00      	cmp	r4, #0
 800457e:	d0f7      	beq.n	8004570 <pvPortMalloc+0x84>
 8004580:	462a      	mov	r2, r5
 8004582:	4625      	mov	r5, r4
 8004584:	e7f1      	b.n	800456a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004586:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004588:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800458a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800458c:	1ac2      	subs	r2, r0, r3
 800458e:	2a10      	cmp	r2, #16
 8004590:	d90f      	bls.n	80045b2 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004592:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004594:	0741      	lsls	r1, r0, #29
 8004596:	d008      	beq.n	80045aa <pvPortMalloc+0xbe>
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	e7fe      	b.n	80045a8 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045aa:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045ac:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045ae:	f7ff ff79 	bl	80044a4 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045b2:	4913      	ldr	r1, [pc, #76]	; (8004600 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045b4:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045b6:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045b8:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045ba:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045bc:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80045be:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045c2:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045c6:	bf38      	it	cc
 80045c8:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045ca:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045cc:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045ce:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80045d0:	f000 fa50 	bl	8004a74 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045d4:	0763      	lsls	r3, r4, #29
 80045d6:	d008      	beq.n	80045ea <pvPortMalloc+0xfe>
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	e7fe      	b.n	80045e8 <pvPortMalloc+0xfc>
}
 80045ea:	4620      	mov	r0, r4
 80045ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045f0:	20000168 	.word	0x20000168
 80045f4:	20003d6c 	.word	0x20003d6c
 80045f8:	2000016c 	.word	0x2000016c
 80045fc:	20003d78 	.word	0x20003d78
 8004600:	20003d74 	.word	0x20003d74
 8004604:	20003d70 	.word	0x20003d70

08004608 <vPortFree>:
{
 8004608:	b510      	push	{r4, lr}
	if( pv != NULL )
 800460a:	4604      	mov	r4, r0
 800460c:	b370      	cbz	r0, 800466c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800460e:	4a18      	ldr	r2, [pc, #96]	; (8004670 <vPortFree+0x68>)
 8004610:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004614:	6812      	ldr	r2, [r2, #0]
 8004616:	4213      	tst	r3, r2
 8004618:	d108      	bne.n	800462c <vPortFree+0x24>
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	e7fe      	b.n	800462a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800462c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004630:	b141      	cbz	r1, 8004644 <vPortFree+0x3c>
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	e7fe      	b.n	8004642 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004644:	ea23 0302 	bic.w	r3, r3, r2
 8004648:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800464c:	f000 f978 	bl	8004940 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004650:	4a08      	ldr	r2, [pc, #32]	; (8004674 <vPortFree+0x6c>)
 8004652:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004656:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004658:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800465c:	440b      	add	r3, r1
 800465e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004660:	f7ff ff20 	bl	80044a4 <prvInsertBlockIntoFreeList>
}
 8004664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8004668:	f000 ba04 	b.w	8004a74 <xTaskResumeAll>
 800466c:	bd10      	pop	{r4, pc}
 800466e:	bf00      	nop
 8004670:	20003d6c 	.word	0x20003d6c
 8004674:	20003d70 	.word	0x20003d70

08004678 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004678:	4a06      	ldr	r2, [pc, #24]	; (8004694 <prvResetNextTaskUnblockTime+0x1c>)
 800467a:	6813      	ldr	r3, [r2, #0]
 800467c:	6819      	ldr	r1, [r3, #0]
 800467e:	4b06      	ldr	r3, [pc, #24]	; (8004698 <prvResetNextTaskUnblockTime+0x20>)
 8004680:	b919      	cbnz	r1, 800468a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004682:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800468e:	68d2      	ldr	r2, [r2, #12]
 8004690:	6852      	ldr	r2, [r2, #4]
 8004692:	e7f8      	b.n	8004686 <prvResetNextTaskUnblockTime+0xe>
 8004694:	20003d84 	.word	0x20003d84
 8004698:	20003e5c 	.word	0x20003e5c

0800469c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800469e:	4b1b      	ldr	r3, [pc, #108]	; (800470c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046a0:	4e1b      	ldr	r6, [pc, #108]	; (8004710 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80046a2:	681d      	ldr	r5, [r3, #0]
{
 80046a4:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046a6:	6830      	ldr	r0, [r6, #0]
 80046a8:	3004      	adds	r0, #4
{
 80046aa:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046ac:	f7ff fd86 	bl	80041bc <uxListRemove>
 80046b0:	4633      	mov	r3, r6
 80046b2:	b940      	cbnz	r0, 80046c6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80046b4:	6831      	ldr	r1, [r6, #0]
 80046b6:	4e17      	ldr	r6, [pc, #92]	; (8004714 <prvAddCurrentTaskToDelayedList+0x78>)
 80046b8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80046ba:	6832      	ldr	r2, [r6, #0]
 80046bc:	2001      	movs	r0, #1
 80046be:	4088      	lsls	r0, r1
 80046c0:	ea22 0200 	bic.w	r2, r2, r0
 80046c4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046c6:	1c62      	adds	r2, r4, #1
 80046c8:	d107      	bne.n	80046da <prvAddCurrentTaskToDelayedList+0x3e>
 80046ca:	b137      	cbz	r7, 80046da <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046cc:	6819      	ldr	r1, [r3, #0]
 80046ce:	4812      	ldr	r0, [pc, #72]	; (8004718 <prvAddCurrentTaskToDelayedList+0x7c>)
 80046d0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046d6:	f7ff bd4e 	b.w	8004176 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046da:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046dc:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80046de:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046e0:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80046e2:	d907      	bls.n	80046f4 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046e4:	4a0d      	ldr	r2, [pc, #52]	; (800471c <prvAddCurrentTaskToDelayedList+0x80>)
 80046e6:	6810      	ldr	r0, [r2, #0]
 80046e8:	6819      	ldr	r1, [r3, #0]
}
 80046ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046ee:	3104      	adds	r1, #4
 80046f0:	f7ff bd4d 	b.w	800418e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046f4:	4a0a      	ldr	r2, [pc, #40]	; (8004720 <prvAddCurrentTaskToDelayedList+0x84>)
 80046f6:	6810      	ldr	r0, [r2, #0]
 80046f8:	6819      	ldr	r1, [r3, #0]
 80046fa:	3104      	adds	r1, #4
 80046fc:	f7ff fd47 	bl	800418e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004700:	4b08      	ldr	r3, [pc, #32]	; (8004724 <prvAddCurrentTaskToDelayedList+0x88>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8004706:	bf38      	it	cc
 8004708:	601c      	strcc	r4, [r3, #0]
 800470a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800470c:	20003ea4 	.word	0x20003ea4
 8004710:	20003d80 	.word	0x20003d80
 8004714:	20003e2c 	.word	0x20003e2c
 8004718:	20003e7c 	.word	0x20003e7c
 800471c:	20003d88 	.word	0x20003d88
 8004720:	20003d84 	.word	0x20003d84
 8004724:	20003e5c 	.word	0x20003e5c

08004728 <xTaskCreate>:
	{
 8004728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800472c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8004730:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004732:	4650      	mov	r0, sl
	{
 8004734:	460f      	mov	r7, r1
 8004736:	4699      	mov	r9, r3
 8004738:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800473a:	f7ff fed7 	bl	80044ec <pvPortMalloc>
			if( pxStack != NULL )
 800473e:	4605      	mov	r5, r0
 8004740:	2800      	cmp	r0, #0
 8004742:	f000 8096 	beq.w	8004872 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004746:	2054      	movs	r0, #84	; 0x54
 8004748:	f7ff fed0 	bl	80044ec <pvPortMalloc>
				if( pxNewTCB != NULL )
 800474c:	4604      	mov	r4, r0
 800474e:	2800      	cmp	r0, #0
 8004750:	f000 808c 	beq.w	800486c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004754:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8004758:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800475a:	4455      	add	r5, sl
 800475c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800475e:	f025 0a07 	bic.w	sl, r5, #7
 8004762:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8004766:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004768:	7859      	ldrb	r1, [r3, #1]
 800476a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800476e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8004772:	b109      	cbz	r1, 8004778 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004774:	42bb      	cmp	r3, r7
 8004776:	d1f7      	bne.n	8004768 <xTaskCreate+0x40>
 8004778:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800477a:	2d06      	cmp	r5, #6
 800477c:	bf28      	it	cs
 800477e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004780:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004784:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8004786:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004788:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800478a:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800478c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8004790:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004794:	f7ff fcec 	bl	8004170 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004798:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800479c:	f104 0018 	add.w	r0, r4, #24
 80047a0:	f7ff fce6 	bl	8004170 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80047a4:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047a8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047aa:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047ac:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047ae:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047b2:	464a      	mov	r2, r9
 80047b4:	4641      	mov	r1, r8
 80047b6:	4650      	mov	r0, sl
 80047b8:	f7ff fd42 	bl	8004240 <pxPortInitialiseStack>
 80047bc:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80047be:	b106      	cbz	r6, 80047c2 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047c0:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80047c2:	f7ff fd67 	bl	8004294 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80047c6:	4b32      	ldr	r3, [pc, #200]	; (8004890 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80047c8:	4e32      	ldr	r6, [pc, #200]	; (8004894 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80048c0 <xTaskCreate+0x198>
 80047d0:	3201      	adds	r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80047d4:	6835      	ldr	r5, [r6, #0]
 80047d6:	2d00      	cmp	r5, #0
 80047d8:	d14e      	bne.n	8004878 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 80047da:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d11d      	bne.n	800481e <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047e2:	eb08 0005 	add.w	r0, r8, r5
 80047e6:	3514      	adds	r5, #20
 80047e8:	f7ff fcb7 	bl	800415a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047ec:	2d8c      	cmp	r5, #140	; 0x8c
 80047ee:	d1f8      	bne.n	80047e2 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 80047f0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80048c4 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 80047f4:	4d28      	ldr	r5, [pc, #160]	; (8004898 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 80047f6:	4648      	mov	r0, r9
 80047f8:	f7ff fcaf 	bl	800415a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047fc:	4628      	mov	r0, r5
 80047fe:	f7ff fcac 	bl	800415a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004802:	4826      	ldr	r0, [pc, #152]	; (800489c <xTaskCreate+0x174>)
 8004804:	f7ff fca9 	bl	800415a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004808:	4825      	ldr	r0, [pc, #148]	; (80048a0 <xTaskCreate+0x178>)
 800480a:	f7ff fca6 	bl	800415a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800480e:	4825      	ldr	r0, [pc, #148]	; (80048a4 <xTaskCreate+0x17c>)
 8004810:	f7ff fca3 	bl	800415a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004814:	4b24      	ldr	r3, [pc, #144]	; (80048a8 <xTaskCreate+0x180>)
 8004816:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800481a:	4b24      	ldr	r3, [pc, #144]	; (80048ac <xTaskCreate+0x184>)
 800481c:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800481e:	4a24      	ldr	r2, [pc, #144]	; (80048b0 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8004820:	4924      	ldr	r1, [pc, #144]	; (80048b4 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8004822:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004824:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8004826:	3301      	adds	r3, #1
 8004828:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800482a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800482c:	2501      	movs	r5, #1
 800482e:	fa05 f302 	lsl.w	r3, r5, r2
 8004832:	4303      	orrs	r3, r0
 8004834:	2014      	movs	r0, #20
 8004836:	600b      	str	r3, [r1, #0]
 8004838:	fb00 8002 	mla	r0, r0, r2, r8
 800483c:	4639      	mov	r1, r7
 800483e:	f7ff fc9a 	bl	8004176 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004842:	f7ff fd49 	bl	80042d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004846:	4b1c      	ldr	r3, [pc, #112]	; (80048b8 <xTaskCreate+0x190>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	b163      	cbz	r3, 8004866 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800484c:	6833      	ldr	r3, [r6, #0]
 800484e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004850:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004852:	429a      	cmp	r2, r3
 8004854:	d207      	bcs.n	8004866 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8004856:	4b19      	ldr	r3, [pc, #100]	; (80048bc <xTaskCreate+0x194>)
 8004858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	f3bf 8f6f 	isb	sy
	}
 8004866:	4628      	mov	r0, r5
 8004868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800486c:	4628      	mov	r0, r5
 800486e:	f7ff fecb 	bl	8004608 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004872:	f04f 35ff 	mov.w	r5, #4294967295
 8004876:	e7f6      	b.n	8004866 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8004878:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <xTaskCreate+0x190>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1ce      	bne.n	800481e <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004880:	6833      	ldr	r3, [r6, #0]
 8004882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004884:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004886:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8004888:	bf98      	it	ls
 800488a:	6034      	strls	r4, [r6, #0]
 800488c:	e7c7      	b.n	800481e <xTaskCreate+0xf6>
 800488e:	bf00      	nop
 8004890:	20003e18 	.word	0x20003e18
 8004894:	20003d80 	.word	0x20003d80
 8004898:	20003e44 	.word	0x20003e44
 800489c:	20003e64 	.word	0x20003e64
 80048a0:	20003e90 	.word	0x20003e90
 80048a4:	20003e7c 	.word	0x20003e7c
 80048a8:	20003d84 	.word	0x20003d84
 80048ac:	20003d88 	.word	0x20003d88
 80048b0:	20003e28 	.word	0x20003e28
 80048b4:	20003e2c 	.word	0x20003e2c
 80048b8:	20003e78 	.word	0x20003e78
 80048bc:	e000ed04 	.word	0xe000ed04
 80048c0:	20003d8c 	.word	0x20003d8c
 80048c4:	20003e30 	.word	0x20003e30

080048c8 <vTaskStartScheduler>:
{
 80048c8:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80048ca:	4b17      	ldr	r3, [pc, #92]	; (8004928 <vTaskStartScheduler+0x60>)
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	2400      	movs	r4, #0
 80048d0:	9400      	str	r4, [sp, #0]
 80048d2:	4623      	mov	r3, r4
 80048d4:	2280      	movs	r2, #128	; 0x80
 80048d6:	4915      	ldr	r1, [pc, #84]	; (800492c <vTaskStartScheduler+0x64>)
 80048d8:	4815      	ldr	r0, [pc, #84]	; (8004930 <vTaskStartScheduler+0x68>)
 80048da:	f7ff ff25 	bl	8004728 <xTaskCreate>
	if( xReturn == pdPASS )
 80048de:	2801      	cmp	r0, #1
 80048e0:	d114      	bne.n	800490c <vTaskStartScheduler+0x44>
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80048f2:	4b10      	ldr	r3, [pc, #64]	; (8004934 <vTaskStartScheduler+0x6c>)
 80048f4:	f04f 32ff 	mov.w	r2, #4294967295
 80048f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048fa:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <vTaskStartScheduler+0x70>)
 80048fc:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80048fe:	4b0f      	ldr	r3, [pc, #60]	; (800493c <vTaskStartScheduler+0x74>)
 8004900:	601c      	str	r4, [r3, #0]
}
 8004902:	b002      	add	sp, #8
 8004904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004908:	f7ff bd56 	b.w	80043b8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800490c:	3001      	adds	r0, #1
 800490e:	d108      	bne.n	8004922 <vTaskStartScheduler+0x5a>
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	e7fe      	b.n	8004920 <vTaskStartScheduler+0x58>
}
 8004922:	b002      	add	sp, #8
 8004924:	bd10      	pop	{r4, pc}
 8004926:	bf00      	nop
 8004928:	20003e58 	.word	0x20003e58
 800492c:	08006cf2 	.word	0x08006cf2
 8004930:	08004bad 	.word	0x08004bad
 8004934:	20003e5c 	.word	0x20003e5c
 8004938:	20003e78 	.word	0x20003e78
 800493c:	20003ea4 	.word	0x20003ea4

08004940 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004940:	4a02      	ldr	r2, [pc, #8]	; (800494c <vTaskSuspendAll+0xc>)
 8004942:	6813      	ldr	r3, [r2, #0]
 8004944:	3301      	adds	r3, #1
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	20003e24 	.word	0x20003e24

08004950 <xTaskIncrementTick>:
{
 8004950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004954:	4b3c      	ldr	r3, [pc, #240]	; (8004a48 <xTaskIncrementTick+0xf8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d153      	bne.n	8004a04 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 800495c:	4b3b      	ldr	r3, [pc, #236]	; (8004a4c <xTaskIncrementTick+0xfc>)
 800495e:	681c      	ldr	r4, [r3, #0]
 8004960:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8004962:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8004964:	b9bc      	cbnz	r4, 8004996 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004966:	4b3a      	ldr	r3, [pc, #232]	; (8004a50 <xTaskIncrementTick+0x100>)
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	b142      	cbz	r2, 8004980 <xTaskIncrementTick+0x30>
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	e7fe      	b.n	800497e <xTaskIncrementTick+0x2e>
 8004980:	4a34      	ldr	r2, [pc, #208]	; (8004a54 <xTaskIncrementTick+0x104>)
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	6810      	ldr	r0, [r2, #0]
 8004986:	6018      	str	r0, [r3, #0]
 8004988:	6011      	str	r1, [r2, #0]
 800498a:	4a33      	ldr	r2, [pc, #204]	; (8004a58 <xTaskIncrementTick+0x108>)
 800498c:	6813      	ldr	r3, [r2, #0]
 800498e:	3301      	adds	r3, #1
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	f7ff fe71 	bl	8004678 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004996:	4d31      	ldr	r5, [pc, #196]	; (8004a5c <xTaskIncrementTick+0x10c>)
 8004998:	4f31      	ldr	r7, [pc, #196]	; (8004a60 <xTaskIncrementTick+0x110>)
 800499a:	682b      	ldr	r3, [r5, #0]
 800499c:	429c      	cmp	r4, r3
 800499e:	f04f 0b00 	mov.w	fp, #0
 80049a2:	d33e      	bcc.n	8004a22 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049a4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004a50 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80049a8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8004a70 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049ac:	f8d8 2000 	ldr.w	r2, [r8]
 80049b0:	6812      	ldr	r2, [r2, #0]
 80049b2:	bb72      	cbnz	r2, 8004a12 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b4:	f04f 32ff 	mov.w	r2, #4294967295
 80049b8:	602a      	str	r2, [r5, #0]
					break;
 80049ba:	e032      	b.n	8004a22 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049bc:	f106 0a04 	add.w	sl, r6, #4
 80049c0:	4650      	mov	r0, sl
 80049c2:	f7ff fbfb 	bl	80041bc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049c6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80049c8:	b119      	cbz	r1, 80049d2 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049ca:	f106 0018 	add.w	r0, r6, #24
 80049ce:	f7ff fbf5 	bl	80041bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049d2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80049d4:	f8d9 3000 	ldr.w	r3, [r9]
 80049d8:	2201      	movs	r2, #1
 80049da:	fa02 f100 	lsl.w	r1, r2, r0
 80049de:	4319      	orrs	r1, r3
 80049e0:	4b20      	ldr	r3, [pc, #128]	; (8004a64 <xTaskIncrementTick+0x114>)
 80049e2:	f8c9 1000 	str.w	r1, [r9]
 80049e6:	f04f 0e14 	mov.w	lr, #20
 80049ea:	4651      	mov	r1, sl
 80049ec:	fb0e 3000 	mla	r0, lr, r0, r3
 80049f0:	f7ff fbc1 	bl	8004176 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049f4:	6838      	ldr	r0, [r7, #0]
 80049f6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80049f8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80049fa:	4291      	cmp	r1, r2
 80049fc:	bf28      	it	cs
 80049fe:	f04f 0b01 	movcs.w	fp, #1
 8004a02:	e7d3      	b.n	80049ac <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8004a04:	4a18      	ldr	r2, [pc, #96]	; (8004a68 <xTaskIncrementTick+0x118>)
 8004a06:	6813      	ldr	r3, [r2, #0]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004a0c:	f04f 0b00 	mov.w	fp, #0
 8004a10:	e011      	b.n	8004a36 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a12:	f8d8 2000 	ldr.w	r2, [r8]
 8004a16:	68d2      	ldr	r2, [r2, #12]
 8004a18:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a1a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004a1c:	428c      	cmp	r4, r1
 8004a1e:	d2cd      	bcs.n	80049bc <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8004a20:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	4b0f      	ldr	r3, [pc, #60]	; (8004a64 <xTaskIncrementTick+0x114>)
 8004a26:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a28:	2214      	movs	r2, #20
 8004a2a:	434a      	muls	r2, r1
 8004a2c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8004a2e:	2a02      	cmp	r2, #2
 8004a30:	bf28      	it	cs
 8004a32:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8004a36:	4a0d      	ldr	r2, [pc, #52]	; (8004a6c <xTaskIncrementTick+0x11c>)
 8004a38:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8004a3a:	2a00      	cmp	r2, #0
 8004a3c:	bf18      	it	ne
 8004a3e:	f04f 0b01 	movne.w	fp, #1
}
 8004a42:	4658      	mov	r0, fp
 8004a44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a48:	20003e24 	.word	0x20003e24
 8004a4c:	20003ea4 	.word	0x20003ea4
 8004a50:	20003d84 	.word	0x20003d84
 8004a54:	20003d88 	.word	0x20003d88
 8004a58:	20003e60 	.word	0x20003e60
 8004a5c:	20003e5c 	.word	0x20003e5c
 8004a60:	20003d80 	.word	0x20003d80
 8004a64:	20003d8c 	.word	0x20003d8c
 8004a68:	20003e20 	.word	0x20003e20
 8004a6c:	20003ea8 	.word	0x20003ea8
 8004a70:	20003e2c 	.word	0x20003e2c

08004a74 <xTaskResumeAll>:
{
 8004a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8004a78:	4c31      	ldr	r4, [pc, #196]	; (8004b40 <xTaskResumeAll+0xcc>)
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	b943      	cbnz	r3, 8004a90 <xTaskResumeAll+0x1c>
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	e7fe      	b.n	8004a8e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8004a90:	f7ff fc00 	bl	8004294 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a9a:	6824      	ldr	r4, [r4, #0]
 8004a9c:	b12c      	cbz	r4, 8004aaa <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8004a9e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004aa0:	f7ff fc1a 	bl	80042d8 <vPortExitCritical>
}
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004aaa:	4b26      	ldr	r3, [pc, #152]	; (8004b44 <xTaskResumeAll+0xd0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f5      	beq.n	8004a9e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ab2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8004b5c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8004ab6:	4f24      	ldr	r7, [pc, #144]	; (8004b48 <xTaskResumeAll+0xd4>)
 8004ab8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004b60 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004abc:	f8d9 3000 	ldr.w	r3, [r9]
 8004ac0:	b9e3      	cbnz	r3, 8004afc <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8004ac2:	b10c      	cbz	r4, 8004ac8 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8004ac4:	f7ff fdd8 	bl	8004678 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ac8:	4d20      	ldr	r5, [pc, #128]	; (8004b4c <xTaskResumeAll+0xd8>)
 8004aca:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004acc:	b144      	cbz	r4, 8004ae0 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8004ace:	4e20      	ldr	r6, [pc, #128]	; (8004b50 <xTaskResumeAll+0xdc>)
 8004ad0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004ad2:	f7ff ff3d 	bl	8004950 <xTaskIncrementTick>
 8004ad6:	b100      	cbz	r0, 8004ada <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8004ad8:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004ada:	3c01      	subs	r4, #1
 8004adc:	d1f9      	bne.n	8004ad2 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8004ade:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004ae0:	4b1b      	ldr	r3, [pc, #108]	; (8004b50 <xTaskResumeAll+0xdc>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0da      	beq.n	8004a9e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8004ae8:	4b1a      	ldr	r3, [pc, #104]	; (8004b54 <xTaskResumeAll+0xe0>)
 8004aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004af8:	2401      	movs	r4, #1
 8004afa:	e7d1      	b.n	8004aa0 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004afc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004b00:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b02:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b04:	f104 0018 	add.w	r0, r4, #24
 8004b08:	f7ff fb58 	bl	80041bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	f7ff fb55 	bl	80041bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004b14:	6839      	ldr	r1, [r7, #0]
 8004b16:	2501      	movs	r5, #1
 8004b18:	fa05 f302 	lsl.w	r3, r5, r2
 8004b1c:	2014      	movs	r0, #20
 8004b1e:	430b      	orrs	r3, r1
 8004b20:	fb00 8002 	mla	r0, r0, r2, r8
 8004b24:	4631      	mov	r1, r6
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	f7ff fb25 	bl	8004176 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <xTaskResumeAll+0xe4>)
 8004b2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8004b36:	bf24      	itt	cs
 8004b38:	4b05      	ldrcs	r3, [pc, #20]	; (8004b50 <xTaskResumeAll+0xdc>)
 8004b3a:	601d      	strcs	r5, [r3, #0]
 8004b3c:	e7be      	b.n	8004abc <xTaskResumeAll+0x48>
 8004b3e:	bf00      	nop
 8004b40:	20003e24 	.word	0x20003e24
 8004b44:	20003e18 	.word	0x20003e18
 8004b48:	20003e2c 	.word	0x20003e2c
 8004b4c:	20003e20 	.word	0x20003e20
 8004b50:	20003ea8 	.word	0x20003ea8
 8004b54:	e000ed04 	.word	0xe000ed04
 8004b58:	20003d80 	.word	0x20003d80
 8004b5c:	20003e64 	.word	0x20003e64
 8004b60:	20003d8c 	.word	0x20003d8c

08004b64 <vTaskDelay>:
	{
 8004b64:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b66:	b940      	cbnz	r0, 8004b7a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8004b68:	4b0e      	ldr	r3, [pc, #56]	; (8004ba4 <vTaskDelay+0x40>)
 8004b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004b7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <vTaskDelay+0x44>)
 8004b7c:	6819      	ldr	r1, [r3, #0]
 8004b7e:	b141      	cbz	r1, 8004b92 <vTaskDelay+0x2e>
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	e7fe      	b.n	8004b90 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004b92:	f7ff fed5 	bl	8004940 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b96:	f7ff fd81 	bl	800469c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004b9a:	f7ff ff6b 	bl	8004a74 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d0e2      	beq.n	8004b68 <vTaskDelay+0x4>
 8004ba2:	bd08      	pop	{r3, pc}
 8004ba4:	e000ed04 	.word	0xe000ed04
 8004ba8:	20003e24 	.word	0x20003e24

08004bac <prvIdleTask>:
{
 8004bac:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004bae:	4e17      	ldr	r6, [pc, #92]	; (8004c0c <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bb0:	4c17      	ldr	r4, [pc, #92]	; (8004c10 <prvIdleTask+0x64>)
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	b963      	cbnz	r3, 8004bd0 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bb6:	4b17      	ldr	r3, [pc, #92]	; (8004c14 <prvIdleTask+0x68>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d9f8      	bls.n	8004bb0 <prvIdleTask+0x4>
				taskYIELD();
 8004bbe:	4b16      	ldr	r3, [pc, #88]	; (8004c18 <prvIdleTask+0x6c>)
 8004bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	e7ef      	b.n	8004bb0 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8004bd0:	f7ff feb6 	bl	8004940 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004bd4:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8004bd6:	f7ff ff4d 	bl	8004a74 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8004bda:	2d00      	cmp	r5, #0
 8004bdc:	d0e9      	beq.n	8004bb2 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8004bde:	f7ff fb59 	bl	8004294 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004be2:	68f3      	ldr	r3, [r6, #12]
 8004be4:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004be6:	1d28      	adds	r0, r5, #4
 8004be8:	f7ff fae8 	bl	80041bc <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004bec:	4a0b      	ldr	r2, [pc, #44]	; (8004c1c <prvIdleTask+0x70>)
 8004bee:	6813      	ldr	r3, [r2, #0]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8004bfa:	f7ff fb6d 	bl	80042d8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8004bfe:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004c00:	f7ff fd02 	bl	8004608 <vPortFree>
			vPortFree( pxTCB );
 8004c04:	4628      	mov	r0, r5
 8004c06:	f7ff fcff 	bl	8004608 <vPortFree>
 8004c0a:	e7d2      	b.n	8004bb2 <prvIdleTask+0x6>
 8004c0c:	20003e90 	.word	0x20003e90
 8004c10:	20003e1c 	.word	0x20003e1c
 8004c14:	20003d8c 	.word	0x20003d8c
 8004c18:	e000ed04 	.word	0xe000ed04
 8004c1c:	20003e18 	.word	0x20003e18

08004c20 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c20:	4b17      	ldr	r3, [pc, #92]	; (8004c80 <vTaskSwitchContext+0x60>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	4b17      	ldr	r3, [pc, #92]	; (8004c84 <vTaskSwitchContext+0x64>)
{
 8004c26:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c28:	b112      	cbz	r2, 8004c30 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004c2a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8004c30:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c32:	4b15      	ldr	r3, [pc, #84]	; (8004c88 <vTaskSwitchContext+0x68>)
 8004c34:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004c36:	fab3 f383 	clz	r3, r3
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	f1c3 031f 	rsb	r3, r3, #31
 8004c40:	2214      	movs	r2, #20
 8004c42:	4912      	ldr	r1, [pc, #72]	; (8004c8c <vTaskSwitchContext+0x6c>)
 8004c44:	435a      	muls	r2, r3
 8004c46:	1888      	adds	r0, r1, r2
 8004c48:	588c      	ldr	r4, [r1, r2]
 8004c4a:	b944      	cbnz	r4, 8004c5e <vTaskSwitchContext+0x3e>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	e7fe      	b.n	8004c5c <vTaskSwitchContext+0x3c>
 8004c5e:	6844      	ldr	r4, [r0, #4]
 8004c60:	3208      	adds	r2, #8
 8004c62:	6864      	ldr	r4, [r4, #4]
 8004c64:	6044      	str	r4, [r0, #4]
 8004c66:	440a      	add	r2, r1
 8004c68:	4294      	cmp	r4, r2
 8004c6a:	bf04      	itt	eq
 8004c6c:	6862      	ldreq	r2, [r4, #4]
 8004c6e:	6042      	streq	r2, [r0, #4]
 8004c70:	2214      	movs	r2, #20
 8004c72:	fb02 1303 	mla	r3, r2, r3, r1
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <vTaskSwitchContext+0x70>)
 8004c7c:	e7d6      	b.n	8004c2c <vTaskSwitchContext+0xc>
 8004c7e:	bf00      	nop
 8004c80:	20003e24 	.word	0x20003e24
 8004c84:	20003ea8 	.word	0x20003ea8
 8004c88:	20003e2c 	.word	0x20003e2c
 8004c8c:	20003d8c 	.word	0x20003d8c
 8004c90:	20003d80 	.word	0x20003d80

08004c94 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8004c94:	b508      	push	{r3, lr}

  hcan1.Instance = CAN1;
 8004c96:	480c      	ldr	r0, [pc, #48]	; (8004cc8 <MX_CAN1_Init+0x34>)
  hcan1.Init.Prescaler = 16;
 8004c98:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <MX_CAN1_Init+0x38>)
 8004c9a:	f04f 0e10 	mov.w	lr, #16
 8004c9e:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004ca6:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8004ca8:	6103      	str	r3, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8004caa:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004cac:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8004cae:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8004cb0:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8004cb2:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004cb4:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004cb6:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004cb8:	f7fc fc88 	bl	80015cc <HAL_CAN_Init>
 8004cbc:	b118      	cbz	r0, 8004cc6 <MX_CAN1_Init+0x32>
  {
    Error_Handler();
  }

}
 8004cbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004cc2:	f000 bbbd 	b.w	8005440 <Error_Handler>
 8004cc6:	bd08      	pop	{r3, pc}
 8004cc8:	200040a8 	.word	0x200040a8
 8004ccc:	40006400 	.word	0x40006400

08004cd0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8004cd0:	b510      	push	{r4, lr}
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd6:	2214      	movs	r2, #20
 8004cd8:	2100      	movs	r1, #0
 8004cda:	a803      	add	r0, sp, #12
 8004cdc:	f001 fe8f 	bl	80069fe <memset>
  if(canHandle->Instance==CAN1)
 8004ce0:	6822      	ldr	r2, [r4, #0]
 8004ce2:	4b13      	ldr	r3, [pc, #76]	; (8004d30 <HAL_CAN_MspInit+0x60>)
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d121      	bne.n	8004d2c <HAL_CAN_MspInit+0x5c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004ce8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004cec:	2100      	movs	r1, #0
 8004cee:	9101      	str	r1, [sp, #4]
 8004cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cf2:	4810      	ldr	r0, [pc, #64]	; (8004d34 <HAL_CAN_MspInit+0x64>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004cf4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40
 8004cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cfc:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8004d00:	9201      	str	r2, [sp, #4]
 8004d02:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d04:	9102      	str	r1, [sp, #8]
 8004d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d08:	f042 0208 	orr.w	r2, r2, #8
 8004d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	f003 0308 	and.w	r3, r3, #8
 8004d14:	9302      	str	r3, [sp, #8]
 8004d16:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d1c:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d1e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d20:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004d22:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d24:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004d26:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d28:	f7fc fd9e 	bl	8001868 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8004d2c:	b008      	add	sp, #32
 8004d2e:	bd10      	pop	{r4, pc}
 8004d30:	40006400 	.word	0x40006400
 8004d34:	40020c00 	.word	0x40020c00

08004d38 <MX_DMA2D_Init>:

/* DMA2D init function */
void MX_DMA2D_Init(void)
{

  hdma2d.Instance = DMA2D;
 8004d38:	480d      	ldr	r0, [pc, #52]	; (8004d70 <MX_DMA2D_Init+0x38>)
{
 8004d3a:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 8004d3c:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <MX_DMA2D_Init+0x3c>)
 8004d3e:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8004d40:	2300      	movs	r3, #0
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
  hdma2d.Init.OutputOffset = 0;
  hdma2d.LayerCfg[1].InputOffset = 0;
 8004d42:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8004d44:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004d46:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8004d48:	6343      	str	r3, [r0, #52]	; 0x34
  hdma2d.Init.Mode = DMA2D_M2M;
 8004d4a:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8004d4c:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8004d4e:	60c3      	str	r3, [r0, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8004d50:	f7fc fd0a 	bl	8001768 <HAL_DMA2D_Init>
 8004d54:	b108      	cbz	r0, 8004d5a <MX_DMA2D_Init+0x22>
  {
    Error_Handler();
 8004d56:	f000 fb73 	bl	8005440 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	4804      	ldr	r0, [pc, #16]	; (8004d70 <MX_DMA2D_Init+0x38>)
 8004d5e:	f7fc fd2f 	bl	80017c0 <HAL_DMA2D_ConfigLayer>
 8004d62:	b118      	cbz	r0, 8004d6c <MX_DMA2D_Init+0x34>
  {
    Error_Handler();
  }

}
 8004d64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004d68:	f000 bb6a 	b.w	8005440 <Error_Handler>
 8004d6c:	bd08      	pop	{r3, pc}
 8004d6e:	bf00      	nop
 8004d70:	200040d0 	.word	0x200040d0
 8004d74:	4002b000 	.word	0x4002b000

08004d78 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
 8004d78:	6802      	ldr	r2, [r0, #0]
 8004d7a:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <HAL_DMA2D_MspInit+0x28>)
 8004d7c:	429a      	cmp	r2, r3
{
 8004d7e:	b082      	sub	sp, #8
  if(dma2dHandle->Instance==DMA2D)
 8004d80:	d10b      	bne.n	8004d9a <HAL_DMA2D_MspInit+0x22>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004d82:	2300      	movs	r3, #0
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	4b07      	ldr	r3, [pc, #28]	; (8004da4 <HAL_DMA2D_MspInit+0x2c>)
 8004d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d8a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8004d9a:	b002      	add	sp, #8
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	4002b000 	.word	0x4002b000
 8004da4:	40023800 	.word	0x40023800

08004da8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004da8:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8004daa:	f000 fd8d 	bl	80058c8 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004dae:	2001      	movs	r0, #1
 8004db0:	f7ff f9cb 	bl	800414a <osDelay>
 8004db4:	e7fb      	b.n	8004dae <StartDefaultTask+0x6>
	...

08004db8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8004db8:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004dba:	4d07      	ldr	r5, [pc, #28]	; (8004dd8 <MX_FREERTOS_Init+0x20>)
 8004dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 8004dbe:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004dc0:	ac01      	add	r4, sp, #4
 8004dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004dc8:	2100      	movs	r1, #0
 8004dca:	a801      	add	r0, sp, #4
 8004dcc:	f7ff f9a5 	bl	800411a <osThreadCreate>
 8004dd0:	4b02      	ldr	r3, [pc, #8]	; (8004ddc <MX_FREERTOS_Init+0x24>)
 8004dd2:	6018      	str	r0, [r3, #0]
}
 8004dd4:	b007      	add	sp, #28
 8004dd6:	bd30      	pop	{r4, r5, pc}
 8004dd8:	08006c6c 	.word	0x08006c6c
 8004ddc:	20004110 	.word	0x20004110

08004de0 <MX_GPIO_Init>:
        * EXTI
     PC9   ------> I2C3_SDA
     PA8   ------> I2C3_SCL
*/
void MX_GPIO_Init(void)
{
 8004de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de2:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004de4:	2214      	movs	r2, #20
 8004de6:	2100      	movs	r1, #0
 8004de8:	a809      	add	r0, sp, #36	; 0x24
 8004dea:	f001 fe08 	bl	80069fe <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dee:	4b37      	ldr	r3, [pc, #220]	; (8004ecc <MX_GPIO_Init+0xec>)
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004df0:	4837      	ldr	r0, [pc, #220]	; (8004ed0 <MX_GPIO_Init+0xf0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004df2:	2200      	movs	r2, #0
 8004df4:	9201      	str	r2, [sp, #4]
 8004df6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004df8:	f041 0104 	orr.w	r1, r1, #4
 8004dfc:	6319      	str	r1, [r3, #48]	; 0x30
 8004dfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e00:	f001 0104 	and.w	r1, r1, #4
 8004e04:	9101      	str	r1, [sp, #4]
 8004e06:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e08:	9202      	str	r2, [sp, #8]
 8004e0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e0c:	f041 0120 	orr.w	r1, r1, #32
 8004e10:	6319      	str	r1, [r3, #48]	; 0x30
 8004e12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e14:	f001 0120 	and.w	r1, r1, #32
 8004e18:	9102      	str	r1, [sp, #8]
 8004e1a:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e1c:	9203      	str	r2, [sp, #12]
 8004e1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e20:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004e24:	6319      	str	r1, [r3, #48]	; 0x30
 8004e26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e28:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004e2c:	9103      	str	r1, [sp, #12]
 8004e2e:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e30:	9204      	str	r2, [sp, #16]
 8004e32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e34:	f041 0101 	orr.w	r1, r1, #1
 8004e38:	6319      	str	r1, [r3, #48]	; 0x30
 8004e3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e3c:	f001 0101 	and.w	r1, r1, #1
 8004e40:	9104      	str	r1, [sp, #16]
 8004e42:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e44:	9205      	str	r2, [sp, #20]
 8004e46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e48:	f041 0102 	orr.w	r1, r1, #2
 8004e4c:	6319      	str	r1, [r3, #48]	; 0x30
 8004e4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e50:	f001 0102 	and.w	r1, r1, #2
 8004e54:	9105      	str	r1, [sp, #20]
 8004e56:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e58:	9206      	str	r2, [sp, #24]
 8004e5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e5c:	f041 0110 	orr.w	r1, r1, #16
 8004e60:	6319      	str	r1, [r3, #48]	; 0x30
 8004e62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e64:	f001 0110 	and.w	r1, r1, #16
 8004e68:	9106      	str	r1, [sp, #24]
 8004e6a:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e6c:	9207      	str	r2, [sp, #28]
 8004e6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e70:	f041 0108 	orr.w	r1, r1, #8
 8004e74:	6319      	str	r1, [r3, #48]	; 0x30
 8004e76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e78:	f001 0108 	and.w	r1, r1, #8
 8004e7c:	9107      	str	r1, [sp, #28]
 8004e7e:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004e80:	9208      	str	r2, [sp, #32]
 8004e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e90:	9308      	str	r3, [sp, #32]
 8004e92:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e94:	2712      	movs	r7, #18
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004e96:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e9a:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e9c:	2503      	movs	r5, #3
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004e9e:	2404      	movs	r4, #4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ea0:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ea2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ea4:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ea6:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ea8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004eaa:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004eac:	f7fc fcdc 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eb4:	a909      	add	r1, sp, #36	; 0x24
 8004eb6:	4807      	ldr	r0, [pc, #28]	; (8004ed4 <MX_GPIO_Init+0xf4>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004eb8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004eba:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ebc:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ebe:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004ec0:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ec2:	f7fc fcd1 	bl	8001868 <HAL_GPIO_Init>

}
 8004ec6:	b00f      	add	sp, #60	; 0x3c
 8004ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	40020800 	.word	0x40020800
 8004ed4:	40020000 	.word	0x40020000

08004ed8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004ed8:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8004eda:	4813      	ldr	r0, [pc, #76]	; (8004f28 <MX_I2C1_Init+0x50>)
  hi2c1.Init.ClockSpeed = 400000;
 8004edc:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <MX_I2C1_Init+0x54>)
 8004ede:	f8df e050 	ldr.w	lr, [pc, #80]	; 8004f30 <MX_I2C1_Init+0x58>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004ee2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 8004ee6:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004eea:	2300      	movs	r3, #0
 8004eec:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004eee:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004ef0:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ef2:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004ef4:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004ef6:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ef8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004efa:	f7fc fda1 	bl	8001a40 <HAL_I2C_Init>
 8004efe:	b108      	cbz	r0, 8004f04 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8004f00:	f000 fa9e 	bl	8005440 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004f04:	2100      	movs	r1, #0
 8004f06:	4808      	ldr	r0, [pc, #32]	; (8004f28 <MX_I2C1_Init+0x50>)
 8004f08:	f7fc fe08 	bl	8001b1c <HAL_I2CEx_ConfigAnalogFilter>
 8004f0c:	b108      	cbz	r0, 8004f12 <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
 8004f0e:	f000 fa97 	bl	8005440 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004f12:	2100      	movs	r1, #0
 8004f14:	4804      	ldr	r0, [pc, #16]	; (8004f28 <MX_I2C1_Init+0x50>)
 8004f16:	f7fc fe20 	bl	8001b5a <HAL_I2CEx_ConfigDigitalFilter>
 8004f1a:	b118      	cbz	r0, 8004f24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
  }

}
 8004f1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004f20:	f000 ba8e 	b.w	8005440 <Error_Handler>
 8004f24:	bd08      	pop	{r3, pc}
 8004f26:	bf00      	nop
 8004f28:	20004168 	.word	0x20004168
 8004f2c:	40005400 	.word	0x40005400
 8004f30:	00061a80 	.word	0x00061a80

08004f34 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004f34:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8004f36:	4813      	ldr	r0, [pc, #76]	; (8004f84 <MX_I2C2_Init+0x50>)
  hi2c2.Init.ClockSpeed = 100000;
 8004f38:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <MX_I2C2_Init+0x54>)
 8004f3a:	f8df e050 	ldr.w	lr, [pc, #80]	; 8004f8c <MX_I2C2_Init+0x58>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 100000;
 8004f42:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004f46:	2300      	movs	r3, #0
 8004f48:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004f4a:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f4c:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004f4e:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004f50:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004f52:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f54:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004f56:	f7fc fd73 	bl	8001a40 <HAL_I2C_Init>
 8004f5a:	b108      	cbz	r0, 8004f60 <MX_I2C2_Init+0x2c>
  {
    Error_Handler();
 8004f5c:	f000 fa70 	bl	8005440 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004f60:	2100      	movs	r1, #0
 8004f62:	4808      	ldr	r0, [pc, #32]	; (8004f84 <MX_I2C2_Init+0x50>)
 8004f64:	f7fc fdda 	bl	8001b1c <HAL_I2CEx_ConfigAnalogFilter>
 8004f68:	b108      	cbz	r0, 8004f6e <MX_I2C2_Init+0x3a>
  {
    Error_Handler();
 8004f6a:	f000 fa69 	bl	8005440 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004f6e:	2100      	movs	r1, #0
 8004f70:	4804      	ldr	r0, [pc, #16]	; (8004f84 <MX_I2C2_Init+0x50>)
 8004f72:	f7fc fdf2 	bl	8001b5a <HAL_I2CEx_ConfigDigitalFilter>
 8004f76:	b118      	cbz	r0, 8004f80 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
  }

}
 8004f78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004f7c:	f000 ba60 	b.w	8005440 <Error_Handler>
 8004f80:	bd08      	pop	{r3, pc}
 8004f82:	bf00      	nop
 8004f84:	20004114 	.word	0x20004114
 8004f88:	40005800 	.word	0x40005800
 8004f8c:	000186a0 	.word	0x000186a0

08004f90 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8004f90:	4770      	bx	lr
	...

08004f94 <HAL_I2C_MspInit>:

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004f94:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f96:	2214      	movs	r2, #20
{
 8004f98:	b08b      	sub	sp, #44	; 0x2c
 8004f9a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	eb0d 0002 	add.w	r0, sp, r2
 8004fa2:	f001 fd2c 	bl	80069fe <memset>
  if(i2cHandle->Instance==I2C1)
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	4a27      	ldr	r2, [pc, #156]	; (8005048 <HAL_I2C_MspInit+0xb4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d125      	bne.n	8004ffa <HAL_I2C_MspInit+0x66>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fae:	4c27      	ldr	r4, [pc, #156]	; (800504c <HAL_I2C_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fb0:	4827      	ldr	r0, [pc, #156]	; (8005050 <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fb2:	2500      	movs	r5, #0
 8004fb4:	9501      	str	r5, [sp, #4]
 8004fb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fb8:	f043 0302 	orr.w	r3, r3, #2
 8004fbc:	6323      	str	r3, [r4, #48]	; 0x30
 8004fbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	9301      	str	r3, [sp, #4]
 8004fc6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004fc8:	23c0      	movs	r3, #192	; 0xc0
 8004fca:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fcc:	2312      	movs	r3, #18
 8004fce:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fd8:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004fda:	2304      	movs	r3, #4
 8004fdc:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fde:	f7fc fc43 	bl	8001868 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004fe2:	9502      	str	r5, [sp, #8]
 8004fe4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fe6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fea:	6423      	str	r3, [r4, #64]	; 0x40
 8004fec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ff2:	9302      	str	r3, [sp, #8]
 8004ff4:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004ff6:	b00b      	add	sp, #44	; 0x2c
 8004ff8:	bd30      	pop	{r4, r5, pc}
  else if(i2cHandle->Instance==I2C2)
 8004ffa:	4a16      	ldr	r2, [pc, #88]	; (8005054 <HAL_I2C_MspInit+0xc0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d1fa      	bne.n	8004ff6 <HAL_I2C_MspInit+0x62>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005000:	4c12      	ldr	r4, [pc, #72]	; (800504c <HAL_I2C_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005002:	4815      	ldr	r0, [pc, #84]	; (8005058 <HAL_I2C_MspInit+0xc4>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005004:	2500      	movs	r5, #0
 8005006:	9503      	str	r5, [sp, #12]
 8005008:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800500a:	f043 0320 	orr.w	r3, r3, #32
 800500e:	6323      	str	r3, [r4, #48]	; 0x30
 8005010:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005012:	f003 0320 	and.w	r3, r3, #32
 8005016:	9303      	str	r3, [sp, #12]
 8005018:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800501a:	2212      	movs	r2, #18
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800501c:	2303      	movs	r3, #3
 800501e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005020:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005022:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005024:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005026:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005028:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800502a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800502c:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800502e:	f7fc fc1b 	bl	8001868 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005032:	9504      	str	r5, [sp, #16]
 8005034:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005036:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800503a:	6423      	str	r3, [r4, #64]	; 0x40
 800503c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800503e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005042:	9304      	str	r3, [sp, #16]
 8005044:	9b04      	ldr	r3, [sp, #16]
}
 8005046:	e7d6      	b.n	8004ff6 <HAL_I2C_MspInit+0x62>
 8005048:	40005400 	.word	0x40005400
 800504c:	40023800 	.word	0x40023800
 8005050:	40020400 	.word	0x40020400
 8005054:	40005800 	.word	0x40005800
 8005058:	40021400 	.word	0x40021400

0800505c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800505c:	b510      	push	{r4, lr}
 800505e:	b09a      	sub	sp, #104	; 0x68
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8005060:	2234      	movs	r2, #52	; 0x34
 8005062:	2100      	movs	r1, #0
 8005064:	4668      	mov	r0, sp
 8005066:	f001 fcca 	bl	80069fe <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800506a:	2234      	movs	r2, #52	; 0x34
 800506c:	2100      	movs	r1, #0
 800506e:	eb0d 0002 	add.w	r0, sp, r2
 8005072:	f001 fcc4 	bl	80069fe <memset>

  hltdc.Instance = LTDC;
 8005076:	4832      	ldr	r0, [pc, #200]	; (8005140 <MX_LTDC_Init+0xe4>)
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005078:	4b32      	ldr	r3, [pc, #200]	; (8005144 <MX_LTDC_Init+0xe8>)
 800507a:	2400      	movs	r4, #0
 800507c:	e880 0018 	stmia.w	r0, {r3, r4}
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hltdc.Init.HorizontalSync = 7;
 8005080:	2307      	movs	r3, #7
 8005082:	6143      	str	r3, [r0, #20]
  hltdc.Init.VerticalSync = 3;
 8005084:	2303      	movs	r3, #3
 8005086:	6183      	str	r3, [r0, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8005088:	230e      	movs	r3, #14
 800508a:	61c3      	str	r3, [r0, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800508c:	2305      	movs	r3, #5
 800508e:	6203      	str	r3, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8005090:	f240 238e 	movw	r3, #654	; 0x28e
 8005094:	6243      	str	r3, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8005096:	f240 13e5 	movw	r3, #485	; 0x1e5
 800509a:	6283      	str	r3, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800509c:	f44f 7325 	mov.w	r3, #660	; 0x294
 80050a0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80050a2:	f240 13e7 	movw	r3, #487	; 0x1e7
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80050a6:	6084      	str	r4, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80050a8:	60c4      	str	r4, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80050aa:	6104      	str	r4, [r0, #16]
  hltdc.Init.TotalHeigh = 487;
 80050ac:	6303      	str	r3, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80050ae:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80050b2:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80050b6:	f880 4036 	strb.w	r4, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80050ba:	f7fc fdf3 	bl	8001ca4 <HAL_LTDC_Init>
 80050be:	b108      	cbz	r0, 80050c4 <MX_LTDC_Init+0x68>
  {
    Error_Handler();
 80050c0:	f000 f9be 	bl	8005440 <Error_Handler>
  pLayerCfg.WindowY0 = 0;
  pLayerCfg.WindowY1 = 0;
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  pLayerCfg.Alpha = 0;
  pLayerCfg.Alpha0 = 0;
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80050c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050c8:	9307      	str	r3, [sp, #28]
  pLayerCfg.ImageWidth = 0;
  pLayerCfg.ImageHeight = 0;
  pLayerCfg.Backcolor.Blue = 0;
  pLayerCfg.Backcolor.Green = 0;
  pLayerCfg.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80050ca:	2200      	movs	r2, #0
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80050cc:	2305      	movs	r3, #5
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80050ce:	4669      	mov	r1, sp
 80050d0:	481b      	ldr	r0, [pc, #108]	; (8005140 <MX_LTDC_Init+0xe4>)
  pLayerCfg.WindowX0 = 0;
 80050d2:	9400      	str	r4, [sp, #0]
  pLayerCfg.WindowX1 = 0;
 80050d4:	9401      	str	r4, [sp, #4]
  pLayerCfg.WindowY0 = 0;
 80050d6:	9402      	str	r4, [sp, #8]
  pLayerCfg.WindowY1 = 0;
 80050d8:	9403      	str	r4, [sp, #12]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80050da:	9404      	str	r4, [sp, #16]
  pLayerCfg.Alpha = 0;
 80050dc:	9405      	str	r4, [sp, #20]
  pLayerCfg.Alpha0 = 0;
 80050de:	9406      	str	r4, [sp, #24]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80050e0:	9308      	str	r3, [sp, #32]
  pLayerCfg.FBStartAdress = 0;
 80050e2:	9409      	str	r4, [sp, #36]	; 0x24
  pLayerCfg.ImageWidth = 0;
 80050e4:	940a      	str	r4, [sp, #40]	; 0x28
  pLayerCfg.ImageHeight = 0;
 80050e6:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.Backcolor.Blue = 0;
 80050e8:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Green = 0;
 80050ec:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  pLayerCfg.Backcolor.Red = 0;
 80050f0:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80050f4:	f7fc fe42 	bl	8001d7c <HAL_LTDC_ConfigLayer>
 80050f8:	b108      	cbz	r0, 80050fe <MX_LTDC_Init+0xa2>
  {
    Error_Handler();
 80050fa:	f000 f9a1 	bl	8005440 <Error_Handler>
  pLayerCfg1.WindowY0 = 0;
  pLayerCfg1.WindowY1 = 0;
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  pLayerCfg1.Alpha = 0;
  pLayerCfg1.Alpha0 = 0;
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80050fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005102:	9214      	str	r2, [sp, #80]	; 0x50
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8005104:	2205      	movs	r2, #5
  pLayerCfg1.WindowX0 = 0;
 8005106:	2300      	movs	r3, #0
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8005108:	9215      	str	r2, [sp, #84]	; 0x54
  pLayerCfg1.ImageWidth = 0;
  pLayerCfg1.ImageHeight = 0;
  pLayerCfg1.Backcolor.Blue = 0;
  pLayerCfg1.Backcolor.Green = 0;
  pLayerCfg1.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800510a:	a90d      	add	r1, sp, #52	; 0x34
 800510c:	2201      	movs	r2, #1
 800510e:	480c      	ldr	r0, [pc, #48]	; (8005140 <MX_LTDC_Init+0xe4>)
  pLayerCfg1.WindowX0 = 0;
 8005110:	930d      	str	r3, [sp, #52]	; 0x34
  pLayerCfg1.WindowX1 = 0;
 8005112:	930e      	str	r3, [sp, #56]	; 0x38
  pLayerCfg1.WindowY0 = 0;
 8005114:	930f      	str	r3, [sp, #60]	; 0x3c
  pLayerCfg1.WindowY1 = 0;
 8005116:	9310      	str	r3, [sp, #64]	; 0x40
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005118:	9311      	str	r3, [sp, #68]	; 0x44
  pLayerCfg1.Alpha = 0;
 800511a:	9312      	str	r3, [sp, #72]	; 0x48
  pLayerCfg1.Alpha0 = 0;
 800511c:	9313      	str	r3, [sp, #76]	; 0x4c
  pLayerCfg1.FBStartAdress = 0;
 800511e:	9316      	str	r3, [sp, #88]	; 0x58
  pLayerCfg1.ImageWidth = 0;
 8005120:	9317      	str	r3, [sp, #92]	; 0x5c
  pLayerCfg1.ImageHeight = 0;
 8005122:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg1.Backcolor.Blue = 0;
 8005124:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
  pLayerCfg1.Backcolor.Green = 0;
 8005128:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
  pLayerCfg1.Backcolor.Red = 0;
 800512c:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8005130:	f7fc fe24 	bl	8001d7c <HAL_LTDC_ConfigLayer>
 8005134:	b108      	cbz	r0, 800513a <MX_LTDC_Init+0xde>
  {
    Error_Handler();
 8005136:	f000 f983 	bl	8005440 <Error_Handler>
  }

}
 800513a:	b01a      	add	sp, #104	; 0x68
 800513c:	bd10      	pop	{r4, pc}
 800513e:	bf00      	nop
 8005140:	200041bc 	.word	0x200041bc
 8005144:	40016800 	.word	0x40016800

08005148 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8005148:	b570      	push	{r4, r5, r6, lr}
 800514a:	4604      	mov	r4, r0
 800514c:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800514e:	2214      	movs	r2, #20
 8005150:	2100      	movs	r1, #0
 8005152:	a807      	add	r0, sp, #28
 8005154:	f001 fc53 	bl	80069fe <memset>
  if(ltdcHandle->Instance==LTDC)
 8005158:	6822      	ldr	r2, [r4, #0]
 800515a:	4b4e      	ldr	r3, [pc, #312]	; (8005294 <HAL_LTDC_MspInit+0x14c>)
 800515c:	429a      	cmp	r2, r3
 800515e:	f040 8096 	bne.w	800528e <HAL_LTDC_MspInit+0x146>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005162:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8005166:	2400      	movs	r4, #0
 8005168:	9400      	str	r4, [sp, #0]
 800516a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800516c:	484a      	ldr	r0, [pc, #296]	; (8005298 <HAL_LTDC_MspInit+0x150>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 800516e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005172:	645a      	str	r2, [r3, #68]	; 0x44
 8005174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005176:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800517a:	9200      	str	r2, [sp, #0]
 800517c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800517e:	9401      	str	r4, [sp, #4]
 8005180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005182:	f042 0220 	orr.w	r2, r2, #32
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
 8005188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800518a:	f002 0220 	and.w	r2, r2, #32
 800518e:	9201      	str	r2, [sp, #4]
 8005190:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005192:	9402      	str	r4, [sp, #8]
 8005194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	631a      	str	r2, [r3, #48]	; 0x30
 800519c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800519e:	f002 0201 	and.w	r2, r2, #1
 80051a2:	9202      	str	r2, [sp, #8]
 80051a4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051a6:	9403      	str	r4, [sp, #12]
 80051a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051aa:	f042 0202 	orr.w	r2, r2, #2
 80051ae:	631a      	str	r2, [r3, #48]	; 0x30
 80051b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b2:	f002 0202 	and.w	r2, r2, #2
 80051b6:	9203      	str	r2, [sp, #12]
 80051b8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80051ba:	9404      	str	r4, [sp, #16]
 80051bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051be:	f042 0210 	orr.w	r2, r2, #16
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
 80051c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c6:	f002 0210 	and.w	r2, r2, #16
 80051ca:	9204      	str	r2, [sp, #16]
 80051cc:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80051ce:	9405      	str	r4, [sp, #20]
 80051d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d2:	f042 0208 	orr.w	r2, r2, #8
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30
 80051d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051da:	f002 0208 	and.w	r2, r2, #8
 80051de:	9205      	str	r2, [sp, #20]
 80051e0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051e2:	9406      	str	r4, [sp, #24]
 80051e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051e6:	f042 0204 	orr.w	r2, r2, #4
 80051ea:	631a      	str	r2, [r3, #48]	; 0x30
 80051ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f4:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80051f6:	260e      	movs	r6, #14
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051f8:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fa:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80051fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005200:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005202:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005204:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005206:	f7fc fb2f 	bl	8001868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 800520a:	f641 0358 	movw	r3, #6232	; 0x1858
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800520e:	a907      	add	r1, sp, #28
 8005210:	4822      	ldr	r0, [pc, #136]	; (800529c <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8005212:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005214:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005216:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005218:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800521a:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800521c:	f7fc fb24 	bl	8001868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005220:	2303      	movs	r3, #3
 8005222:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005224:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005226:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005228:	481d      	ldr	r0, [pc, #116]	; (80052a0 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800522a:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800522c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800522e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005230:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005232:	f7fc fb19 	bl	8001868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8005236:	f44f 4358 	mov.w	r3, #55296	; 0xd800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800523a:	a907      	add	r1, sp, #28
 800523c:	4819      	ldr	r0, [pc, #100]	; (80052a4 <HAL_LTDC_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800523e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005240:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005242:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005244:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005246:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005248:	f7fc fb0e 	bl	8001868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 800524c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005250:	a907      	add	r1, sp, #28
 8005252:	4813      	ldr	r0, [pc, #76]	; (80052a0 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8005254:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005256:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005258:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800525a:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800525c:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800525e:	f7fc fb03 	bl	8001868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_6;
 8005262:	f44f 6389 	mov.w	r3, #1096	; 0x448
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005266:	a907      	add	r1, sp, #28
 8005268:	480f      	ldr	r0, [pc, #60]	; (80052a8 <HAL_LTDC_MspInit+0x160>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_6;
 800526a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800526c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005270:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005272:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005274:	f7fc faf8 	bl	8001868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8005278:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800527c:	a907      	add	r1, sp, #28
 800527e:	480b      	ldr	r0, [pc, #44]	; (80052ac <HAL_LTDC_MspInit+0x164>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8005280:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005282:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005284:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005286:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005288:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800528a:	f7fc faed 	bl	8001868 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800528e:	b00c      	add	sp, #48	; 0x30
 8005290:	bd70      	pop	{r4, r5, r6, pc}
 8005292:	bf00      	nop
 8005294:	40016800 	.word	0x40016800
 8005298:	40021400 	.word	0x40021400
 800529c:	40020000 	.word	0x40020000
 80052a0:	40020400 	.word	0x40020400
 80052a4:	40021000 	.word	0x40021000
 80052a8:	40020c00 	.word	0x40020c00
 80052ac:	40020800 	.word	0x40020800

080052b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80052b4:	f7fc f94a 	bl	800154c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80052b8:	f000 f81c 	bl	80052f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80052bc:	f7ff fd90 	bl	8004de0 <MX_GPIO_Init>
  MX_LTDC_Init();
 80052c0:	f7ff fecc 	bl	800505c <MX_LTDC_Init>
  MX_DMA2D_Init();
 80052c4:	f7ff fd38 	bl	8004d38 <MX_DMA2D_Init>
  MX_I2C1_Init();
 80052c8:	f7ff fe06 	bl	8004ed8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80052cc:	f7ff fe32 	bl	8004f34 <MX_I2C2_Init>
  MX_SPI6_Init();
 80052d0:	f000 f978 	bl	80055c4 <MX_SPI6_Init>
  MX_SPI5_Init();
 80052d4:	f000 f954 	bl	8005580 <MX_SPI5_Init>
  MX_I2C3_Init();
 80052d8:	f7ff fe5a 	bl	8004f90 <MX_I2C3_Init>
  MX_CAN1_Init();
 80052dc:	f7ff fcda 	bl	8004c94 <MX_CAN1_Init>
  MX_TIM7_Init();
 80052e0:	f000 faaa 	bl	8005838 <MX_TIM7_Init>
  MX_TIM6_Init();
 80052e4:	f000 fa8a 	bl	80057fc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80052e8:	f7ff fd66 	bl	8004db8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80052ec:	f7fe ff10 	bl	8004110 <osKernelStart>

  /* Infinite loop */


  /* USER CODE BEGIN WHILE */
  while (1)
 80052f0:	e7fe      	b.n	80052f0 <main+0x40>
	...

080052f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b0a0      	sub	sp, #128	; 0x80
 80052f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80052fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80052fe:	2230      	movs	r2, #48	; 0x30
 8005300:	2100      	movs	r1, #0
 8005302:	4618      	mov	r0, r3
 8005304:	f001 fb7b 	bl	80069fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005308:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	605a      	str	r2, [r3, #4]
 8005312:	609a      	str	r2, [r3, #8]
 8005314:	60da      	str	r2, [r3, #12]
 8005316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005318:	f107 030c 	add.w	r3, r7, #12
 800531c:	2230      	movs	r2, #48	; 0x30
 800531e:	2100      	movs	r1, #0
 8005320:	4618      	mov	r0, r3
 8005322:	f001 fb6c 	bl	80069fe <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005326:	2300      	movs	r3, #0
 8005328:	60bb      	str	r3, [r7, #8]
 800532a:	4a3a      	ldr	r2, [pc, #232]	; (8005414 <SystemClock_Config+0x120>)
 800532c:	4b39      	ldr	r3, [pc, #228]	; (8005414 <SystemClock_Config+0x120>)
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005334:	6413      	str	r3, [r2, #64]	; 0x40
 8005336:	4b37      	ldr	r3, [pc, #220]	; (8005414 <SystemClock_Config+0x120>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533e:	60bb      	str	r3, [r7, #8]
 8005340:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005342:	2300      	movs	r3, #0
 8005344:	607b      	str	r3, [r7, #4]
 8005346:	4a34      	ldr	r2, [pc, #208]	; (8005418 <SystemClock_Config+0x124>)
 8005348:	4b33      	ldr	r3, [pc, #204]	; (8005418 <SystemClock_Config+0x124>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	4b30      	ldr	r3, [pc, #192]	; (8005418 <SystemClock_Config+0x124>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800535e:	607b      	str	r3, [r7, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005362:	2301      	movs	r3, #1
 8005364:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800536a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800536c:	2302      	movs	r3, #2
 800536e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005370:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005374:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8005376:	2319      	movs	r3, #25
 8005378:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 192;
 800537a:	23c0      	movs	r3, #192	; 0xc0
 800537c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800537e:	2302      	movs	r3, #2
 8005380:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005382:	2304      	movs	r3, #4
 8005384:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005386:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800538a:	4618      	mov	r0, r3
 800538c:	f7fd f96a 	bl	8002664 <HAL_RCC_OscConfig>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	bf14      	ite	ne
 8005396:	2301      	movne	r3, #1
 8005398:	2300      	moveq	r3, #0
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80053a0:	f000 f84e 	bl	8005440 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053a4:	230f      	movs	r3, #15
 80053a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80053a8:	2302      	movs	r3, #2
 80053aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80053ac:	2300      	movs	r3, #0
 80053ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80053b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80053b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80053b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053ba:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80053bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80053c0:	2103      	movs	r1, #3
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fd fafe 	bl	80029c4 <HAL_RCC_ClockConfig>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	bf14      	ite	ne
 80053ce:	2301      	movne	r3, #1
 80053d0:	2300      	moveq	r3, #0
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80053d8:	f000 f832 	bl	8005440 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80053dc:	2308      	movs	r3, #8
 80053de:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 80053e0:	2364      	movs	r3, #100	; 0x64
 80053e2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80053e4:	2302      	movs	r3, #2
 80053e6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80053e8:	2300      	movs	r3, #0
 80053ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053ec:	f107 030c 	add.w	r3, r7, #12
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7fd fbc5 	bl	8002b80 <HAL_RCCEx_PeriphCLKConfig>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bf14      	ite	ne
 80053fc:	2301      	movne	r3, #1
 80053fe:	2300      	moveq	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8005406:	f000 f81b 	bl	8005440 <Error_Handler>
  }
}
 800540a:	bf00      	nop
 800540c:	3780      	adds	r7, #128	; 0x80
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40023800 	.word	0x40023800
 8005418:	40007000 	.word	0x40007000

0800541c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a04      	ldr	r2, [pc, #16]	; (800543c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d101      	bne.n	8005432 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800542e:	f7fc f8a7 	bl	8001580 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005432:	bf00      	nop
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40010000 	.word	0x40010000

08005440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005444:	bf00      	nop
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
	...

08005450 <__tcf_0>:
MCP23008 MCP23008_list[8];
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	4c06      	ldr	r4, [pc, #24]	; (8005474 <__tcf_0+0x24>)
 800545a:	4b07      	ldr	r3, [pc, #28]	; (8005478 <__tcf_0+0x28>)
 800545c:	429c      	cmp	r4, r3
 800545e:	d005      	beq.n	800546c <__tcf_0+0x1c>
 8005460:	3c14      	subs	r4, #20
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4620      	mov	r0, r4
 8005468:	4798      	blx	r3
 800546a:	e7f6      	b.n	800545a <__tcf_0+0xa>
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	bd90      	pop	{r4, r7, pc}
 8005472:	bf00      	nop
 8005474:	20003f4c 	.word	0x20003f4c
 8005478:	20003eac 	.word	0x20003eac

0800547c <__tcf_1>:
MCP23017 MCP23017_list[8];
 800547c:	b590      	push	{r4, r7, lr}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	4c06      	ldr	r4, [pc, #24]	; (80054a0 <__tcf_1+0x24>)
 8005486:	4b07      	ldr	r3, [pc, #28]	; (80054a4 <__tcf_1+0x28>)
 8005488:	429c      	cmp	r4, r3
 800548a:	d005      	beq.n	8005498 <__tcf_1+0x1c>
 800548c:	3c14      	subs	r4, #20
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4620      	mov	r0, r4
 8005494:	4798      	blx	r3
 8005496:	e7f6      	b.n	8005486 <__tcf_1+0xa>
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	bd90      	pop	{r4, r7, pc}
 800549e:	bf00      	nop
 80054a0:	20003fec 	.word	0x20003fec
 80054a4:	20003f4c 	.word	0x20003f4c

080054a8 <_Z41__static_initialization_and_destruction_0ii>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

#ifdef __cplusplus
}
 80054a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d14d      	bne.n	8005554 <_Z41__static_initialization_and_destruction_0ii+0xac>
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054be:	4293      	cmp	r3, r2
 80054c0:	d148      	bne.n	8005554 <_Z41__static_initialization_and_destruction_0ii+0xac>
MCP23008 MCP23008_list[8];
 80054c2:	4d26      	ldr	r5, [pc, #152]	; (800555c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80054c4:	2407      	movs	r4, #7
 80054c6:	462e      	mov	r6, r5
 80054c8:	2c00      	cmp	r4, #0
 80054ca:	db05      	blt.n	80054d8 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80054cc:	4630      	mov	r0, r6
 80054ce:	f7fb ff9d 	bl	800140c <_ZN8MCP23008C1Ev>
 80054d2:	3614      	adds	r6, #20
 80054d4:	3c01      	subs	r4, #1
 80054d6:	e7f7      	b.n	80054c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80054d8:	4a21      	ldr	r2, [pc, #132]	; (8005560 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80054da:	4922      	ldr	r1, [pc, #136]	; (8005564 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80054dc:	2000      	movs	r0, #0
 80054de:	f000 fc62 	bl	8005da6 <__aeabi_atexit>
MCP23017 MCP23017_list[8];
 80054e2:	4d21      	ldr	r5, [pc, #132]	; (8005568 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80054e4:	2407      	movs	r4, #7
 80054e6:	462e      	mov	r6, r5
 80054e8:	2c00      	cmp	r4, #0
 80054ea:	db05      	blt.n	80054f8 <_Z41__static_initialization_and_destruction_0ii+0x50>
 80054ec:	4630      	mov	r0, r6
 80054ee:	f7fb ffc5 	bl	800147c <_ZN8MCP23017C1Ev>
 80054f2:	3614      	adds	r6, #20
 80054f4:	3c01      	subs	r4, #1
 80054f6:	e7f7      	b.n	80054e8 <_Z41__static_initialization_and_destruction_0ii+0x40>
 80054f8:	4a19      	ldr	r2, [pc, #100]	; (8005560 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80054fa:	491c      	ldr	r1, [pc, #112]	; (800556c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80054fc:	2000      	movs	r0, #0
 80054fe:	f000 fc52 	bl	8005da6 <__aeabi_atexit>
}
 8005502:	e027      	b.n	8005554 <_Z41__static_initialization_and_destruction_0ii+0xac>
 8005504:	2d00      	cmp	r5, #0
 8005506:	d00f      	beq.n	8005528 <_Z41__static_initialization_and_destruction_0ii+0x80>
MCP23008 MCP23008_list[8];
 8005508:	f1c4 0307 	rsb	r3, r4, #7
 800550c:	461a      	mov	r2, r3
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	18ec      	adds	r4, r5, r3
 8005518:	42ac      	cmp	r4, r5
 800551a:	d005      	beq.n	8005528 <_Z41__static_initialization_and_destruction_0ii+0x80>
 800551c:	3c14      	subs	r4, #20
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4620      	mov	r0, r4
 8005524:	4798      	blx	r3
 8005526:	e7f7      	b.n	8005518 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8005528:	f000 fc42 	bl	8005db0 <__cxa_end_cleanup>
 800552c:	2d00      	cmp	r5, #0
 800552e:	d00f      	beq.n	8005550 <_Z41__static_initialization_and_destruction_0ii+0xa8>
MCP23017 MCP23017_list[8];
 8005530:	f1c4 0307 	rsb	r3, r4, #7
 8005534:	461a      	mov	r2, r3
 8005536:	4613      	mov	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	18ec      	adds	r4, r5, r3
 8005540:	42ac      	cmp	r4, r5
 8005542:	d005      	beq.n	8005550 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8005544:	3c14      	subs	r4, #20
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4620      	mov	r0, r4
 800554c:	4798      	blx	r3
 800554e:	e7f7      	b.n	8005540 <_Z41__static_initialization_and_destruction_0ii+0x98>
 8005550:	f000 fc2e 	bl	8005db0 <__cxa_end_cleanup>
}
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800555a:	bf00      	nop
 800555c:	20003eac 	.word	0x20003eac
 8005560:	20000000 	.word	0x20000000
 8005564:	08005451 	.word	0x08005451
 8005568:	20003f4c 	.word	0x20003f4c
 800556c:	0800547d 	.word	0x0800547d

08005570 <_GLOBAL__sub_I_MCP23008_list>:
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
 8005574:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005578:	2001      	movs	r0, #1
 800557a:	f7ff ff95 	bl	80054a8 <_Z41__static_initialization_and_destruction_0ii>
 800557e:	bd80      	pop	{r7, pc}

08005580 <MX_SPI5_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8005580:	b508      	push	{r3, lr}

  hspi5.Instance = SPI5;
 8005582:	480e      	ldr	r0, [pc, #56]	; (80055bc <MX_SPI5_Init+0x3c>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8005584:	4b0e      	ldr	r3, [pc, #56]	; (80055c0 <MX_SPI5_Init+0x40>)
 8005586:	f44f 7e82 	mov.w	lr, #260	; 0x104
 800558a:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800558e:	2300      	movs	r3, #0
 8005590:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8005592:	60c3      	str	r3, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005594:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005596:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8005598:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800559c:	61c3      	str	r3, [r0, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800559e:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80055a0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055a2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80055a4:	230a      	movs	r3, #10
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80055a6:	6182      	str	r2, [r0, #24]
  hspi5.Init.CRCPolynomial = 10;
 80055a8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80055aa:	f7fd fc01 	bl	8002db0 <HAL_SPI_Init>
 80055ae:	b118      	cbz	r0, 80055b8 <MX_SPI5_Init+0x38>
  {
    Error_Handler();
  }

}
 80055b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80055b4:	f7ff bf44 	b.w	8005440 <Error_Handler>
 80055b8:	bd08      	pop	{r3, pc}
 80055ba:	bf00      	nop
 80055bc:	200042bc 	.word	0x200042bc
 80055c0:	40015000 	.word	0x40015000

080055c4 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{

  hspi6.Instance = SPI6;
 80055c4:	480e      	ldr	r0, [pc, #56]	; (8005600 <MX_SPI6_Init+0x3c>)
  hspi6.Init.Mode = SPI_MODE_MASTER;
  hspi6.Init.Direction = SPI_DIRECTION_1LINE;
 80055c6:	4a0f      	ldr	r2, [pc, #60]	; (8005604 <MX_SPI6_Init+0x40>)
{
 80055c8:	b508      	push	{r3, lr}
  hspi6.Init.Direction = SPI_DIRECTION_1LINE;
 80055ca:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
 80055ce:	f44f 7382 	mov.w	r3, #260	; 0x104
 80055d2:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60c3      	str	r3, [r0, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 80055da:	6103      	str	r3, [r0, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 80055dc:	6143      	str	r3, [r0, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 80055de:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055e2:	61c3      	str	r3, [r0, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80055e4:	6203      	str	r3, [r0, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 80055e6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055e8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 10;
 80055ea:	230a      	movs	r3, #10
  hspi6.Init.NSS = SPI_NSS_SOFT;
 80055ec:	6182      	str	r2, [r0, #24]
  hspi6.Init.CRCPolynomial = 10;
 80055ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 80055f0:	f7fd fbde 	bl	8002db0 <HAL_SPI_Init>
 80055f4:	b118      	cbz	r0, 80055fe <MX_SPI6_Init+0x3a>
  {
    Error_Handler();
  }

}
 80055f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80055fa:	f7ff bf21 	b.w	8005440 <Error_Handler>
 80055fe:	bd08      	pop	{r3, pc}
 8005600:	20004264 	.word	0x20004264
 8005604:	40015400 	.word	0x40015400

08005608 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005608:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800560a:	2214      	movs	r2, #20
{
 800560c:	b08a      	sub	sp, #40	; 0x28
 800560e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005610:	2100      	movs	r1, #0
 8005612:	eb0d 0002 	add.w	r0, sp, r2
 8005616:	f001 f9f2 	bl	80069fe <memset>
  if(spiHandle->Instance==SPI5)
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	4a26      	ldr	r2, [pc, #152]	; (80056b8 <HAL_SPI_MspInit+0xb0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d124      	bne.n	800566c <HAL_SPI_MspInit+0x64>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8005622:	4b26      	ldr	r3, [pc, #152]	; (80056bc <HAL_SPI_MspInit+0xb4>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005624:	4826      	ldr	r0, [pc, #152]	; (80056c0 <HAL_SPI_MspInit+0xb8>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8005626:	2100      	movs	r1, #0
 8005628:	9101      	str	r1, [sp, #4]
 800562a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800562c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005630:	645a      	str	r2, [r3, #68]	; 0x44
 8005632:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005634:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005638:	9201      	str	r2, [sp, #4]
 800563a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800563c:	9102      	str	r1, [sp, #8]
 800563e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005640:	f042 0220 	orr.w	r2, r2, #32
 8005644:	631a      	str	r2, [r3, #48]	; 0x30
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	9302      	str	r3, [sp, #8]
 800564e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005650:	f44f 7360 	mov.w	r3, #896	; 0x380
 8005654:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005656:	2302      	movs	r3, #2
 8005658:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800565a:	2303      	movs	r3, #3
 800565c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800565e:	2305      	movs	r3, #5
 8005660:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005662:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005664:	f7fc f900 	bl	8001868 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8005668:	b00a      	add	sp, #40	; 0x28
 800566a:	bd10      	pop	{r4, pc}
  else if(spiHandle->Instance==SPI6)
 800566c:	4a15      	ldr	r2, [pc, #84]	; (80056c4 <HAL_SPI_MspInit+0xbc>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d1fa      	bne.n	8005668 <HAL_SPI_MspInit+0x60>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8005672:	4b12      	ldr	r3, [pc, #72]	; (80056bc <HAL_SPI_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005674:	4814      	ldr	r0, [pc, #80]	; (80056c8 <HAL_SPI_MspInit+0xc0>)
    __HAL_RCC_SPI6_CLK_ENABLE();
 8005676:	2100      	movs	r1, #0
 8005678:	9103      	str	r1, [sp, #12]
 800567a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800567c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005680:	645a      	str	r2, [r3, #68]	; 0x44
 8005682:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005684:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005688:	9203      	str	r2, [sp, #12]
 800568a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800568c:	9104      	str	r1, [sp, #16]
 800568e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005694:	631a      	str	r2, [r3, #48]	; 0x30
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569c:	9304      	str	r3, [sp, #16]
 800569e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80056a0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80056a4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056a6:	2302      	movs	r3, #2
 80056a8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056aa:	2303      	movs	r3, #3
 80056ac:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80056ae:	2305      	movs	r3, #5
 80056b0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80056b2:	a905      	add	r1, sp, #20
 80056b4:	e7d6      	b.n	8005664 <HAL_SPI_MspInit+0x5c>
 80056b6:	bf00      	nop
 80056b8:	40015000 	.word	0x40015000
 80056bc:	40023800 	.word	0x40023800
 80056c0:	40021400 	.word	0x40021400
 80056c4:	40015400 	.word	0x40015400
 80056c8:	40021800 	.word	0x40021800

080056cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056cc:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056ce:	4b0f      	ldr	r3, [pc, #60]	; (800570c <HAL_MspInit+0x40>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	9200      	str	r2, [sp, #0]
 80056d4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80056d6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80056da:	6459      	str	r1, [r3, #68]	; 0x44
 80056dc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80056de:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80056e2:	9100      	str	r1, [sp, #0]
 80056e4:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80056e6:	9201      	str	r2, [sp, #4]
 80056e8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80056ea:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80056ee:	6419      	str	r1, [r3, #64]	; 0x40
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f6:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80056f8:	210f      	movs	r1, #15
 80056fa:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80056fe:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005700:	f7fb fff2 	bl	80016e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005704:	b003      	add	sp, #12
 8005706:	f85d fb04 	ldr.w	pc, [sp], #4
 800570a:	bf00      	nop
 800570c:	40023800 	.word	0x40023800

08005710 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005710:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8005712:	4601      	mov	r1, r0
{
 8005714:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8005716:	2200      	movs	r2, #0
 8005718:	2019      	movs	r0, #25
 800571a:	f7fb ffe5 	bl	80016e8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800571e:	2019      	movs	r0, #25
 8005720:	f7fc f816 	bl	8001750 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005724:	2500      	movs	r5, #0
 8005726:	4b15      	ldr	r3, [pc, #84]	; (800577c <HAL_InitTick+0x6c>)
 8005728:	9502      	str	r5, [sp, #8]
 800572a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800572c:	4c14      	ldr	r4, [pc, #80]	; (8005780 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 800572e:	f042 0201 	orr.w	r2, r2, #1
 8005732:	645a      	str	r2, [r3, #68]	; 0x44
 8005734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800573c:	a901      	add	r1, sp, #4
 800573e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005740:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005742:	f7fd f9ff 	bl	8002b44 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005746:	f7fd f9ed 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800574a:	4b0e      	ldr	r3, [pc, #56]	; (8005784 <HAL_InitTick+0x74>)
 800574c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800574e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8005752:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005754:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005756:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <HAL_InitTick+0x78>)
 8005758:	fbb0 f0f3 	udiv	r0, r0, r3
 800575c:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 800575e:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005760:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8005762:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005764:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005766:	f7fd fc75 	bl	8003054 <HAL_TIM_Base_Init>
 800576a:	b920      	cbnz	r0, 8005776 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800576c:	4620      	mov	r0, r4
 800576e:	f7fd fb5c 	bl	8002e2a <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8005772:	b009      	add	sp, #36	; 0x24
 8005774:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8005776:	2001      	movs	r0, #1
 8005778:	e7fb      	b.n	8005772 <HAL_InitTick+0x62>
 800577a:	bf00      	nop
 800577c:	40023800 	.word	0x40023800
 8005780:	20004314 	.word	0x20004314
 8005784:	40010000 	.word	0x40010000
 8005788:	000f4240 	.word	0x000f4240

0800578c <NMI_Handler>:
 800578c:	4770      	bx	lr

0800578e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800578e:	e7fe      	b.n	800578e <HardFault_Handler>

08005790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005790:	e7fe      	b.n	8005790 <MemManage_Handler>

08005792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005792:	e7fe      	b.n	8005792 <BusFault_Handler>

08005794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005794:	e7fe      	b.n	8005794 <UsageFault_Handler>

08005796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005796:	4770      	bx	lr

08005798 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005798:	4801      	ldr	r0, [pc, #4]	; (80057a0 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800579a:	f7fd bb55 	b.w	8002e48 <HAL_TIM_IRQHandler>
 800579e:	bf00      	nop
 80057a0:	20004314 	.word	0x20004314

080057a4 <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80057a4:	4801      	ldr	r0, [pc, #4]	; (80057ac <OTG_HS_IRQHandler+0x8>)
 80057a6:	f7fc bb93 	b.w	8001ed0 <HAL_PCD_IRQHandler>
 80057aa:	bf00      	nop
 80057ac:	200045ec 	.word	0x200045ec

080057b0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80057b0:	490f      	ldr	r1, [pc, #60]	; (80057f0 <SystemInit+0x40>)
 80057b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80057b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80057be:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <SystemInit+0x44>)
 80057c0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80057c2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80057c4:	f042 0201 	orr.w	r2, r2, #1
 80057c8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80057ca:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80057d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80057d6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80057d8:	4a07      	ldr	r2, [pc, #28]	; (80057f8 <SystemInit+0x48>)
 80057da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057e2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80057e4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80057e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057ea:	608b      	str	r3, [r1, #8]
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	e000ed00 	.word	0xe000ed00
 80057f4:	40023800 	.word	0x40023800
 80057f8:	24003010 	.word	0x24003010

080057fc <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80057fc:	b513      	push	{r0, r1, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim6.Instance = TIM6;
 80057fe:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <MX_TIM6_Init+0x34>)
 8005800:	480c      	ldr	r0, [pc, #48]	; (8005834 <MX_TIM6_Init+0x38>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005802:	2400      	movs	r4, #0
 8005804:	9400      	str	r4, [sp, #0]
 8005806:	9401      	str	r4, [sp, #4]
  htim6.Init.Prescaler = 0;
 8005808:	e880 0018 	stmia.w	r0, {r3, r4}
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800580c:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 0;
 800580e:	60c4      	str	r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005810:	f7fd fc20 	bl	8003054 <HAL_TIM_Base_Init>
 8005814:	b108      	cbz	r0, 800581a <MX_TIM6_Init+0x1e>
  {
    Error_Handler();
 8005816:	f7ff fe13 	bl	8005440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800581a:	4669      	mov	r1, sp
 800581c:	4805      	ldr	r0, [pc, #20]	; (8005834 <MX_TIM6_Init+0x38>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800581e:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005820:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005822:	f7fd fc31 	bl	8003088 <HAL_TIMEx_MasterConfigSynchronization>
 8005826:	b108      	cbz	r0, 800582c <MX_TIM6_Init+0x30>
  {
    Error_Handler();
 8005828:	f7ff fe0a 	bl	8005440 <Error_Handler>
  }

}
 800582c:	b002      	add	sp, #8
 800582e:	bd10      	pop	{r4, pc}
 8005830:	40001000 	.word	0x40001000
 8005834:	20004350 	.word	0x20004350

08005838 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005838:	b513      	push	{r0, r1, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim7.Instance = TIM7;
 800583a:	4b0c      	ldr	r3, [pc, #48]	; (800586c <MX_TIM7_Init+0x34>)
 800583c:	480c      	ldr	r0, [pc, #48]	; (8005870 <MX_TIM7_Init+0x38>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800583e:	2400      	movs	r4, #0
 8005840:	9400      	str	r4, [sp, #0]
 8005842:	9401      	str	r4, [sp, #4]
  htim7.Init.Prescaler = 0;
 8005844:	e880 0018 	stmia.w	r0, {r3, r4}
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005848:	6084      	str	r4, [r0, #8]
  htim7.Init.Period = 0;
 800584a:	60c4      	str	r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800584c:	f7fd fc02 	bl	8003054 <HAL_TIM_Base_Init>
 8005850:	b108      	cbz	r0, 8005856 <MX_TIM7_Init+0x1e>
  {
    Error_Handler();
 8005852:	f7ff fdf5 	bl	8005440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005856:	4669      	mov	r1, sp
 8005858:	4805      	ldr	r0, [pc, #20]	; (8005870 <MX_TIM7_Init+0x38>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800585a:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800585c:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800585e:	f7fd fc13 	bl	8003088 <HAL_TIMEx_MasterConfigSynchronization>
 8005862:	b108      	cbz	r0, 8005868 <MX_TIM7_Init+0x30>
  {
    Error_Handler();
 8005864:	f7ff fdec 	bl	8005440 <Error_Handler>
  }

}
 8005868:	b002      	add	sp, #8
 800586a:	bd10      	pop	{r4, pc}
 800586c:	40001400 	.word	0x40001400
 8005870:	2000438c 	.word	0x2000438c

08005874 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 8005874:	6803      	ldr	r3, [r0, #0]
 8005876:	4a11      	ldr	r2, [pc, #68]	; (80058bc <HAL_TIM_Base_MspInit+0x48>)
 8005878:	4293      	cmp	r3, r2
{
 800587a:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM6)
 800587c:	d10d      	bne.n	800589a <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800587e:	2300      	movs	r3, #0
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <HAL_TIM_Base_MspInit+0x4c>)
 8005884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005886:	f042 0210 	orr.w	r2, r2, #16
 800588a:	641a      	str	r2, [r3, #64]	; 0x40
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8005896:	b002      	add	sp, #8
 8005898:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM7)
 800589a:	4a0a      	ldr	r2, [pc, #40]	; (80058c4 <HAL_TIM_Base_MspInit+0x50>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d1fa      	bne.n	8005896 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80058a0:	2300      	movs	r3, #0
 80058a2:	9301      	str	r3, [sp, #4]
 80058a4:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <HAL_TIM_Base_MspInit+0x4c>)
 80058a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058a8:	f042 0220 	orr.w	r2, r2, #32
 80058ac:	641a      	str	r2, [r3, #64]	; 0x40
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	9b01      	ldr	r3, [sp, #4]
}
 80058b8:	e7ed      	b.n	8005896 <HAL_TIM_Base_MspInit+0x22>
 80058ba:	bf00      	nop
 80058bc:	40001000 	.word	0x40001000
 80058c0:	40023800 	.word	0x40023800
 80058c4:	40001400 	.word	0x40001400

080058c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80058c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS);
 80058ca:	4c09      	ldr	r4, [pc, #36]	; (80058f0 <MX_USB_DEVICE_Init+0x28>)
 80058cc:	4909      	ldr	r1, [pc, #36]	; (80058f4 <MX_USB_DEVICE_Init+0x2c>)
 80058ce:	2201      	movs	r2, #1
 80058d0:	4620      	mov	r0, r4
 80058d2:	f7fe f8e9 	bl	8003aa8 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceHS, &USBD_CUSTOM_HID);
 80058d6:	4908      	ldr	r1, [pc, #32]	; (80058f8 <MX_USB_DEVICE_Init+0x30>)
 80058d8:	4620      	mov	r0, r4
 80058da:	f7fe f8fa 	bl	8003ad2 <USBD_RegisterClass>

  USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceHS, &USBD_CustomHID_fops_HS);
 80058de:	4620      	mov	r0, r4
 80058e0:	4906      	ldr	r1, [pc, #24]	; (80058fc <MX_USB_DEVICE_Init+0x34>)
 80058e2:	f7fe f8da 	bl	8003a9a <USBD_CUSTOM_HID_RegisterInterface>

  USBD_Start(&hUsbDeviceHS);
 80058e6:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80058e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceHS);
 80058ec:	f7fe b8f8 	b.w	8003ae0 <USBD_Start>
 80058f0:	200043c8 	.word	0x200043c8
 80058f4:	200000a4 	.word	0x200000a4
 80058f8:	20000008 	.word	0x20000008
 80058fc:	20000094 	.word	0x20000094

08005900 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005900:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_HS)
 8005902:	6802      	ldr	r2, [r0, #0]
 8005904:	4b18      	ldr	r3, [pc, #96]	; (8005968 <HAL_PCD_MspInit+0x68>)
 8005906:	429a      	cmp	r2, r3
{
 8005908:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB_OTG_HS)
 800590a:	d12a      	bne.n	8005962 <HAL_PCD_MspInit+0x62>
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800590c:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800590e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005912:	a901      	add	r1, sp, #4
 8005914:	4815      	ldr	r0, [pc, #84]	; (800596c <HAL_PCD_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005916:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005918:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800591a:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800591c:	f7fb ffa4 	bl	8001868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005920:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005924:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005926:	2302      	movs	r3, #2
 8005928:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800592a:	2303      	movs	r3, #3
 800592c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800592e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8005930:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005932:	480e      	ldr	r0, [pc, #56]	; (800596c <HAL_PCD_MspInit+0x6c>)
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8005934:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005936:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005938:	f7fb ff96 	bl	8001868 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800593c:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <HAL_PCD_MspInit+0x70>)
 800593e:	9400      	str	r4, [sp, #0]
 8005940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005942:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005946:	631a      	str	r2, [r3, #48]	; 0x30
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800594e:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8005950:	204d      	movs	r0, #77	; 0x4d
 8005952:	4622      	mov	r2, r4
 8005954:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8005956:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8005958:	f7fb fec6 	bl	80016e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800595c:	204d      	movs	r0, #77	; 0x4d
 800595e:	f7fb fef7 	bl	8001750 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8005962:	b006      	add	sp, #24
 8005964:	bd10      	pop	{r4, pc}
 8005966:	bf00      	nop
 8005968:	40040000 	.word	0x40040000
 800596c:	40020400 	.word	0x40020400
 8005970:	40023800 	.word	0x40023800

08005974 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005974:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 8005978:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800597c:	f7fe b8c7 	b.w	8003b0e <USBD_LL_SetupStage>

08005980 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005980:	231c      	movs	r3, #28
 8005982:	fb03 0301 	mla	r3, r3, r1, r0
 8005986:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800598a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800598e:	f7fe b8eb 	b.w	8003b68 <USBD_LL_DataOutStage>

08005992 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005992:	231c      	movs	r3, #28
 8005994:	fb03 0301 	mla	r3, r3, r1, r0
 8005998:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800599c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800599e:	f7fe b915 	b.w	8003bcc <USBD_LL_DataInStage>

080059a2 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80059a2:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80059a6:	f7fe b991 	b.w	8003ccc <USBD_LL_SOF>

080059aa <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80059aa:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 80059ac:	68c1      	ldr	r1, [r0, #12]
{ 
 80059ae:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80059b0:	3100      	adds	r1, #0
 80059b2:	bf18      	it	ne
 80059b4:	2101      	movne	r1, #1
 80059b6:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80059ba:	f7fe f975 	bl	8003ca8 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80059be:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
}
 80059c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80059c6:	f7fe b950 	b.w	8003c6a <USBD_LL_Reset>
	...

080059cc <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80059cc:	b510      	push	{r4, lr}
 80059ce:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80059d0:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80059d4:	f7fe f96b 	bl	8003cae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80059d8:	6822      	ldr	r2, [r4, #0]
 80059da:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80059de:	f043 0301 	orr.w	r3, r3, #1
 80059e2:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80059e6:	6a23      	ldr	r3, [r4, #32]
 80059e8:	b123      	cbz	r3, 80059f4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80059ea:	4a03      	ldr	r2, [pc, #12]	; (80059f8 <HAL_PCD_SuspendCallback+0x2c>)
 80059ec:	6913      	ldr	r3, [r2, #16]
 80059ee:	f043 0306 	orr.w	r3, r3, #6
 80059f2:	6113      	str	r3, [r2, #16]
 80059f4:	bd10      	pop	{r4, pc}
 80059f6:	bf00      	nop
 80059f8:	e000ed00 	.word	0xe000ed00

080059fc <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80059fc:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005a00:	f7fe b95e 	b.w	8003cc0 <USBD_LL_Resume>

08005a04 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005a04:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005a08:	f7fe b96e 	b.w	8003ce8 <USBD_LL_IsoOUTIncomplete>

08005a0c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005a0c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005a10:	f7fe b968 	b.w	8003ce4 <USBD_LL_IsoINIncomplete>

08005a14 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005a14:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005a18:	f7fe b968 	b.w	8003cec <USBD_LL_DevConnected>

08005a1c <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005a1c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005a20:	f7fe b966 	b.w	8003cf0 <USBD_LL_DevDisconnected>

08005a24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005a24:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8005a26:	7801      	ldrb	r1, [r0, #0]
 8005a28:	2901      	cmp	r1, #1
 8005a2a:	d12a      	bne.n	8005a82 <USBD_LL_Init+0x5e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8005a2c:	4b16      	ldr	r3, [pc, #88]	; (8005a88 <USBD_LL_Init+0x64>)
 8005a2e:	f8c3 03ec 	str.w	r0, [r3, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_HS;
 8005a32:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8005a36:	4815      	ldr	r0, [pc, #84]	; (8005a8c <USBD_LL_Init+0x68>)
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8005a38:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8005a3a:	2206      	movs	r2, #6
 8005a3c:	e883 0005 	stmia.w	r3, {r0, r2}
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8005a40:	2002      	movs	r0, #2
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8005a42:	2200      	movs	r2, #0
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8005a44:	60d8      	str	r0, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8005a46:	6198      	str	r0, [r3, #24]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8005a48:	4618      	mov	r0, r3
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8005a4a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
 8005a4c:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8005a4e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8005a50:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8005a52:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8005a54:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8005a56:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8005a58:	f7fc f9b9 	bl	8001dce <HAL_PCD_Init>
 8005a5c:	b108      	cbz	r0, 8005a62 <USBD_LL_Init+0x3e>
  {
    Error_Handler( );
 8005a5e:	f7ff fcef 	bl	8005440 <Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8005a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a66:	4808      	ldr	r0, [pc, #32]	; (8005a88 <USBD_LL_Init+0x64>)
 8005a68:	f7fc fdf7 	bl	800265a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8005a6c:	2280      	movs	r2, #128	; 0x80
 8005a6e:	2100      	movs	r1, #0
 8005a70:	4805      	ldr	r0, [pc, #20]	; (8005a88 <USBD_LL_Init+0x64>)
 8005a72:	f7fc fdd1 	bl	8002618 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8005a76:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	4802      	ldr	r0, [pc, #8]	; (8005a88 <USBD_LL_Init+0x64>)
 8005a7e:	f7fc fdcb 	bl	8002618 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8005a82:	2000      	movs	r0, #0
 8005a84:	bd08      	pop	{r3, pc}
 8005a86:	bf00      	nop
 8005a88:	200045ec 	.word	0x200045ec
 8005a8c:	40040000 	.word	0x40040000

08005a90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005a90:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005a92:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005a96:	f7fc fa06 	bl	8001ea6 <HAL_PCD_Start>
 8005a9a:	2803      	cmp	r0, #3
 8005a9c:	bf9a      	itte	ls
 8005a9e:	4b02      	ldrls	r3, [pc, #8]	; (8005aa8 <USBD_LL_Start+0x18>)
 8005aa0:	5c18      	ldrbls	r0, [r3, r0]
 8005aa2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005aa4:	bd08      	pop	{r3, pc}
 8005aa6:	bf00      	nop
 8005aa8:	08006d1b 	.word	0x08006d1b

08005aac <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005aac:	b510      	push	{r4, lr}
 8005aae:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005ab0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	4622      	mov	r2, r4
 8005ab8:	f7fc fcc8 	bl	800244c <HAL_PCD_EP_Open>
 8005abc:	2803      	cmp	r0, #3
 8005abe:	bf9a      	itte	ls
 8005ac0:	4b01      	ldrls	r3, [pc, #4]	; (8005ac8 <USBD_LL_OpenEP+0x1c>)
 8005ac2:	5c18      	ldrbls	r0, [r3, r0]
 8005ac4:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005ac6:	bd10      	pop	{r4, pc}
 8005ac8:	08006d1b 	.word	0x08006d1b

08005acc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005acc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005ace:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005ad2:	f7fc fce9 	bl	80024a8 <HAL_PCD_EP_Close>
 8005ad6:	2803      	cmp	r0, #3
 8005ad8:	bf9a      	itte	ls
 8005ada:	4b02      	ldrls	r3, [pc, #8]	; (8005ae4 <USBD_LL_CloseEP+0x18>)
 8005adc:	5c18      	ldrbls	r0, [r3, r0]
 8005ade:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005ae0:	bd08      	pop	{r3, pc}
 8005ae2:	bf00      	nop
 8005ae4:	08006d1b 	.word	0x08006d1b

08005ae8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ae8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005aea:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005aee:	f7fc fd42 	bl	8002576 <HAL_PCD_EP_SetStall>
 8005af2:	2803      	cmp	r0, #3
 8005af4:	bf9a      	itte	ls
 8005af6:	4b02      	ldrls	r3, [pc, #8]	; (8005b00 <USBD_LL_StallEP+0x18>)
 8005af8:	5c18      	ldrbls	r0, [r3, r0]
 8005afa:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005afc:	bd08      	pop	{r3, pc}
 8005afe:	bf00      	nop
 8005b00:	08006d1b 	.word	0x08006d1b

08005b04 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b04:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005b06:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005b0a:	f7fc fd60 	bl	80025ce <HAL_PCD_EP_ClrStall>
 8005b0e:	2803      	cmp	r0, #3
 8005b10:	bf9a      	itte	ls
 8005b12:	4b02      	ldrls	r3, [pc, #8]	; (8005b1c <USBD_LL_ClearStallEP+0x18>)
 8005b14:	5c18      	ldrbls	r0, [r3, r0]
 8005b16:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8005b18:	bd08      	pop	{r3, pc}
 8005b1a:	bf00      	nop
 8005b1c:	08006d1b 	.word	0x08006d1b

08005b20 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8005b20:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005b24:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8005b28:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005b2c:	bf1b      	ittet	ne
 8005b2e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8005b32:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005b36:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005b3a:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005b3e:	bf08      	it	eq
 8005b40:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 8005b44:	4770      	bx	lr
	...

08005b48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005b48:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005b4a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005b4e:	f7fc fc6b 	bl	8002428 <HAL_PCD_SetAddress>
 8005b52:	2803      	cmp	r0, #3
 8005b54:	bf9a      	itte	ls
 8005b56:	4b02      	ldrls	r3, [pc, #8]	; (8005b60 <USBD_LL_SetUSBAddress+0x18>)
 8005b58:	5c18      	ldrbls	r0, [r3, r0]
 8005b5a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005b5c:	bd08      	pop	{r3, pc}
 8005b5e:	bf00      	nop
 8005b60:	08006d1b 	.word	0x08006d1b

08005b64 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005b64:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005b66:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005b6a:	f7fc fce4 	bl	8002536 <HAL_PCD_EP_Transmit>
 8005b6e:	2803      	cmp	r0, #3
 8005b70:	bf9a      	itte	ls
 8005b72:	4b02      	ldrls	r3, [pc, #8]	; (8005b7c <USBD_LL_Transmit+0x18>)
 8005b74:	5c18      	ldrbls	r0, [r3, r0]
 8005b76:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8005b78:	bd08      	pop	{r3, pc}
 8005b7a:	bf00      	nop
 8005b7c:	08006d1b 	.word	0x08006d1b

08005b80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005b80:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005b82:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005b86:	f7fc fcb2 	bl	80024ee <HAL_PCD_EP_Receive>
 8005b8a:	2803      	cmp	r0, #3
 8005b8c:	bf9a      	itte	ls
 8005b8e:	4b02      	ldrls	r3, [pc, #8]	; (8005b98 <USBD_LL_PrepareReceive+0x18>)
 8005b90:	5c18      	ldrbls	r0, [r3, r0]
 8005b92:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8005b94:	bd08      	pop	{r3, pc}
 8005b96:	bf00      	nop
 8005b98:	08006d1b 	.word	0x08006d1b

08005b9c <CUSTOM_HID_DeInit_HS>:
static int8_t CUSTOM_HID_DeInit_HS(void)
{
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
  /* USER CODE END 9 */
}
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	4770      	bx	lr

08005ba0 <CUSTOM_HID_OutEvent_HS>:
static int8_t CUSTOM_HID_OutEvent_HS(uint8_t event_idx, uint8_t state)
{
  /* USER CODE BEGIN 10 */
  return (USBD_OK);
  /* USER CODE END 10 */
}
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	4770      	bx	lr

08005ba4 <CUSTOM_HID_Init_HS>:
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	4770      	bx	lr

08005ba8 <USBD_HS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_HS_DeviceDesc);
 8005ba8:	2312      	movs	r3, #18
 8005baa:	800b      	strh	r3, [r1, #0]
  return USBD_HS_DeviceDesc;
}
 8005bac:	4800      	ldr	r0, [pc, #0]	; (8005bb0 <USBD_HS_DeviceDescriptor+0x8>)
 8005bae:	4770      	bx	lr
 8005bb0:	200000c0 	.word	0x200000c0

08005bb4 <USBD_HS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8005bb4:	2304      	movs	r3, #4
 8005bb6:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8005bb8:	4800      	ldr	r0, [pc, #0]	; (8005bbc <USBD_HS_LangIDStrDescriptor+0x8>)
 8005bba:	4770      	bx	lr
 8005bbc:	200000d4 	.word	0x200000d4

08005bc0 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005bc0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005bc2:	4c04      	ldr	r4, [pc, #16]	; (8005bd4 <USBD_HS_ManufacturerStrDescriptor+0x14>)
 8005bc4:	4804      	ldr	r0, [pc, #16]	; (8005bd8 <USBD_HS_ManufacturerStrDescriptor+0x18>)
 8005bc6:	460a      	mov	r2, r1
 8005bc8:	4621      	mov	r1, r4
 8005bca:	f7fe fa43 	bl	8004054 <USBD_GetString>
  return USBD_StrDesc;
}
 8005bce:	4620      	mov	r0, r4
 8005bd0:	bd10      	pop	{r4, pc}
 8005bd2:	bf00      	nop
 8005bd4:	200049dc 	.word	0x200049dc
 8005bd8:	08006d46 	.word	0x08006d46

08005bdc <USBD_HS_ProductStrDescriptor>:
{
 8005bdc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8005bde:	4c04      	ldr	r4, [pc, #16]	; (8005bf0 <USBD_HS_ProductStrDescriptor+0x14>)
 8005be0:	4804      	ldr	r0, [pc, #16]	; (8005bf4 <USBD_HS_ProductStrDescriptor+0x18>)
 8005be2:	460a      	mov	r2, r1
 8005be4:	4621      	mov	r1, r4
 8005be6:	f7fe fa35 	bl	8004054 <USBD_GetString>
}
 8005bea:	4620      	mov	r0, r4
 8005bec:	bd10      	pop	{r4, pc}
 8005bee:	bf00      	nop
 8005bf0:	200049dc 	.word	0x200049dc
 8005bf4:	08006d59 	.word	0x08006d59

08005bf8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005bf8:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);
 8005bfa:	4c04      	ldr	r4, [pc, #16]	; (8005c0c <USBD_HS_SerialStrDescriptor+0x14>)
 8005bfc:	4804      	ldr	r0, [pc, #16]	; (8005c10 <USBD_HS_SerialStrDescriptor+0x18>)
 8005bfe:	460a      	mov	r2, r1
 8005c00:	4621      	mov	r1, r4
 8005c02:	f7fe fa27 	bl	8004054 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8005c06:	4620      	mov	r0, r4
 8005c08:	bd10      	pop	{r4, pc}
 8005c0a:	bf00      	nop
 8005c0c:	200049dc 	.word	0x200049dc
 8005c10:	08006d76 	.word	0x08006d76

08005c14 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c14:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8005c16:	4c04      	ldr	r4, [pc, #16]	; (8005c28 <USBD_HS_ConfigStrDescriptor+0x14>)
 8005c18:	4804      	ldr	r0, [pc, #16]	; (8005c2c <USBD_HS_ConfigStrDescriptor+0x18>)
 8005c1a:	460a      	mov	r2, r1
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	f7fe fa19 	bl	8004054 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8005c22:	4620      	mov	r0, r4
 8005c24:	bd10      	pop	{r4, pc}
 8005c26:	bf00      	nop
 8005c28:	200049dc 	.word	0x200049dc
 8005c2c:	08006d1f 	.word	0x08006d1f

08005c30 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c30:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8005c32:	4c04      	ldr	r4, [pc, #16]	; (8005c44 <USBD_HS_InterfaceStrDescriptor+0x14>)
 8005c34:	4804      	ldr	r0, [pc, #16]	; (8005c48 <USBD_HS_InterfaceStrDescriptor+0x18>)
 8005c36:	460a      	mov	r2, r1
 8005c38:	4621      	mov	r1, r4
 8005c3a:	f7fe fa0b 	bl	8004054 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8005c3e:	4620      	mov	r0, r4
 8005c40:	bd10      	pop	{r4, pc}
 8005c42:	bf00      	nop
 8005c44:	200049dc 	.word	0x200049dc
 8005c48:	08006d31 	.word	0x08006d31

08005c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c84 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005c50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005c52:	e003      	b.n	8005c5c <LoopCopyDataInit>

08005c54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005c54:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005c56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005c58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005c5a:	3104      	adds	r1, #4

08005c5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005c5c:	480b      	ldr	r0, [pc, #44]	; (8005c8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005c60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005c62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005c64:	d3f6      	bcc.n	8005c54 <CopyDataInit>
  ldr  r2, =_sbss
 8005c66:	4a0b      	ldr	r2, [pc, #44]	; (8005c94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005c68:	e002      	b.n	8005c70 <LoopFillZerobss>

08005c6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005c6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005c6c:	f842 3b04 	str.w	r3, [r2], #4

08005c70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005c70:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005c72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005c74:	d3f9      	bcc.n	8005c6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005c76:	f7ff fd9b 	bl	80057b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c7a:	f000 fe81 	bl	8006980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c7e:	f7ff fb17 	bl	80052b0 <main>
  bx  lr    
 8005c82:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005c84:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8005c88:	08007094 	.word	0x08007094
  ldr  r0, =_sdata
 8005c8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005c90:	20000144 	.word	0x20000144
  ldr  r2, =_sbss
 8005c94:	20000144 	.word	0x20000144
  ldr  r3, = _ebss
 8005c98:	20004be0 	.word	0x20004be0

08005c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c9c:	e7fe      	b.n	8005c9c <ADC_IRQHandler>
	...

08005ca0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8005ca0:	b510      	push	{r4, lr}
 8005ca2:	4b03      	ldr	r3, [pc, #12]	; (8005cb0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8005ca4:	6003      	str	r3, [r0, #0]
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	f000 fbf0 	bl	800648c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005cac:	4620      	mov	r0, r4
 8005cae:	bd10      	pop	{r4, pc}
 8005cb0:	08006dc0 	.word	0x08006dc0

08005cb4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8005cb4:	b510      	push	{r4, lr}
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	f7ff fff2 	bl	8005ca0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	210c      	movs	r1, #12
 8005cc0:	f000 fbc2 	bl	8006448 <_ZdlPvj>
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	bd10      	pop	{r4, pc}

08005cc8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8005cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ccc:	9e06      	ldr	r6, [sp, #24]
 8005cce:	4296      	cmp	r6, r2
 8005cd0:	4680      	mov	r8, r0
 8005cd2:	460f      	mov	r7, r1
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	461d      	mov	r5, r3
 8005cd8:	d103      	bne.n	8005ce2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 8005cda:	4619      	mov	r1, r3
 8005cdc:	f000 fc2a 	bl	8006534 <_ZNKSt9type_infoeqERKS_>
 8005ce0:	b958      	cbnz	r0, 8005cfa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 8005ce2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005ce6:	6803      	ldr	r3, [r0, #0]
 8005ce8:	9606      	str	r6, [sp, #24]
 8005cea:	6a1e      	ldr	r6, [r3, #32]
 8005cec:	4622      	mov	r2, r4
 8005cee:	462b      	mov	r3, r5
 8005cf0:	4639      	mov	r1, r7
 8005cf2:	46b4      	mov	ip, r6
 8005cf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf8:	4760      	bx	ip
 8005cfa:	2006      	movs	r0, #6
 8005cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d00 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8005d00:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	460e      	mov	r6, r1
 8005d06:	4619      	mov	r1, r3
 8005d08:	4683      	mov	fp, r0
 8005d0a:	4617      	mov	r7, r2
 8005d0c:	4699      	mov	r9, r3
 8005d0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d10:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8005d14:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8005d18:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005d1a:	f000 fc0b 	bl	8006534 <_ZNKSt9type_infoeqERKS_>
 8005d1e:	b190      	cbz	r0, 8005d46 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 8005d20:	2e00      	cmp	r6, #0
 8005d22:	602c      	str	r4, [r5, #0]
 8005d24:	712f      	strb	r7, [r5, #4]
 8005d26:	db09      	blt.n	8005d3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8005d28:	4434      	add	r4, r6
 8005d2a:	45a0      	cmp	r8, r4
 8005d2c:	bf0c      	ite	eq
 8005d2e:	2406      	moveq	r4, #6
 8005d30:	2401      	movne	r4, #1
 8005d32:	71ac      	strb	r4, [r5, #6]
 8005d34:	2000      	movs	r0, #0
 8005d36:	b001      	add	sp, #4
 8005d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d3c:	3602      	adds	r6, #2
 8005d3e:	d1f9      	bne.n	8005d34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8005d40:	2301      	movs	r3, #1
 8005d42:	71ab      	strb	r3, [r5, #6]
 8005d44:	e7f6      	b.n	8005d34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8005d46:	4544      	cmp	r4, r8
 8005d48:	d104      	bne.n	8005d54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8005d4a:	4651      	mov	r1, sl
 8005d4c:	4658      	mov	r0, fp
 8005d4e:	f000 fbf1 	bl	8006534 <_ZNKSt9type_infoeqERKS_>
 8005d52:	b988      	cbnz	r0, 8005d78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 8005d54:	f8db 0008 	ldr.w	r0, [fp, #8]
 8005d58:	6803      	ldr	r3, [r0, #0]
 8005d5a:	950d      	str	r5, [sp, #52]	; 0x34
 8005d5c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8005d60:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8005d64:	940a      	str	r4, [sp, #40]	; 0x28
 8005d66:	69dc      	ldr	r4, [r3, #28]
 8005d68:	463a      	mov	r2, r7
 8005d6a:	464b      	mov	r3, r9
 8005d6c:	4631      	mov	r1, r6
 8005d6e:	46a4      	mov	ip, r4
 8005d70:	b001      	add	sp, #4
 8005d72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d76:	4760      	bx	ip
 8005d78:	716f      	strb	r7, [r5, #5]
 8005d7a:	e7db      	b.n	8005d34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

08005d7c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8005d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d80:	4604      	mov	r4, r0
 8005d82:	460d      	mov	r5, r1
 8005d84:	4616      	mov	r6, r2
 8005d86:	461f      	mov	r7, r3
 8005d88:	f000 fb94 	bl	80064b4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8005d8c:	b948      	cbnz	r0, 8005da2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8005d8e:	68a0      	ldr	r0, [r4, #8]
 8005d90:	6803      	ldr	r3, [r0, #0]
 8005d92:	699c      	ldr	r4, [r3, #24]
 8005d94:	4632      	mov	r2, r6
 8005d96:	463b      	mov	r3, r7
 8005d98:	4629      	mov	r1, r5
 8005d9a:	46a4      	mov	ip, r4
 8005d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005da0:	4760      	bx	ip
 8005da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005da6 <__aeabi_atexit>:
 8005da6:	460b      	mov	r3, r1
 8005da8:	4601      	mov	r1, r0
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 bdda 	b.w	8006964 <__cxa_atexit>

08005db0 <__cxa_end_cleanup>:
 8005db0:	b41e      	push	{r1, r2, r3, r4}
 8005db2:	f000 f89c 	bl	8005eee <__gnu_end_cleanup>
 8005db6:	bc1e      	pop	{r1, r2, r3, r4}
 8005db8:	f7fb f91e 	bl	8000ff8 <_Unwind_Resume>

08005dbc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8005dbc:	7803      	ldrb	r3, [r0, #0]
 8005dbe:	2b47      	cmp	r3, #71	; 0x47
 8005dc0:	d117      	bne.n	8005df2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005dc2:	7843      	ldrb	r3, [r0, #1]
 8005dc4:	2b4e      	cmp	r3, #78	; 0x4e
 8005dc6:	d114      	bne.n	8005df2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005dc8:	7883      	ldrb	r3, [r0, #2]
 8005dca:	2b55      	cmp	r3, #85	; 0x55
 8005dcc:	d111      	bne.n	8005df2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005dce:	78c3      	ldrb	r3, [r0, #3]
 8005dd0:	2b43      	cmp	r3, #67	; 0x43
 8005dd2:	d10e      	bne.n	8005df2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005dd4:	7903      	ldrb	r3, [r0, #4]
 8005dd6:	2b43      	cmp	r3, #67	; 0x43
 8005dd8:	d10b      	bne.n	8005df2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005dda:	7943      	ldrb	r3, [r0, #5]
 8005ddc:	2b2b      	cmp	r3, #43	; 0x2b
 8005dde:	d108      	bne.n	8005df2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005de0:	7983      	ldrb	r3, [r0, #6]
 8005de2:	2b2b      	cmp	r3, #43	; 0x2b
 8005de4:	d105      	bne.n	8005df2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005de6:	79c0      	ldrb	r0, [r0, #7]
 8005de8:	2801      	cmp	r0, #1
 8005dea:	bf8c      	ite	hi
 8005dec:	2000      	movhi	r0, #0
 8005dee:	2001      	movls	r0, #1
 8005df0:	4770      	bx	lr
 8005df2:	2000      	movs	r0, #0
 8005df4:	4770      	bx	lr
	...

08005df8 <__cxa_type_match>:
 8005df8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005dfc:	461e      	mov	r6, r3
 8005dfe:	7803      	ldrb	r3, [r0, #0]
 8005e00:	2b47      	cmp	r3, #71	; 0x47
 8005e02:	460d      	mov	r5, r1
 8005e04:	4602      	mov	r2, r0
 8005e06:	79c1      	ldrb	r1, [r0, #7]
 8005e08:	d148      	bne.n	8005e9c <__cxa_type_match+0xa4>
 8005e0a:	7843      	ldrb	r3, [r0, #1]
 8005e0c:	2b4e      	cmp	r3, #78	; 0x4e
 8005e0e:	d145      	bne.n	8005e9c <__cxa_type_match+0xa4>
 8005e10:	7883      	ldrb	r3, [r0, #2]
 8005e12:	2b55      	cmp	r3, #85	; 0x55
 8005e14:	d142      	bne.n	8005e9c <__cxa_type_match+0xa4>
 8005e16:	78c3      	ldrb	r3, [r0, #3]
 8005e18:	2b43      	cmp	r3, #67	; 0x43
 8005e1a:	d13f      	bne.n	8005e9c <__cxa_type_match+0xa4>
 8005e1c:	7903      	ldrb	r3, [r0, #4]
 8005e1e:	2b46      	cmp	r3, #70	; 0x46
 8005e20:	d13c      	bne.n	8005e9c <__cxa_type_match+0xa4>
 8005e22:	7943      	ldrb	r3, [r0, #5]
 8005e24:	2b4f      	cmp	r3, #79	; 0x4f
 8005e26:	d139      	bne.n	8005e9c <__cxa_type_match+0xa4>
 8005e28:	7983      	ldrb	r3, [r0, #6]
 8005e2a:	2b52      	cmp	r3, #82	; 0x52
 8005e2c:	d136      	bne.n	8005e9c <__cxa_type_match+0xa4>
 8005e2e:	2900      	cmp	r1, #0
 8005e30:	d134      	bne.n	8005e9c <__cxa_type_match+0xa4>
 8005e32:	2301      	movs	r3, #1
 8005e34:	4608      	mov	r0, r1
 8005e36:	2400      	movs	r4, #0
 8005e38:	9401      	str	r4, [sp, #4]
 8005e3a:	bb3b      	cbnz	r3, 8005e8c <__cxa_type_match+0x94>
 8005e3c:	bb40      	cbnz	r0, 8005e90 <__cxa_type_match+0x98>
 8005e3e:	2901      	cmp	r1, #1
 8005e40:	bf0a      	itet	eq
 8005e42:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8005e46:	f1a2 0320 	subne.w	r3, r2, #32
 8005e4a:	3b78      	subeq	r3, #120	; 0x78
 8005e4c:	2901      	cmp	r1, #1
 8005e4e:	bf08      	it	eq
 8005e50:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8005e54:	681c      	ldr	r4, [r3, #0]
 8005e56:	bf18      	it	ne
 8005e58:	3258      	addne	r2, #88	; 0x58
 8005e5a:	9201      	str	r2, [sp, #4]
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	4620      	mov	r0, r4
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	4798      	blx	r3
 8005e64:	b1b0      	cbz	r0, 8005e94 <__cxa_type_match+0x9c>
 8005e66:	9b01      	ldr	r3, [sp, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	9301      	str	r3, [sp, #4]
 8005e6c:	2702      	movs	r7, #2
 8005e6e:	682b      	ldr	r3, [r5, #0]
 8005e70:	aa01      	add	r2, sp, #4
 8005e72:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8005e76:	4621      	mov	r1, r4
 8005e78:	2301      	movs	r3, #1
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	47c0      	blx	r8
 8005e7e:	b158      	cbz	r0, 8005e98 <__cxa_type_match+0xa0>
 8005e80:	9b01      	ldr	r3, [sp, #4]
 8005e82:	6033      	str	r3, [r6, #0]
 8005e84:	4638      	mov	r0, r7
 8005e86:	b002      	add	sp, #8
 8005e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e8c:	4c07      	ldr	r4, [pc, #28]	; (8005eac <__cxa_type_match+0xb4>)
 8005e8e:	e7e5      	b.n	8005e5c <__cxa_type_match+0x64>
 8005e90:	4c07      	ldr	r4, [pc, #28]	; (8005eb0 <__cxa_type_match+0xb8>)
 8005e92:	e7e3      	b.n	8005e5c <__cxa_type_match+0x64>
 8005e94:	2701      	movs	r7, #1
 8005e96:	e7ea      	b.n	8005e6e <__cxa_type_match+0x76>
 8005e98:	4607      	mov	r7, r0
 8005e9a:	e7f3      	b.n	8005e84 <__cxa_type_match+0x8c>
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	f7ff ff8d 	bl	8005dbc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005ea2:	f080 0001 	eor.w	r0, r0, #1
 8005ea6:	b2c0      	uxtb	r0, r0
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	e7c4      	b.n	8005e36 <__cxa_type_match+0x3e>
 8005eac:	08006e58 	.word	0x08006e58
 8005eb0:	08006e60 	.word	0x08006e60

08005eb4 <__cxa_begin_cleanup>:
 8005eb4:	b510      	push	{r4, lr}
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	f000 fc00 	bl	80066bc <__cxa_get_globals>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f1a4 0120 	sub.w	r1, r4, #32
 8005ec4:	f7ff ff7a 	bl	8005dbc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005ec8:	b160      	cbz	r0, 8005ee4 <__cxa_begin_cleanup+0x30>
 8005eca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	f844 3c04 	str.w	r3, [r4, #-4]
 8005ed6:	d103      	bne.n	8005ee0 <__cxa_begin_cleanup+0x2c>
 8005ed8:	6893      	ldr	r3, [r2, #8]
 8005eda:	f844 3c08 	str.w	r3, [r4, #-8]
 8005ede:	6091      	str	r1, [r2, #8]
 8005ee0:	2001      	movs	r0, #1
 8005ee2:	bd10      	pop	{r4, pc}
 8005ee4:	6893      	ldr	r3, [r2, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0f9      	beq.n	8005ede <__cxa_begin_cleanup+0x2a>
 8005eea:	f000 fbcf 	bl	800668c <_ZSt9terminatev>

08005eee <__gnu_end_cleanup>:
 8005eee:	b510      	push	{r4, lr}
 8005ef0:	f000 fbe4 	bl	80066bc <__cxa_get_globals>
 8005ef4:	6882      	ldr	r2, [r0, #8]
 8005ef6:	4601      	mov	r1, r0
 8005ef8:	b90a      	cbnz	r2, 8005efe <__gnu_end_cleanup+0x10>
 8005efa:	f000 fbc7 	bl	800668c <_ZSt9terminatev>
 8005efe:	f102 0420 	add.w	r4, r2, #32
 8005f02:	4620      	mov	r0, r4
 8005f04:	f7ff ff5a 	bl	8005dbc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005f08:	b140      	cbz	r0, 8005f1c <__gnu_end_cleanup+0x2e>
 8005f0a:	69d3      	ldr	r3, [r2, #28]
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	61d3      	str	r3, [r2, #28]
 8005f10:	b913      	cbnz	r3, 8005f18 <__gnu_end_cleanup+0x2a>
 8005f12:	6990      	ldr	r0, [r2, #24]
 8005f14:	6088      	str	r0, [r1, #8]
 8005f16:	6193      	str	r3, [r2, #24]
 8005f18:	4620      	mov	r0, r4
 8005f1a:	bd10      	pop	{r4, pc}
 8005f1c:	6088      	str	r0, [r1, #8]
 8005f1e:	e7fb      	b.n	8005f18 <__gnu_end_cleanup+0x2a>

08005f20 <_ZL12read_uleb128PKhPm>:
 8005f20:	b570      	push	{r4, r5, r6, lr}
 8005f22:	2300      	movs	r3, #0
 8005f24:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 8005f28:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8005f2c:	f810 5b01 	ldrb.w	r5, [r0], #1
 8005f30:	1994      	adds	r4, r2, r6
 8005f32:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 8005f36:	40a2      	lsls	r2, r4
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	062a      	lsls	r2, r5, #24
 8005f3c:	d4f4      	bmi.n	8005f28 <_ZL12read_uleb128PKhPm+0x8>
 8005f3e:	600b      	str	r3, [r1, #0]
 8005f40:	bd70      	pop	{r4, r5, r6, pc}

08005f42 <_ZL12read_sleb128PKhPl>:
 8005f42:	b530      	push	{r4, r5, lr}
 8005f44:	2300      	movs	r3, #0
 8005f46:	461a      	mov	r2, r3
 8005f48:	f810 4b01 	ldrb.w	r4, [r0], #1
 8005f4c:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8005f50:	4095      	lsls	r5, r2
 8005f52:	432b      	orrs	r3, r5
 8005f54:	0625      	lsls	r5, r4, #24
 8005f56:	f102 0207 	add.w	r2, r2, #7
 8005f5a:	d4f5      	bmi.n	8005f48 <_ZL12read_sleb128PKhPl+0x6>
 8005f5c:	2a1f      	cmp	r2, #31
 8005f5e:	d806      	bhi.n	8005f6e <_ZL12read_sleb128PKhPl+0x2c>
 8005f60:	0664      	lsls	r4, r4, #25
 8005f62:	bf42      	ittt	mi
 8005f64:	f04f 34ff 	movmi.w	r4, #4294967295
 8005f68:	fa04 f202 	lslmi.w	r2, r4, r2
 8005f6c:	4313      	orrmi	r3, r2
 8005f6e:	600b      	str	r3, [r1, #0]
 8005f70:	bd30      	pop	{r4, r5, pc}

08005f72 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8005f72:	2850      	cmp	r0, #80	; 0x50
 8005f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f76:	4605      	mov	r5, r0
 8005f78:	460e      	mov	r6, r1
 8005f7a:	4614      	mov	r4, r2
 8005f7c:	461f      	mov	r7, r3
 8005f7e:	d107      	bne.n	8005f90 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 8005f80:	1cd0      	adds	r0, r2, #3
 8005f82:	f020 0003 	bic.w	r0, r0, #3
 8005f86:	f850 3b04 	ldr.w	r3, [r0], #4
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	b003      	add	sp, #12
 8005f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f90:	f000 030f 	and.w	r3, r0, #15
 8005f94:	2b0c      	cmp	r3, #12
 8005f96:	d82e      	bhi.n	8005ff6 <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 8005f98:	e8df f003 	tbb	[pc, r3]
 8005f9c:	251d0725 	.word	0x251d0725
 8005fa0:	2d2d2d29 	.word	0x2d2d2d29
 8005fa4:	2521182d 	.word	0x2521182d
 8005fa8:	29          	.byte	0x29
 8005fa9:	00          	.byte	0x00
 8005faa:	a901      	add	r1, sp, #4
 8005fac:	4620      	mov	r0, r4
 8005fae:	f7ff ffb7 	bl	8005f20 <_ZL12read_uleb128PKhPm>
 8005fb2:	9b01      	ldr	r3, [sp, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0e8      	beq.n	8005f8a <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8005fb8:	f005 0270 	and.w	r2, r5, #112	; 0x70
 8005fbc:	2a10      	cmp	r2, #16
 8005fbe:	bf08      	it	eq
 8005fc0:	4626      	moveq	r6, r4
 8005fc2:	4433      	add	r3, r6
 8005fc4:	062a      	lsls	r2, r5, #24
 8005fc6:	bf48      	it	mi
 8005fc8:	681b      	ldrmi	r3, [r3, #0]
 8005fca:	e7de      	b.n	8005f8a <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8005fcc:	a901      	add	r1, sp, #4
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f7ff ffb7 	bl	8005f42 <_ZL12read_sleb128PKhPl>
 8005fd4:	e7ed      	b.n	8005fb2 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f830 3b02 	ldrh.w	r3, [r0], #2
 8005fdc:	e7ea      	b.n	8005fb4 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8005fe4:	e7e6      	b.n	8005fb4 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f850 3b04 	ldr.w	r3, [r0], #4
 8005fec:	e7e2      	b.n	8005fb4 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f850 3b08 	ldr.w	r3, [r0], #8
 8005ff4:	e7de      	b.n	8005fb4 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8005ff6:	f000 fcad 	bl	8006954 <abort>

08005ffa <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8005ffa:	b508      	push	{r3, lr}
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2bff      	cmp	r3, #255	; 0xff
 8006000:	4608      	mov	r0, r1
 8006002:	d007      	beq.n	8006014 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8006004:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006008:	2b20      	cmp	r3, #32
 800600a:	d00d      	beq.n	8006028 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 800600c:	d804      	bhi.n	8006018 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 800600e:	b10b      	cbz	r3, 8006014 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8006010:	2b10      	cmp	r3, #16
 8006012:	d107      	bne.n	8006024 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8006014:	2000      	movs	r0, #0
 8006016:	bd08      	pop	{r3, pc}
 8006018:	2b40      	cmp	r3, #64	; 0x40
 800601a:	d00d      	beq.n	8006038 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 800601c:	2b50      	cmp	r3, #80	; 0x50
 800601e:	d0f9      	beq.n	8006014 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8006020:	2b30      	cmp	r3, #48	; 0x30
 8006022:	d005      	beq.n	8006030 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
 8006024:	f000 fc96 	bl	8006954 <abort>
 8006028:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800602c:	f7fb b9e4 	b.w	80013f8 <_Unwind_GetTextRelBase>
 8006030:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006034:	f7fb b9e4 	b.w	8001400 <_Unwind_GetDataRelBase>
 8006038:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800603c:	f7fb b9cc 	b.w	80013d8 <_Unwind_GetRegionStart>

08006040 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	460c      	mov	r4, r1
 8006044:	4601      	mov	r1, r0
 8006046:	4620      	mov	r0, r4
 8006048:	4615      	mov	r5, r2
 800604a:	461e      	mov	r6, r3
 800604c:	f7ff ffd5 	bl	8005ffa <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8006050:	4633      	mov	r3, r6
 8006052:	462a      	mov	r2, r5
 8006054:	4601      	mov	r1, r0
 8006056:	4620      	mov	r0, r4
 8006058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800605c:	f7ff bf89 	b.w	8005f72 <_ZL28read_encoded_value_with_basehjPKhPj>

08006060 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8006060:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006062:	460e      	mov	r6, r1
 8006064:	4614      	mov	r4, r2
 8006066:	4605      	mov	r5, r0
 8006068:	b328      	cbz	r0, 80060b6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 800606a:	f7fb f9b5 	bl	80013d8 <_Unwind_GetRegionStart>
 800606e:	6020      	str	r0, [r4, #0]
 8006070:	7831      	ldrb	r1, [r6, #0]
 8006072:	29ff      	cmp	r1, #255	; 0xff
 8006074:	f106 0201 	add.w	r2, r6, #1
 8006078:	d01e      	beq.n	80060b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 800607a:	1d23      	adds	r3, r4, #4
 800607c:	4628      	mov	r0, r5
 800607e:	f7ff ffdf 	bl	8006040 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006082:	4602      	mov	r2, r0
 8006084:	7813      	ldrb	r3, [r2, #0]
 8006086:	7523      	strb	r3, [r4, #20]
 8006088:	2bff      	cmp	r3, #255	; 0xff
 800608a:	f102 0001 	add.w	r0, r2, #1
 800608e:	d015      	beq.n	80060bc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5c>
 8006090:	2310      	movs	r3, #16
 8006092:	7523      	strb	r3, [r4, #20]
 8006094:	a901      	add	r1, sp, #4
 8006096:	f7ff ff43 	bl	8005f20 <_ZL12read_uleb128PKhPm>
 800609a:	9b01      	ldr	r3, [sp, #4]
 800609c:	4403      	add	r3, r0
 800609e:	60e3      	str	r3, [r4, #12]
 80060a0:	7803      	ldrb	r3, [r0, #0]
 80060a2:	7563      	strb	r3, [r4, #21]
 80060a4:	a901      	add	r1, sp, #4
 80060a6:	3001      	adds	r0, #1
 80060a8:	f7ff ff3a 	bl	8005f20 <_ZL12read_uleb128PKhPm>
 80060ac:	9b01      	ldr	r3, [sp, #4]
 80060ae:	4403      	add	r3, r0
 80060b0:	6123      	str	r3, [r4, #16]
 80060b2:	b002      	add	sp, #8
 80060b4:	bd70      	pop	{r4, r5, r6, pc}
 80060b6:	e7da      	b.n	800606e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 80060b8:	6060      	str	r0, [r4, #4]
 80060ba:	e7e3      	b.n	8006084 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 80060bc:	2300      	movs	r3, #0
 80060be:	e7ee      	b.n	800609e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

080060c0 <_Unwind_GetGR>:
 80060c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060c2:	ab03      	add	r3, sp, #12
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	2300      	movs	r3, #0
 80060c8:	460a      	mov	r2, r1
 80060ca:	4619      	mov	r1, r3
 80060cc:	f7fa fbee 	bl	80008ac <_Unwind_VRS_Get>
 80060d0:	9803      	ldr	r0, [sp, #12]
 80060d2:	b005      	add	sp, #20
 80060d4:	f85d fb04 	ldr.w	pc, [sp], #4

080060d8 <__gxx_personality_v0>:
 80060d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060dc:	b091      	sub	sp, #68	; 0x44
 80060de:	2300      	movs	r3, #0
 80060e0:	9304      	str	r3, [sp, #16]
 80060e2:	f000 0303 	and.w	r3, r0, #3
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	4607      	mov	r7, r0
 80060ea:	460c      	mov	r4, r1
 80060ec:	4616      	mov	r6, r2
 80060ee:	d011      	beq.n	8006114 <__gxx_personality_v0+0x3c>
 80060f0:	d303      	bcc.n	80060fa <__gxx_personality_v0+0x22>
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d003      	beq.n	80060fe <__gxx_personality_v0+0x26>
 80060f6:	f000 fc2d 	bl	8006954 <abort>
 80060fa:	0702      	lsls	r2, r0, #28
 80060fc:	d51a      	bpl.n	8006134 <__gxx_personality_v0+0x5c>
 80060fe:	4631      	mov	r1, r6
 8006100:	4620      	mov	r0, r4
 8006102:	f7fb f955 	bl	80013b0 <__gnu_unwind_frame>
 8006106:	b118      	cbz	r0, 8006110 <__gxx_personality_v0+0x38>
 8006108:	2009      	movs	r0, #9
 800610a:	b011      	add	sp, #68	; 0x44
 800610c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006110:	2008      	movs	r0, #8
 8006112:	e7fa      	b.n	800610a <__gxx_personality_v0+0x32>
 8006114:	f000 0508 	and.w	r5, r0, #8
 8006118:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 800611c:	bb85      	cbnz	r5, 8006180 <__gxx_personality_v0+0xa8>
 800611e:	f8d1 9020 	ldr.w	r9, [r1, #32]
 8006122:	4610      	mov	r0, r2
 8006124:	210d      	movs	r1, #13
 8006126:	f7ff ffcb 	bl	80060c0 <_Unwind_GetGR>
 800612a:	4581      	cmp	r9, r0
 800612c:	f040 8140 	bne.w	80063b0 <__gxx_personality_v0+0x2d8>
 8006130:	2506      	movs	r5, #6
 8006132:	e000      	b.n	8006136 <__gxx_personality_v0+0x5e>
 8006134:	2501      	movs	r5, #1
 8006136:	ab10      	add	r3, sp, #64	; 0x40
 8006138:	f007 0708 	and.w	r7, r7, #8
 800613c:	f843 4d2c 	str.w	r4, [r3, #-44]!
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	2300      	movs	r3, #0
 8006144:	433d      	orrs	r5, r7
 8006146:	220c      	movs	r2, #12
 8006148:	4619      	mov	r1, r3
 800614a:	4630      	mov	r0, r6
 800614c:	f7fa fbd4 	bl	80008f8 <_Unwind_VRS_Set>
 8006150:	2d06      	cmp	r5, #6
 8006152:	f040 8139 	bne.w	80063c8 <__gxx_personality_v0+0x2f0>
 8006156:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800615a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800615c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800615e:	f1b8 0f00 	cmp.w	r8, #0
 8006162:	bf0c      	ite	eq
 8006164:	f04f 0a01 	moveq.w	sl, #1
 8006168:	f04f 0a03 	movne.w	sl, #3
 800616c:	f015 0508 	ands.w	r5, r5, #8
 8006170:	f000 80ce 	beq.w	8006310 <__gxx_personality_v0+0x238>
 8006174:	f1ba 0f01 	cmp.w	sl, #1
 8006178:	f040 80c6 	bne.w	8006308 <__gxx_personality_v0+0x230>
 800617c:	f000 fa86 	bl	800668c <_ZSt9terminatev>
 8006180:	2502      	movs	r5, #2
 8006182:	e7d8      	b.n	8006136 <__gxx_personality_v0+0x5e>
 8006184:	9a07      	ldr	r2, [sp, #28]
 8006186:	4413      	add	r3, r2
 8006188:	429f      	cmp	r7, r3
 800618a:	f080 8137 	bcs.w	80063fc <__gxx_personality_v0+0x324>
 800618e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006192:	f1b8 0f00 	cmp.w	r8, #0
 8006196:	d001      	beq.n	800619c <__gxx_personality_v0+0xc4>
 8006198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800619a:	4498      	add	r8, r3
 800619c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800619e:	b117      	cbz	r7, 80061a6 <__gxx_personality_v0+0xce>
 80061a0:	1e78      	subs	r0, r7, #1
 80061a2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80061a4:	4407      	add	r7, r0
 80061a6:	f1b8 0f00 	cmp.w	r8, #0
 80061aa:	d0a8      	beq.n	80060fe <__gxx_personality_v0+0x26>
 80061ac:	2f00      	cmp	r7, #0
 80061ae:	f000 80a1 	beq.w	80062f4 <__gxx_personality_v0+0x21c>
 80061b2:	f015 0308 	ands.w	r3, r5, #8
 80061b6:	9302      	str	r3, [sp, #8]
 80061b8:	d036      	beq.n	8006228 <__gxx_personality_v0+0x150>
 80061ba:	2347      	movs	r3, #71	; 0x47
 80061bc:	7023      	strb	r3, [r4, #0]
 80061be:	234e      	movs	r3, #78	; 0x4e
 80061c0:	7063      	strb	r3, [r4, #1]
 80061c2:	2355      	movs	r3, #85	; 0x55
 80061c4:	70a3      	strb	r3, [r4, #2]
 80061c6:	2343      	movs	r3, #67	; 0x43
 80061c8:	70e3      	strb	r3, [r4, #3]
 80061ca:	2346      	movs	r3, #70	; 0x46
 80061cc:	7123      	strb	r3, [r4, #4]
 80061ce:	234f      	movs	r3, #79	; 0x4f
 80061d0:	7163      	strb	r3, [r4, #5]
 80061d2:	2352      	movs	r3, #82	; 0x52
 80061d4:	71a3      	strb	r3, [r4, #6]
 80061d6:	2300      	movs	r3, #0
 80061d8:	71e3      	strb	r3, [r4, #7]
 80061da:	f04f 0a00 	mov.w	sl, #0
 80061de:	f06f 0b03 	mvn.w	fp, #3
 80061e2:	a907      	add	r1, sp, #28
 80061e4:	4638      	mov	r0, r7
 80061e6:	f7ff feac 	bl	8005f42 <_ZL12read_sleb128PKhPl>
 80061ea:	a908      	add	r1, sp, #32
 80061ec:	9003      	str	r0, [sp, #12]
 80061ee:	f7ff fea8 	bl	8005f42 <_ZL12read_sleb128PKhPl>
 80061f2:	9a07      	ldr	r2, [sp, #28]
 80061f4:	2a00      	cmp	r2, #0
 80061f6:	d076      	beq.n	80062e6 <__gxx_personality_v0+0x20e>
 80061f8:	dd3d      	ble.n	8006276 <__gxx_personality_v0+0x19e>
 80061fa:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80061fe:	28ff      	cmp	r0, #255	; 0xff
 8006200:	d035      	beq.n	800626e <__gxx_personality_v0+0x196>
 8006202:	f000 0307 	and.w	r3, r0, #7
 8006206:	2b04      	cmp	r3, #4
 8006208:	f63f af75 	bhi.w	80060f6 <__gxx_personality_v0+0x1e>
 800620c:	a101      	add	r1, pc, #4	; (adr r1, 8006214 <__gxx_personality_v0+0x13c>)
 800620e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006212:	bf00      	nop
 8006214:	08006273 	.word	0x08006273
 8006218:	080060f7 	.word	0x080060f7
 800621c:	0800623b 	.word	0x0800623b
 8006220:	08006273 	.word	0x08006273
 8006224:	0800626b 	.word	0x0800626b
 8006228:	79e3      	ldrb	r3, [r4, #7]
 800622a:	2b01      	cmp	r3, #1
 800622c:	bf0c      	ite	eq
 800622e:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8006232:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8006236:	9304      	str	r3, [sp, #16]
 8006238:	e7cf      	b.n	80061da <__gxx_personality_v0+0x102>
 800623a:	2702      	movs	r7, #2
 800623c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800623e:	ab09      	add	r3, sp, #36	; 0x24
 8006240:	fb07 1212 	mls	r2, r7, r2, r1
 8006244:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006246:	f7ff fe94 	bl	8005f72 <_ZL28read_encoded_value_with_basehjPKhPj>
 800624a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800624c:	b369      	cbz	r1, 80062aa <__gxx_personality_v0+0x1d2>
 800624e:	b12c      	cbz	r4, 800625c <__gxx_personality_v0+0x184>
 8006250:	ab04      	add	r3, sp, #16
 8006252:	2200      	movs	r2, #0
 8006254:	4620      	mov	r0, r4
 8006256:	f7ff fdcf 	bl	8005df8 <__cxa_type_match>
 800625a:	bb30      	cbnz	r0, 80062aa <__gxx_personality_v0+0x1d2>
 800625c:	9f08      	ldr	r7, [sp, #32]
 800625e:	2f00      	cmp	r7, #0
 8006260:	d044      	beq.n	80062ec <__gxx_personality_v0+0x214>
 8006262:	9b03      	ldr	r3, [sp, #12]
 8006264:	443b      	add	r3, r7
 8006266:	461f      	mov	r7, r3
 8006268:	e7bb      	b.n	80061e2 <__gxx_personality_v0+0x10a>
 800626a:	2708      	movs	r7, #8
 800626c:	e7e6      	b.n	800623c <__gxx_personality_v0+0x164>
 800626e:	2700      	movs	r7, #0
 8006270:	e7e4      	b.n	800623c <__gxx_personality_v0+0x164>
 8006272:	2704      	movs	r7, #4
 8006274:	e7e2      	b.n	800623c <__gxx_personality_v0+0x164>
 8006276:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006278:	3201      	adds	r2, #1
 800627a:	b36c      	cbz	r4, 80062d8 <__gxx_personality_v0+0x200>
 800627c:	9b02      	ldr	r3, [sp, #8]
 800627e:	bb5b      	cbnz	r3, 80062d8 <__gxx_personality_v0+0x200>
 8006280:	9b04      	ldr	r3, [sp, #16]
 8006282:	9306      	str	r3, [sp, #24]
 8006284:	fb0b 7202 	mla	r2, fp, r2, r7
 8006288:	1f17      	subs	r7, r2, #4
 800628a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800628e:	b141      	cbz	r1, 80062a2 <__gxx_personality_v0+0x1ca>
 8006290:	ab06      	add	r3, sp, #24
 8006292:	2200      	movs	r2, #0
 8006294:	4439      	add	r1, r7
 8006296:	4620      	mov	r0, r4
 8006298:	f7ff fdae 	bl	8005df8 <__cxa_type_match>
 800629c:	2800      	cmp	r0, #0
 800629e:	d0f4      	beq.n	800628a <__gxx_personality_v0+0x1b2>
 80062a0:	2101      	movs	r1, #1
 80062a2:	f081 0101 	eor.w	r1, r1, #1
 80062a6:	2900      	cmp	r1, #0
 80062a8:	d0d8      	beq.n	800625c <__gxx_personality_v0+0x184>
 80062aa:	9f07      	ldr	r7, [sp, #28]
 80062ac:	f04f 0a03 	mov.w	sl, #3
 80062b0:	07eb      	lsls	r3, r5, #31
 80062b2:	d527      	bpl.n	8006304 <__gxx_personality_v0+0x22c>
 80062b4:	f1ba 0f02 	cmp.w	sl, #2
 80062b8:	f43f af21 	beq.w	80060fe <__gxx_personality_v0+0x26>
 80062bc:	210d      	movs	r1, #13
 80062be:	4630      	mov	r0, r6
 80062c0:	9d04      	ldr	r5, [sp, #16]
 80062c2:	f7ff fefd 	bl	80060c0 <_Unwind_GetGR>
 80062c6:	6265      	str	r5, [r4, #36]	; 0x24
 80062c8:	6220      	str	r0, [r4, #32]
 80062ca:	62a7      	str	r7, [r4, #40]	; 0x28
 80062cc:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 80062d0:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 80062d4:	2006      	movs	r0, #6
 80062d6:	e718      	b.n	800610a <__gxx_personality_v0+0x32>
 80062d8:	fb0b f202 	mul.w	r2, fp, r2
 80062dc:	58b9      	ldr	r1, [r7, r2]
 80062de:	fab1 f181 	clz	r1, r1
 80062e2:	0949      	lsrs	r1, r1, #5
 80062e4:	e7df      	b.n	80062a6 <__gxx_personality_v0+0x1ce>
 80062e6:	f04f 0a01 	mov.w	sl, #1
 80062ea:	e7b7      	b.n	800625c <__gxx_personality_v0+0x184>
 80062ec:	f1ba 0f00 	cmp.w	sl, #0
 80062f0:	f43f af05 	beq.w	80060fe <__gxx_personality_v0+0x26>
 80062f4:	f04f 0a02 	mov.w	sl, #2
 80062f8:	e7da      	b.n	80062b0 <__gxx_personality_v0+0x1d8>
 80062fa:	2700      	movs	r7, #0
 80062fc:	46b8      	mov	r8, r7
 80062fe:	f04f 0a01 	mov.w	sl, #1
 8006302:	e7d5      	b.n	80062b0 <__gxx_personality_v0+0x1d8>
 8006304:	4649      	mov	r1, r9
 8006306:	e731      	b.n	800616c <__gxx_personality_v0+0x94>
 8006308:	2f00      	cmp	r7, #0
 800630a:	da23      	bge.n	8006354 <__gxx_personality_v0+0x27c>
 800630c:	f000 f9d0 	bl	80066b0 <_ZSt10unexpectedv>
 8006310:	f1ba 0f01 	cmp.w	sl, #1
 8006314:	d102      	bne.n	800631c <__gxx_personality_v0+0x244>
 8006316:	4620      	mov	r0, r4
 8006318:	f000 f941 	bl	800659e <__cxa_call_terminate>
 800631c:	2f00      	cmp	r7, #0
 800631e:	da19      	bge.n	8006354 <__gxx_personality_v0+0x27c>
 8006320:	aa0a      	add	r2, sp, #40	; 0x28
 8006322:	4630      	mov	r0, r6
 8006324:	f7ff fe9c 	bl	8006060 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8006328:	4631      	mov	r1, r6
 800632a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800632e:	f7ff fe64 	bl	8005ffa <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8006332:	f06f 0303 	mvn.w	r3, #3
 8006336:	fb07 3203 	mla	r2, r7, r3, r3
 800633a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800633c:	900c      	str	r0, [sp, #48]	; 0x30
 800633e:	4413      	add	r3, r2
 8006340:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8006344:	b10a      	cbz	r2, 800634a <__gxx_personality_v0+0x272>
 8006346:	3501      	adds	r5, #1
 8006348:	e7fa      	b.n	8006340 <__gxx_personality_v0+0x268>
 800634a:	2204      	movs	r2, #4
 800634c:	62a5      	str	r5, [r4, #40]	; 0x28
 800634e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006350:	6322      	str	r2, [r4, #48]	; 0x30
 8006352:	6363      	str	r3, [r4, #52]	; 0x34
 8006354:	ab10      	add	r3, sp, #64	; 0x40
 8006356:	4630      	mov	r0, r6
 8006358:	f843 4d1c 	str.w	r4, [r3, #-28]!
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	2300      	movs	r3, #0
 8006360:	461a      	mov	r2, r3
 8006362:	4619      	mov	r1, r3
 8006364:	f7fa fac8 	bl	80008f8 <_Unwind_VRS_Set>
 8006368:	ab10      	add	r3, sp, #64	; 0x40
 800636a:	2201      	movs	r2, #1
 800636c:	f843 7d20 	str.w	r7, [r3, #-32]!
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	2300      	movs	r3, #0
 8006374:	4619      	mov	r1, r3
 8006376:	4630      	mov	r0, r6
 8006378:	f7fa fabe 	bl	80008f8 <_Unwind_VRS_Set>
 800637c:	210f      	movs	r1, #15
 800637e:	4630      	mov	r0, r6
 8006380:	f7ff fe9e 	bl	80060c0 <_Unwind_GetGR>
 8006384:	ab10      	add	r3, sp, #64	; 0x40
 8006386:	f000 0001 	and.w	r0, r0, #1
 800638a:	ea40 0008 	orr.w	r0, r0, r8
 800638e:	f843 0d24 	str.w	r0, [r3, #-36]!
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	2300      	movs	r3, #0
 8006396:	220f      	movs	r2, #15
 8006398:	4619      	mov	r1, r3
 800639a:	4630      	mov	r0, r6
 800639c:	f7fa faac 	bl	80008f8 <_Unwind_VRS_Set>
 80063a0:	f1ba 0f02 	cmp.w	sl, #2
 80063a4:	d102      	bne.n	80063ac <__gxx_personality_v0+0x2d4>
 80063a6:	4620      	mov	r0, r4
 80063a8:	f7ff fd84 	bl	8005eb4 <__cxa_begin_cleanup>
 80063ac:	2007      	movs	r0, #7
 80063ae:	e6ac      	b.n	800610a <__gxx_personality_v0+0x32>
 80063b0:	aa10      	add	r2, sp, #64	; 0x40
 80063b2:	4643      	mov	r3, r8
 80063b4:	f842 4d2c 	str.w	r4, [r2, #-44]!
 80063b8:	4641      	mov	r1, r8
 80063ba:	9200      	str	r2, [sp, #0]
 80063bc:	4630      	mov	r0, r6
 80063be:	220c      	movs	r2, #12
 80063c0:	f045 0502 	orr.w	r5, r5, #2
 80063c4:	f7fa fa98 	bl	80008f8 <_Unwind_VRS_Set>
 80063c8:	4630      	mov	r0, r6
 80063ca:	f7fb f80b 	bl	80013e4 <_Unwind_GetLanguageSpecificData>
 80063ce:	4681      	mov	r9, r0
 80063d0:	2800      	cmp	r0, #0
 80063d2:	f43f ae94 	beq.w	80060fe <__gxx_personality_v0+0x26>
 80063d6:	aa0a      	add	r2, sp, #40	; 0x28
 80063d8:	4601      	mov	r1, r0
 80063da:	4630      	mov	r0, r6
 80063dc:	f7ff fe40 	bl	8006060 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80063e0:	4631      	mov	r1, r6
 80063e2:	4680      	mov	r8, r0
 80063e4:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80063e8:	f7ff fe07 	bl	8005ffa <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80063ec:	210f      	movs	r1, #15
 80063ee:	900c      	str	r0, [sp, #48]	; 0x30
 80063f0:	4630      	mov	r0, r6
 80063f2:	f7ff fe65 	bl	80060c0 <_Unwind_GetGR>
 80063f6:	f020 0001 	bic.w	r0, r0, #1
 80063fa:	1e47      	subs	r7, r0, #1
 80063fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063fe:	4598      	cmp	r8, r3
 8006400:	f4bf af7b 	bcs.w	80062fa <__gxx_personality_v0+0x222>
 8006404:	4642      	mov	r2, r8
 8006406:	ab06      	add	r3, sp, #24
 8006408:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800640c:	2000      	movs	r0, #0
 800640e:	f7ff fe17 	bl	8006040 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006412:	ab07      	add	r3, sp, #28
 8006414:	4602      	mov	r2, r0
 8006416:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800641a:	2000      	movs	r0, #0
 800641c:	f7ff fe10 	bl	8006040 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006420:	ab08      	add	r3, sp, #32
 8006422:	4602      	mov	r2, r0
 8006424:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006428:	2000      	movs	r0, #0
 800642a:	f7ff fe09 	bl	8006040 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800642e:	a909      	add	r1, sp, #36	; 0x24
 8006430:	f7ff fd76 	bl	8005f20 <_ZL12read_uleb128PKhPm>
 8006434:	9a06      	ldr	r2, [sp, #24]
 8006436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006438:	4413      	add	r3, r2
 800643a:	429f      	cmp	r7, r3
 800643c:	4680      	mov	r8, r0
 800643e:	f4bf aea1 	bcs.w	8006184 <__gxx_personality_v0+0xac>
 8006442:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8006446:	e7d9      	b.n	80063fc <__gxx_personality_v0+0x324>

08006448 <_ZdlPvj>:
 8006448:	f000 b88a 	b.w	8006560 <_ZdlPv>

0800644c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800644c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800644e:	2310      	movs	r3, #16
 8006450:	9302      	str	r3, [sp, #8]
 8006452:	6803      	ldr	r3, [r0, #0]
 8006454:	2400      	movs	r4, #0
 8006456:	4615      	mov	r5, r2
 8006458:	699e      	ldr	r6, [r3, #24]
 800645a:	9400      	str	r4, [sp, #0]
 800645c:	466b      	mov	r3, sp
 800645e:	f88d 4004 	strb.w	r4, [sp, #4]
 8006462:	9403      	str	r4, [sp, #12]
 8006464:	6812      	ldr	r2, [r2, #0]
 8006466:	47b0      	blx	r6
 8006468:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800646c:	f003 0306 	and.w	r3, r3, #6
 8006470:	2b06      	cmp	r3, #6
 8006472:	bf03      	ittte	eq
 8006474:	9b00      	ldreq	r3, [sp, #0]
 8006476:	602b      	streq	r3, [r5, #0]
 8006478:	2001      	moveq	r0, #1
 800647a:	4620      	movne	r0, r4
 800647c:	b004      	add	sp, #16
 800647e:	bd70      	pop	{r4, r5, r6, pc}

08006480 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8006480:	9800      	ldr	r0, [sp, #0]
 8006482:	4290      	cmp	r0, r2
 8006484:	bf0c      	ite	eq
 8006486:	2006      	moveq	r0, #6
 8006488:	2001      	movne	r0, #1
 800648a:	4770      	bx	lr

0800648c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800648c:	b510      	push	{r4, lr}
 800648e:	4b03      	ldr	r3, [pc, #12]	; (800649c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8006490:	6003      	str	r3, [r0, #0]
 8006492:	4604      	mov	r4, r0
 8006494:	f000 f84b 	bl	800652e <_ZNSt9type_infoD1Ev>
 8006498:	4620      	mov	r0, r4
 800649a:	bd10      	pop	{r4, pc}
 800649c:	08006e1c 	.word	0x08006e1c

080064a0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80064a0:	b510      	push	{r4, lr}
 80064a2:	4604      	mov	r4, r0
 80064a4:	f7ff fff2 	bl	800648c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80064a8:	4620      	mov	r0, r4
 80064aa:	2108      	movs	r1, #8
 80064ac:	f7ff ffcc 	bl	8006448 <_ZdlPvj>
 80064b0:	4620      	mov	r0, r4
 80064b2:	bd10      	pop	{r4, pc}

080064b4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80064b4:	b538      	push	{r3, r4, r5, lr}
 80064b6:	4615      	mov	r5, r2
 80064b8:	461c      	mov	r4, r3
 80064ba:	f000 f83b 	bl	8006534 <_ZNKSt9type_infoeqERKS_>
 80064be:	b120      	cbz	r0, 80064ca <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80064c0:	2308      	movs	r3, #8
 80064c2:	60e3      	str	r3, [r4, #12]
 80064c4:	2306      	movs	r3, #6
 80064c6:	6025      	str	r5, [r4, #0]
 80064c8:	7123      	strb	r3, [r4, #4]
 80064ca:	bd38      	pop	{r3, r4, r5, pc}

080064cc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80064cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d0:	4605      	mov	r5, r0
 80064d2:	460c      	mov	r4, r1
 80064d4:	4616      	mov	r6, r2
 80064d6:	461f      	mov	r7, r3
 80064d8:	f000 f82c 	bl	8006534 <_ZNKSt9type_infoeqERKS_>
 80064dc:	b948      	cbnz	r0, 80064f2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80064de:	2f03      	cmp	r7, #3
 80064e0:	d807      	bhi.n	80064f2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	4632      	mov	r2, r6
 80064e6:	4629      	mov	r1, r5
 80064e8:	4620      	mov	r0, r4
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064f0:	4718      	bx	r3
 80064f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080064f6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80064f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064fa:	9e06      	ldr	r6, [sp, #24]
 80064fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80064fe:	4698      	mov	r8, r3
 8006500:	9b08      	ldr	r3, [sp, #32]
 8006502:	429e      	cmp	r6, r3
 8006504:	4607      	mov	r7, r0
 8006506:	4615      	mov	r5, r2
 8006508:	d103      	bne.n	8006512 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 800650a:	9907      	ldr	r1, [sp, #28]
 800650c:	f000 f812 	bl	8006534 <_ZNKSt9type_infoeqERKS_>
 8006510:	b958      	cbnz	r0, 800652a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 8006512:	4641      	mov	r1, r8
 8006514:	4638      	mov	r0, r7
 8006516:	f000 f80d 	bl	8006534 <_ZNKSt9type_infoeqERKS_>
 800651a:	b118      	cbz	r0, 8006524 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 800651c:	2301      	movs	r3, #1
 800651e:	6026      	str	r6, [r4, #0]
 8006520:	7125      	strb	r5, [r4, #4]
 8006522:	71a3      	strb	r3, [r4, #6]
 8006524:	2000      	movs	r0, #0
 8006526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800652a:	7165      	strb	r5, [r4, #5]
 800652c:	e7fa      	b.n	8006524 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

0800652e <_ZNSt9type_infoD1Ev>:
 800652e:	4770      	bx	lr

08006530 <_ZNKSt9type_info14__is_pointer_pEv>:
 8006530:	2000      	movs	r0, #0
 8006532:	4770      	bx	lr

08006534 <_ZNKSt9type_infoeqERKS_>:
 8006534:	4281      	cmp	r1, r0
 8006536:	b508      	push	{r3, lr}
 8006538:	d00e      	beq.n	8006558 <_ZNKSt9type_infoeqERKS_+0x24>
 800653a:	6840      	ldr	r0, [r0, #4]
 800653c:	7803      	ldrb	r3, [r0, #0]
 800653e:	2b2a      	cmp	r3, #42	; 0x2a
 8006540:	d00c      	beq.n	800655c <_ZNKSt9type_infoeqERKS_+0x28>
 8006542:	6849      	ldr	r1, [r1, #4]
 8006544:	780b      	ldrb	r3, [r1, #0]
 8006546:	2b2a      	cmp	r3, #42	; 0x2a
 8006548:	bf08      	it	eq
 800654a:	3101      	addeq	r1, #1
 800654c:	f7f9 fe50 	bl	80001f0 <strcmp>
 8006550:	fab0 f080 	clz	r0, r0
 8006554:	0940      	lsrs	r0, r0, #5
 8006556:	bd08      	pop	{r3, pc}
 8006558:	2001      	movs	r0, #1
 800655a:	bd08      	pop	{r3, pc}
 800655c:	2000      	movs	r0, #0
 800655e:	bd08      	pop	{r3, pc}

08006560 <_ZdlPv>:
 8006560:	f000 ba3a 	b.w	80069d8 <free>

08006564 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8006564:	7803      	ldrb	r3, [r0, #0]
 8006566:	2b47      	cmp	r3, #71	; 0x47
 8006568:	d117      	bne.n	800659a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800656a:	7843      	ldrb	r3, [r0, #1]
 800656c:	2b4e      	cmp	r3, #78	; 0x4e
 800656e:	d114      	bne.n	800659a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006570:	7883      	ldrb	r3, [r0, #2]
 8006572:	2b55      	cmp	r3, #85	; 0x55
 8006574:	d111      	bne.n	800659a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006576:	78c3      	ldrb	r3, [r0, #3]
 8006578:	2b43      	cmp	r3, #67	; 0x43
 800657a:	d10e      	bne.n	800659a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800657c:	7903      	ldrb	r3, [r0, #4]
 800657e:	2b43      	cmp	r3, #67	; 0x43
 8006580:	d10b      	bne.n	800659a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006582:	7943      	ldrb	r3, [r0, #5]
 8006584:	2b2b      	cmp	r3, #43	; 0x2b
 8006586:	d108      	bne.n	800659a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006588:	7983      	ldrb	r3, [r0, #6]
 800658a:	2b2b      	cmp	r3, #43	; 0x2b
 800658c:	d105      	bne.n	800659a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800658e:	79c0      	ldrb	r0, [r0, #7]
 8006590:	2801      	cmp	r0, #1
 8006592:	bf8c      	ite	hi
 8006594:	2000      	movhi	r0, #0
 8006596:	2001      	movls	r0, #1
 8006598:	4770      	bx	lr
 800659a:	2000      	movs	r0, #0
 800659c:	4770      	bx	lr

0800659e <__cxa_call_terminate>:
 800659e:	b510      	push	{r4, lr}
 80065a0:	4604      	mov	r4, r0
 80065a2:	b148      	cbz	r0, 80065b8 <__cxa_call_terminate+0x1a>
 80065a4:	f000 f83b 	bl	800661e <__cxa_begin_catch>
 80065a8:	4620      	mov	r0, r4
 80065aa:	f7ff ffdb 	bl	8006564 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80065ae:	b118      	cbz	r0, 80065b8 <__cxa_call_terminate+0x1a>
 80065b0:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80065b4:	f000 f85d 	bl	8006672 <_ZN10__cxxabiv111__terminateEPFvvE>
 80065b8:	f000 f868 	bl	800668c <_ZSt9terminatev>

080065bc <__cxa_call_unexpected>:
 80065bc:	b538      	push	{r3, r4, r5, lr}
 80065be:	4602      	mov	r2, r0
 80065c0:	f7ff ffd0 	bl	8006564 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80065c4:	b140      	cbz	r0, 80065d8 <__cxa_call_unexpected+0x1c>
 80065c6:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80065ca:	2500      	movs	r5, #0
 80065cc:	4610      	mov	r0, r2
 80065ce:	f000 f826 	bl	800661e <__cxa_begin_catch>
 80065d2:	b125      	cbz	r5, 80065de <__cxa_call_unexpected+0x22>
 80065d4:	f000 f86c 	bl	80066b0 <_ZSt10unexpectedv>
 80065d8:	4604      	mov	r4, r0
 80065da:	2501      	movs	r5, #1
 80065dc:	e7f6      	b.n	80065cc <__cxa_call_unexpected+0x10>
 80065de:	4620      	mov	r0, r4
 80065e0:	f000 f859 	bl	8006696 <_ZN10__cxxabiv112__unexpectedEPFvvE>

080065e4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80065e4:	7803      	ldrb	r3, [r0, #0]
 80065e6:	2b47      	cmp	r3, #71	; 0x47
 80065e8:	d117      	bne.n	800661a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80065ea:	7843      	ldrb	r3, [r0, #1]
 80065ec:	2b4e      	cmp	r3, #78	; 0x4e
 80065ee:	d114      	bne.n	800661a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80065f0:	7883      	ldrb	r3, [r0, #2]
 80065f2:	2b55      	cmp	r3, #85	; 0x55
 80065f4:	d111      	bne.n	800661a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80065f6:	78c3      	ldrb	r3, [r0, #3]
 80065f8:	2b43      	cmp	r3, #67	; 0x43
 80065fa:	d10e      	bne.n	800661a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80065fc:	7903      	ldrb	r3, [r0, #4]
 80065fe:	2b43      	cmp	r3, #67	; 0x43
 8006600:	d10b      	bne.n	800661a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006602:	7943      	ldrb	r3, [r0, #5]
 8006604:	2b2b      	cmp	r3, #43	; 0x2b
 8006606:	d108      	bne.n	800661a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006608:	7983      	ldrb	r3, [r0, #6]
 800660a:	2b2b      	cmp	r3, #43	; 0x2b
 800660c:	d105      	bne.n	800661a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800660e:	79c0      	ldrb	r0, [r0, #7]
 8006610:	2801      	cmp	r0, #1
 8006612:	bf8c      	ite	hi
 8006614:	2000      	movhi	r0, #0
 8006616:	2001      	movls	r0, #1
 8006618:	4770      	bx	lr
 800661a:	2000      	movs	r0, #0
 800661c:	4770      	bx	lr

0800661e <__cxa_begin_catch>:
 800661e:	b538      	push	{r3, r4, r5, lr}
 8006620:	4605      	mov	r5, r0
 8006622:	f000 f84b 	bl	80066bc <__cxa_get_globals>
 8006626:	4601      	mov	r1, r0
 8006628:	6802      	ldr	r2, [r0, #0]
 800662a:	4628      	mov	r0, r5
 800662c:	f1a5 0420 	sub.w	r4, r5, #32
 8006630:	f7ff ffd8 	bl	80065e4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006634:	b930      	cbnz	r0, 8006644 <__cxa_begin_catch+0x26>
 8006636:	b10a      	cbz	r2, 800663c <__cxa_begin_catch+0x1e>
 8006638:	f000 f828 	bl	800668c <_ZSt9terminatev>
 800663c:	600c      	str	r4, [r1, #0]
 800663e:	4614      	mov	r4, r2
 8006640:	4620      	mov	r0, r4
 8006642:	bd38      	pop	{r3, r4, r5, pc}
 8006644:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	bfb4      	ite	lt
 800664c:	f1c3 0301 	rsblt	r3, r3, #1
 8006650:	3301      	addge	r3, #1
 8006652:	f845 3c0c 	str.w	r3, [r5, #-12]
 8006656:	684b      	ldr	r3, [r1, #4]
 8006658:	42a2      	cmp	r2, r4
 800665a:	f103 33ff 	add.w	r3, r3, #4294967295
 800665e:	604b      	str	r3, [r1, #4]
 8006660:	4628      	mov	r0, r5
 8006662:	bf1c      	itt	ne
 8006664:	f845 2c10 	strne.w	r2, [r5, #-16]
 8006668:	600c      	strne	r4, [r1, #0]
 800666a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800666c:	f7fa f916 	bl	800089c <_Unwind_Complete>
 8006670:	e7e6      	b.n	8006640 <__cxa_begin_catch+0x22>

08006672 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006672:	b508      	push	{r3, lr}
 8006674:	4780      	blx	r0
 8006676:	f000 f96d 	bl	8006954 <abort>
	...

0800667c <_ZSt13get_terminatev>:
 800667c:	4b02      	ldr	r3, [pc, #8]	; (8006688 <_ZSt13get_terminatev+0xc>)
 800667e:	6818      	ldr	r0, [r3, #0]
 8006680:	f3bf 8f5b 	dmb	ish
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	200000d8 	.word	0x200000d8

0800668c <_ZSt9terminatev>:
 800668c:	b508      	push	{r3, lr}
 800668e:	f7ff fff5 	bl	800667c <_ZSt13get_terminatev>
 8006692:	f7ff ffee 	bl	8006672 <_ZN10__cxxabiv111__terminateEPFvvE>

08006696 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8006696:	b508      	push	{r3, lr}
 8006698:	4780      	blx	r0
 800669a:	f7ff fff7 	bl	800668c <_ZSt9terminatev>
	...

080066a0 <_ZSt14get_unexpectedv>:
 80066a0:	4b02      	ldr	r3, [pc, #8]	; (80066ac <_ZSt14get_unexpectedv+0xc>)
 80066a2:	6818      	ldr	r0, [r3, #0]
 80066a4:	f3bf 8f5b 	dmb	ish
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	200000dc 	.word	0x200000dc

080066b0 <_ZSt10unexpectedv>:
 80066b0:	b508      	push	{r3, lr}
 80066b2:	f7ff fff5 	bl	80066a0 <_ZSt14get_unexpectedv>
 80066b6:	f7ff ffee 	bl	8006696 <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

080066bc <__cxa_get_globals>:
 80066bc:	4800      	ldr	r0, [pc, #0]	; (80066c0 <__cxa_get_globals+0x4>)
 80066be:	4770      	bx	lr
 80066c0:	20003fec 	.word	0x20003fec

080066c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80066c4:	4b24      	ldr	r3, [pc, #144]	; (8006758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	07d0      	lsls	r0, r2, #31
 80066ca:	bf5c      	itt	pl
 80066cc:	2201      	movpl	r2, #1
 80066ce:	601a      	strpl	r2, [r3, #0]
 80066d0:	4b22      	ldr	r3, [pc, #136]	; (800675c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	07d1      	lsls	r1, r2, #31
 80066d6:	bf5c      	itt	pl
 80066d8:	2201      	movpl	r2, #1
 80066da:	601a      	strpl	r2, [r3, #0]
 80066dc:	4b20      	ldr	r3, [pc, #128]	; (8006760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	07d2      	lsls	r2, r2, #31
 80066e2:	bf5c      	itt	pl
 80066e4:	2201      	movpl	r2, #1
 80066e6:	601a      	strpl	r2, [r3, #0]
 80066e8:	4b1e      	ldr	r3, [pc, #120]	; (8006764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	07d0      	lsls	r0, r2, #31
 80066ee:	bf5c      	itt	pl
 80066f0:	2201      	movpl	r2, #1
 80066f2:	601a      	strpl	r2, [r3, #0]
 80066f4:	4b1c      	ldr	r3, [pc, #112]	; (8006768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	07d1      	lsls	r1, r2, #31
 80066fa:	bf5c      	itt	pl
 80066fc:	2201      	movpl	r2, #1
 80066fe:	601a      	strpl	r2, [r3, #0]
 8006700:	4b1a      	ldr	r3, [pc, #104]	; (800676c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	07d2      	lsls	r2, r2, #31
 8006706:	bf5c      	itt	pl
 8006708:	2201      	movpl	r2, #1
 800670a:	601a      	strpl	r2, [r3, #0]
 800670c:	4b18      	ldr	r3, [pc, #96]	; (8006770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	07d0      	lsls	r0, r2, #31
 8006712:	bf5c      	itt	pl
 8006714:	2201      	movpl	r2, #1
 8006716:	601a      	strpl	r2, [r3, #0]
 8006718:	4b16      	ldr	r3, [pc, #88]	; (8006774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	07d1      	lsls	r1, r2, #31
 800671e:	bf5c      	itt	pl
 8006720:	2201      	movpl	r2, #1
 8006722:	601a      	strpl	r2, [r3, #0]
 8006724:	4b14      	ldr	r3, [pc, #80]	; (8006778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	07d2      	lsls	r2, r2, #31
 800672a:	bf5c      	itt	pl
 800672c:	2201      	movpl	r2, #1
 800672e:	601a      	strpl	r2, [r3, #0]
 8006730:	4b12      	ldr	r3, [pc, #72]	; (800677c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	07d0      	lsls	r0, r2, #31
 8006736:	bf5c      	itt	pl
 8006738:	2201      	movpl	r2, #1
 800673a:	601a      	strpl	r2, [r3, #0]
 800673c:	4b10      	ldr	r3, [pc, #64]	; (8006780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	07d1      	lsls	r1, r2, #31
 8006742:	bf5c      	itt	pl
 8006744:	2201      	movpl	r2, #1
 8006746:	601a      	strpl	r2, [r3, #0]
 8006748:	4b0e      	ldr	r3, [pc, #56]	; (8006784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	07d2      	lsls	r2, r2, #31
 800674e:	bf5c      	itt	pl
 8006750:	2201      	movpl	r2, #1
 8006752:	601a      	strpl	r2, [r3, #0]
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	20004024 	.word	0x20004024
 800675c:	20004020 	.word	0x20004020
 8006760:	2000401c 	.word	0x2000401c
 8006764:	20004018 	.word	0x20004018
 8006768:	20004014 	.word	0x20004014
 800676c:	20004010 	.word	0x20004010
 8006770:	2000400c 	.word	0x2000400c
 8006774:	20004008 	.word	0x20004008
 8006778:	20004004 	.word	0x20004004
 800677c:	20004000 	.word	0x20004000
 8006780:	20003ffc 	.word	0x20003ffc
 8006784:	20003ff8 	.word	0x20003ff8

08006788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8006788:	4b18      	ldr	r3, [pc, #96]	; (80067ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	07d1      	lsls	r1, r2, #31
 800678e:	bf5c      	itt	pl
 8006790:	2201      	movpl	r2, #1
 8006792:	601a      	strpl	r2, [r3, #0]
 8006794:	4b16      	ldr	r3, [pc, #88]	; (80067f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	07d2      	lsls	r2, r2, #31
 800679a:	bf5c      	itt	pl
 800679c:	2201      	movpl	r2, #1
 800679e:	601a      	strpl	r2, [r3, #0]
 80067a0:	4b14      	ldr	r3, [pc, #80]	; (80067f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	07d0      	lsls	r0, r2, #31
 80067a6:	bf5c      	itt	pl
 80067a8:	2201      	movpl	r2, #1
 80067aa:	601a      	strpl	r2, [r3, #0]
 80067ac:	4b12      	ldr	r3, [pc, #72]	; (80067f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	07d1      	lsls	r1, r2, #31
 80067b2:	bf5c      	itt	pl
 80067b4:	2201      	movpl	r2, #1
 80067b6:	601a      	strpl	r2, [r3, #0]
 80067b8:	4b10      	ldr	r3, [pc, #64]	; (80067fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	07d2      	lsls	r2, r2, #31
 80067be:	bf5c      	itt	pl
 80067c0:	2201      	movpl	r2, #1
 80067c2:	601a      	strpl	r2, [r3, #0]
 80067c4:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	07d0      	lsls	r0, r2, #31
 80067ca:	bf5c      	itt	pl
 80067cc:	2201      	movpl	r2, #1
 80067ce:	601a      	strpl	r2, [r3, #0]
 80067d0:	4b0c      	ldr	r3, [pc, #48]	; (8006804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	07d1      	lsls	r1, r2, #31
 80067d6:	bf5c      	itt	pl
 80067d8:	2201      	movpl	r2, #1
 80067da:	601a      	strpl	r2, [r3, #0]
 80067dc:	4b0a      	ldr	r3, [pc, #40]	; (8006808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	07d2      	lsls	r2, r2, #31
 80067e2:	bf5c      	itt	pl
 80067e4:	2201      	movpl	r2, #1
 80067e6:	601a      	strpl	r2, [r3, #0]
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	20004044 	.word	0x20004044
 80067f0:	20004040 	.word	0x20004040
 80067f4:	2000403c 	.word	0x2000403c
 80067f8:	20004038 	.word	0x20004038
 80067fc:	20004034 	.word	0x20004034
 8006800:	20004030 	.word	0x20004030
 8006804:	2000402c 	.word	0x2000402c
 8006808:	20004028 	.word	0x20004028

0800680c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 800680c:	4b24      	ldr	r3, [pc, #144]	; (80068a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	07d0      	lsls	r0, r2, #31
 8006812:	bf5c      	itt	pl
 8006814:	2201      	movpl	r2, #1
 8006816:	601a      	strpl	r2, [r3, #0]
 8006818:	4b22      	ldr	r3, [pc, #136]	; (80068a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	07d1      	lsls	r1, r2, #31
 800681e:	bf5c      	itt	pl
 8006820:	2201      	movpl	r2, #1
 8006822:	601a      	strpl	r2, [r3, #0]
 8006824:	4b20      	ldr	r3, [pc, #128]	; (80068a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	07d2      	lsls	r2, r2, #31
 800682a:	bf5c      	itt	pl
 800682c:	2201      	movpl	r2, #1
 800682e:	601a      	strpl	r2, [r3, #0]
 8006830:	4b1e      	ldr	r3, [pc, #120]	; (80068ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	07d0      	lsls	r0, r2, #31
 8006836:	bf5c      	itt	pl
 8006838:	2201      	movpl	r2, #1
 800683a:	601a      	strpl	r2, [r3, #0]
 800683c:	4b1c      	ldr	r3, [pc, #112]	; (80068b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	07d1      	lsls	r1, r2, #31
 8006842:	bf5c      	itt	pl
 8006844:	2201      	movpl	r2, #1
 8006846:	601a      	strpl	r2, [r3, #0]
 8006848:	4b1a      	ldr	r3, [pc, #104]	; (80068b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	07d2      	lsls	r2, r2, #31
 800684e:	bf5c      	itt	pl
 8006850:	2201      	movpl	r2, #1
 8006852:	601a      	strpl	r2, [r3, #0]
 8006854:	4b18      	ldr	r3, [pc, #96]	; (80068b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	07d0      	lsls	r0, r2, #31
 800685a:	bf5c      	itt	pl
 800685c:	2201      	movpl	r2, #1
 800685e:	601a      	strpl	r2, [r3, #0]
 8006860:	4b16      	ldr	r3, [pc, #88]	; (80068bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	07d1      	lsls	r1, r2, #31
 8006866:	bf5c      	itt	pl
 8006868:	2201      	movpl	r2, #1
 800686a:	601a      	strpl	r2, [r3, #0]
 800686c:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	07d2      	lsls	r2, r2, #31
 8006872:	bf5c      	itt	pl
 8006874:	2201      	movpl	r2, #1
 8006876:	601a      	strpl	r2, [r3, #0]
 8006878:	4b12      	ldr	r3, [pc, #72]	; (80068c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	07d0      	lsls	r0, r2, #31
 800687e:	bf5c      	itt	pl
 8006880:	2201      	movpl	r2, #1
 8006882:	601a      	strpl	r2, [r3, #0]
 8006884:	4b10      	ldr	r3, [pc, #64]	; (80068c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	07d1      	lsls	r1, r2, #31
 800688a:	bf5c      	itt	pl
 800688c:	2201      	movpl	r2, #1
 800688e:	601a      	strpl	r2, [r3, #0]
 8006890:	4b0e      	ldr	r3, [pc, #56]	; (80068cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	07d2      	lsls	r2, r2, #31
 8006896:	bf5c      	itt	pl
 8006898:	2201      	movpl	r2, #1
 800689a:	601a      	strpl	r2, [r3, #0]
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	20004074 	.word	0x20004074
 80068a4:	20004070 	.word	0x20004070
 80068a8:	2000406c 	.word	0x2000406c
 80068ac:	20004068 	.word	0x20004068
 80068b0:	20004064 	.word	0x20004064
 80068b4:	20004060 	.word	0x20004060
 80068b8:	2000405c 	.word	0x2000405c
 80068bc:	20004058 	.word	0x20004058
 80068c0:	20004054 	.word	0x20004054
 80068c4:	20004050 	.word	0x20004050
 80068c8:	2000404c 	.word	0x2000404c
 80068cc:	20004048 	.word	0x20004048

080068d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80068d0:	4b18      	ldr	r3, [pc, #96]	; (8006934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	07d1      	lsls	r1, r2, #31
 80068d6:	bf5c      	itt	pl
 80068d8:	2201      	movpl	r2, #1
 80068da:	601a      	strpl	r2, [r3, #0]
 80068dc:	4b16      	ldr	r3, [pc, #88]	; (8006938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	07d2      	lsls	r2, r2, #31
 80068e2:	bf5c      	itt	pl
 80068e4:	2201      	movpl	r2, #1
 80068e6:	601a      	strpl	r2, [r3, #0]
 80068e8:	4b14      	ldr	r3, [pc, #80]	; (800693c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	07d0      	lsls	r0, r2, #31
 80068ee:	bf5c      	itt	pl
 80068f0:	2201      	movpl	r2, #1
 80068f2:	601a      	strpl	r2, [r3, #0]
 80068f4:	4b12      	ldr	r3, [pc, #72]	; (8006940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	07d1      	lsls	r1, r2, #31
 80068fa:	bf5c      	itt	pl
 80068fc:	2201      	movpl	r2, #1
 80068fe:	601a      	strpl	r2, [r3, #0]
 8006900:	4b10      	ldr	r3, [pc, #64]	; (8006944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	07d2      	lsls	r2, r2, #31
 8006906:	bf5c      	itt	pl
 8006908:	2201      	movpl	r2, #1
 800690a:	601a      	strpl	r2, [r3, #0]
 800690c:	4b0e      	ldr	r3, [pc, #56]	; (8006948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	07d0      	lsls	r0, r2, #31
 8006912:	bf5c      	itt	pl
 8006914:	2201      	movpl	r2, #1
 8006916:	601a      	strpl	r2, [r3, #0]
 8006918:	4b0c      	ldr	r3, [pc, #48]	; (800694c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	07d1      	lsls	r1, r2, #31
 800691e:	bf5c      	itt	pl
 8006920:	2201      	movpl	r2, #1
 8006922:	601a      	strpl	r2, [r3, #0]
 8006924:	4b0a      	ldr	r3, [pc, #40]	; (8006950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	07d2      	lsls	r2, r2, #31
 800692a:	bf5c      	itt	pl
 800692c:	2201      	movpl	r2, #1
 800692e:	601a      	strpl	r2, [r3, #0]
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	20004094 	.word	0x20004094
 8006938:	20004090 	.word	0x20004090
 800693c:	2000408c 	.word	0x2000408c
 8006940:	20004088 	.word	0x20004088
 8006944:	20004084 	.word	0x20004084
 8006948:	20004080 	.word	0x20004080
 800694c:	2000407c 	.word	0x2000407c
 8006950:	20004078 	.word	0x20004078

08006954 <abort>:
 8006954:	b508      	push	{r3, lr}
 8006956:	2006      	movs	r0, #6
 8006958:	f000 f93e 	bl	8006bd8 <raise>
 800695c:	2001      	movs	r0, #1
 800695e:	f000 f977 	bl	8006c50 <_exit>
	...

08006964 <__cxa_atexit>:
 8006964:	b510      	push	{r4, lr}
 8006966:	4c05      	ldr	r4, [pc, #20]	; (800697c <__cxa_atexit+0x18>)
 8006968:	4613      	mov	r3, r2
 800696a:	b12c      	cbz	r4, 8006978 <__cxa_atexit+0x14>
 800696c:	460a      	mov	r2, r1
 800696e:	4601      	mov	r1, r0
 8006970:	2002      	movs	r0, #2
 8006972:	f3af 8000 	nop.w
 8006976:	bd10      	pop	{r4, pc}
 8006978:	4620      	mov	r0, r4
 800697a:	bd10      	pop	{r4, pc}
 800697c:	00000000 	.word	0x00000000

08006980 <__libc_init_array>:
 8006980:	b570      	push	{r4, r5, r6, lr}
 8006982:	4e0d      	ldr	r6, [pc, #52]	; (80069b8 <__libc_init_array+0x38>)
 8006984:	4c0d      	ldr	r4, [pc, #52]	; (80069bc <__libc_init_array+0x3c>)
 8006986:	1ba4      	subs	r4, r4, r6
 8006988:	10a4      	asrs	r4, r4, #2
 800698a:	2500      	movs	r5, #0
 800698c:	42a5      	cmp	r5, r4
 800698e:	d109      	bne.n	80069a4 <__libc_init_array+0x24>
 8006990:	4e0b      	ldr	r6, [pc, #44]	; (80069c0 <__libc_init_array+0x40>)
 8006992:	4c0c      	ldr	r4, [pc, #48]	; (80069c4 <__libc_init_array+0x44>)
 8006994:	f000 f95e 	bl	8006c54 <_init>
 8006998:	1ba4      	subs	r4, r4, r6
 800699a:	10a4      	asrs	r4, r4, #2
 800699c:	2500      	movs	r5, #0
 800699e:	42a5      	cmp	r5, r4
 80069a0:	d105      	bne.n	80069ae <__libc_init_array+0x2e>
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
 80069a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069a8:	4798      	blx	r3
 80069aa:	3501      	adds	r5, #1
 80069ac:	e7ee      	b.n	800698c <__libc_init_array+0xc>
 80069ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069b2:	4798      	blx	r3
 80069b4:	3501      	adds	r5, #1
 80069b6:	e7f2      	b.n	800699e <__libc_init_array+0x1e>
 80069b8:	08007078 	.word	0x08007078
 80069bc:	08007078 	.word	0x08007078
 80069c0:	08007078 	.word	0x08007078
 80069c4:	08007090 	.word	0x08007090

080069c8 <malloc>:
 80069c8:	4b02      	ldr	r3, [pc, #8]	; (80069d4 <malloc+0xc>)
 80069ca:	4601      	mov	r1, r0
 80069cc:	6818      	ldr	r0, [r3, #0]
 80069ce:	f000 b86d 	b.w	8006aac <_malloc_r>
 80069d2:	bf00      	nop
 80069d4:	200000e0 	.word	0x200000e0

080069d8 <free>:
 80069d8:	4b02      	ldr	r3, [pc, #8]	; (80069e4 <free+0xc>)
 80069da:	4601      	mov	r1, r0
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	f000 b817 	b.w	8006a10 <_free_r>
 80069e2:	bf00      	nop
 80069e4:	200000e0 	.word	0x200000e0

080069e8 <memcpy>:
 80069e8:	b510      	push	{r4, lr}
 80069ea:	1e43      	subs	r3, r0, #1
 80069ec:	440a      	add	r2, r1
 80069ee:	4291      	cmp	r1, r2
 80069f0:	d100      	bne.n	80069f4 <memcpy+0xc>
 80069f2:	bd10      	pop	{r4, pc}
 80069f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069fc:	e7f7      	b.n	80069ee <memcpy+0x6>

080069fe <memset>:
 80069fe:	4402      	add	r2, r0
 8006a00:	4603      	mov	r3, r0
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d100      	bne.n	8006a08 <memset+0xa>
 8006a06:	4770      	bx	lr
 8006a08:	f803 1b01 	strb.w	r1, [r3], #1
 8006a0c:	e7f9      	b.n	8006a02 <memset+0x4>
	...

08006a10 <_free_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4605      	mov	r5, r0
 8006a14:	2900      	cmp	r1, #0
 8006a16:	d045      	beq.n	8006aa4 <_free_r+0x94>
 8006a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a1c:	1f0c      	subs	r4, r1, #4
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	bfb8      	it	lt
 8006a22:	18e4      	addlt	r4, r4, r3
 8006a24:	f000 f8f4 	bl	8006c10 <__malloc_lock>
 8006a28:	4a1f      	ldr	r2, [pc, #124]	; (8006aa8 <_free_r+0x98>)
 8006a2a:	6813      	ldr	r3, [r2, #0]
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	b933      	cbnz	r3, 8006a3e <_free_r+0x2e>
 8006a30:	6063      	str	r3, [r4, #4]
 8006a32:	6014      	str	r4, [r2, #0]
 8006a34:	4628      	mov	r0, r5
 8006a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a3a:	f000 b8ea 	b.w	8006c12 <__malloc_unlock>
 8006a3e:	42a3      	cmp	r3, r4
 8006a40:	d90c      	bls.n	8006a5c <_free_r+0x4c>
 8006a42:	6821      	ldr	r1, [r4, #0]
 8006a44:	1862      	adds	r2, r4, r1
 8006a46:	4293      	cmp	r3, r2
 8006a48:	bf04      	itt	eq
 8006a4a:	681a      	ldreq	r2, [r3, #0]
 8006a4c:	685b      	ldreq	r3, [r3, #4]
 8006a4e:	6063      	str	r3, [r4, #4]
 8006a50:	bf04      	itt	eq
 8006a52:	1852      	addeq	r2, r2, r1
 8006a54:	6022      	streq	r2, [r4, #0]
 8006a56:	6004      	str	r4, [r0, #0]
 8006a58:	e7ec      	b.n	8006a34 <_free_r+0x24>
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	b10a      	cbz	r2, 8006a64 <_free_r+0x54>
 8006a60:	42a2      	cmp	r2, r4
 8006a62:	d9fa      	bls.n	8006a5a <_free_r+0x4a>
 8006a64:	6819      	ldr	r1, [r3, #0]
 8006a66:	1858      	adds	r0, r3, r1
 8006a68:	42a0      	cmp	r0, r4
 8006a6a:	d10b      	bne.n	8006a84 <_free_r+0x74>
 8006a6c:	6820      	ldr	r0, [r4, #0]
 8006a6e:	4401      	add	r1, r0
 8006a70:	1858      	adds	r0, r3, r1
 8006a72:	4282      	cmp	r2, r0
 8006a74:	6019      	str	r1, [r3, #0]
 8006a76:	d1dd      	bne.n	8006a34 <_free_r+0x24>
 8006a78:	6810      	ldr	r0, [r2, #0]
 8006a7a:	6852      	ldr	r2, [r2, #4]
 8006a7c:	605a      	str	r2, [r3, #4]
 8006a7e:	4401      	add	r1, r0
 8006a80:	6019      	str	r1, [r3, #0]
 8006a82:	e7d7      	b.n	8006a34 <_free_r+0x24>
 8006a84:	d902      	bls.n	8006a8c <_free_r+0x7c>
 8006a86:	230c      	movs	r3, #12
 8006a88:	602b      	str	r3, [r5, #0]
 8006a8a:	e7d3      	b.n	8006a34 <_free_r+0x24>
 8006a8c:	6820      	ldr	r0, [r4, #0]
 8006a8e:	1821      	adds	r1, r4, r0
 8006a90:	428a      	cmp	r2, r1
 8006a92:	bf04      	itt	eq
 8006a94:	6811      	ldreq	r1, [r2, #0]
 8006a96:	6852      	ldreq	r2, [r2, #4]
 8006a98:	6062      	str	r2, [r4, #4]
 8006a9a:	bf04      	itt	eq
 8006a9c:	1809      	addeq	r1, r1, r0
 8006a9e:	6021      	streq	r1, [r4, #0]
 8006aa0:	605c      	str	r4, [r3, #4]
 8006aa2:	e7c7      	b.n	8006a34 <_free_r+0x24>
 8006aa4:	bd38      	pop	{r3, r4, r5, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20004098 	.word	0x20004098

08006aac <_malloc_r>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	1ccd      	adds	r5, r1, #3
 8006ab0:	f025 0503 	bic.w	r5, r5, #3
 8006ab4:	3508      	adds	r5, #8
 8006ab6:	2d0c      	cmp	r5, #12
 8006ab8:	bf38      	it	cc
 8006aba:	250c      	movcc	r5, #12
 8006abc:	2d00      	cmp	r5, #0
 8006abe:	4606      	mov	r6, r0
 8006ac0:	db01      	blt.n	8006ac6 <_malloc_r+0x1a>
 8006ac2:	42a9      	cmp	r1, r5
 8006ac4:	d903      	bls.n	8006ace <_malloc_r+0x22>
 8006ac6:	230c      	movs	r3, #12
 8006ac8:	6033      	str	r3, [r6, #0]
 8006aca:	2000      	movs	r0, #0
 8006acc:	bd70      	pop	{r4, r5, r6, pc}
 8006ace:	f000 f89f 	bl	8006c10 <__malloc_lock>
 8006ad2:	4a23      	ldr	r2, [pc, #140]	; (8006b60 <_malloc_r+0xb4>)
 8006ad4:	6814      	ldr	r4, [r2, #0]
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	b991      	cbnz	r1, 8006b00 <_malloc_r+0x54>
 8006ada:	4c22      	ldr	r4, [pc, #136]	; (8006b64 <_malloc_r+0xb8>)
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	b91b      	cbnz	r3, 8006ae8 <_malloc_r+0x3c>
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	f000 f841 	bl	8006b68 <_sbrk_r>
 8006ae6:	6020      	str	r0, [r4, #0]
 8006ae8:	4629      	mov	r1, r5
 8006aea:	4630      	mov	r0, r6
 8006aec:	f000 f83c 	bl	8006b68 <_sbrk_r>
 8006af0:	1c43      	adds	r3, r0, #1
 8006af2:	d126      	bne.n	8006b42 <_malloc_r+0x96>
 8006af4:	230c      	movs	r3, #12
 8006af6:	6033      	str	r3, [r6, #0]
 8006af8:	4630      	mov	r0, r6
 8006afa:	f000 f88a 	bl	8006c12 <__malloc_unlock>
 8006afe:	e7e4      	b.n	8006aca <_malloc_r+0x1e>
 8006b00:	680b      	ldr	r3, [r1, #0]
 8006b02:	1b5b      	subs	r3, r3, r5
 8006b04:	d41a      	bmi.n	8006b3c <_malloc_r+0x90>
 8006b06:	2b0b      	cmp	r3, #11
 8006b08:	d90f      	bls.n	8006b2a <_malloc_r+0x7e>
 8006b0a:	600b      	str	r3, [r1, #0]
 8006b0c:	50cd      	str	r5, [r1, r3]
 8006b0e:	18cc      	adds	r4, r1, r3
 8006b10:	4630      	mov	r0, r6
 8006b12:	f000 f87e 	bl	8006c12 <__malloc_unlock>
 8006b16:	f104 000b 	add.w	r0, r4, #11
 8006b1a:	1d23      	adds	r3, r4, #4
 8006b1c:	f020 0007 	bic.w	r0, r0, #7
 8006b20:	1ac3      	subs	r3, r0, r3
 8006b22:	d01b      	beq.n	8006b5c <_malloc_r+0xb0>
 8006b24:	425a      	negs	r2, r3
 8006b26:	50e2      	str	r2, [r4, r3]
 8006b28:	bd70      	pop	{r4, r5, r6, pc}
 8006b2a:	428c      	cmp	r4, r1
 8006b2c:	bf0d      	iteet	eq
 8006b2e:	6863      	ldreq	r3, [r4, #4]
 8006b30:	684b      	ldrne	r3, [r1, #4]
 8006b32:	6063      	strne	r3, [r4, #4]
 8006b34:	6013      	streq	r3, [r2, #0]
 8006b36:	bf18      	it	ne
 8006b38:	460c      	movne	r4, r1
 8006b3a:	e7e9      	b.n	8006b10 <_malloc_r+0x64>
 8006b3c:	460c      	mov	r4, r1
 8006b3e:	6849      	ldr	r1, [r1, #4]
 8006b40:	e7ca      	b.n	8006ad8 <_malloc_r+0x2c>
 8006b42:	1cc4      	adds	r4, r0, #3
 8006b44:	f024 0403 	bic.w	r4, r4, #3
 8006b48:	42a0      	cmp	r0, r4
 8006b4a:	d005      	beq.n	8006b58 <_malloc_r+0xac>
 8006b4c:	1a21      	subs	r1, r4, r0
 8006b4e:	4630      	mov	r0, r6
 8006b50:	f000 f80a 	bl	8006b68 <_sbrk_r>
 8006b54:	3001      	adds	r0, #1
 8006b56:	d0cd      	beq.n	8006af4 <_malloc_r+0x48>
 8006b58:	6025      	str	r5, [r4, #0]
 8006b5a:	e7d9      	b.n	8006b10 <_malloc_r+0x64>
 8006b5c:	bd70      	pop	{r4, r5, r6, pc}
 8006b5e:	bf00      	nop
 8006b60:	20004098 	.word	0x20004098
 8006b64:	2000409c 	.word	0x2000409c

08006b68 <_sbrk_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4c06      	ldr	r4, [pc, #24]	; (8006b84 <_sbrk_r+0x1c>)
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	4605      	mov	r5, r0
 8006b70:	4608      	mov	r0, r1
 8006b72:	6023      	str	r3, [r4, #0]
 8006b74:	f000 f85e 	bl	8006c34 <_sbrk>
 8006b78:	1c43      	adds	r3, r0, #1
 8006b7a:	d102      	bne.n	8006b82 <_sbrk_r+0x1a>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	b103      	cbz	r3, 8006b82 <_sbrk_r+0x1a>
 8006b80:	602b      	str	r3, [r5, #0]
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	20004bdc 	.word	0x20004bdc

08006b88 <_raise_r>:
 8006b88:	291f      	cmp	r1, #31
 8006b8a:	b538      	push	{r3, r4, r5, lr}
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	460d      	mov	r5, r1
 8006b90:	d904      	bls.n	8006b9c <_raise_r+0x14>
 8006b92:	2316      	movs	r3, #22
 8006b94:	6003      	str	r3, [r0, #0]
 8006b96:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b9e:	b112      	cbz	r2, 8006ba6 <_raise_r+0x1e>
 8006ba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ba4:	b94b      	cbnz	r3, 8006bba <_raise_r+0x32>
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f000 f830 	bl	8006c0c <_getpid_r>
 8006bac:	462a      	mov	r2, r5
 8006bae:	4601      	mov	r1, r0
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bb6:	f000 b817 	b.w	8006be8 <_kill_r>
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d00a      	beq.n	8006bd4 <_raise_r+0x4c>
 8006bbe:	1c59      	adds	r1, r3, #1
 8006bc0:	d103      	bne.n	8006bca <_raise_r+0x42>
 8006bc2:	2316      	movs	r3, #22
 8006bc4:	6003      	str	r3, [r0, #0]
 8006bc6:	2001      	movs	r0, #1
 8006bc8:	bd38      	pop	{r3, r4, r5, pc}
 8006bca:	2400      	movs	r4, #0
 8006bcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	4798      	blx	r3
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}

08006bd8 <raise>:
 8006bd8:	4b02      	ldr	r3, [pc, #8]	; (8006be4 <raise+0xc>)
 8006bda:	4601      	mov	r1, r0
 8006bdc:	6818      	ldr	r0, [r3, #0]
 8006bde:	f7ff bfd3 	b.w	8006b88 <_raise_r>
 8006be2:	bf00      	nop
 8006be4:	200000e0 	.word	0x200000e0

08006be8 <_kill_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	4c07      	ldr	r4, [pc, #28]	; (8006c08 <_kill_r+0x20>)
 8006bec:	2300      	movs	r3, #0
 8006bee:	4605      	mov	r5, r0
 8006bf0:	4608      	mov	r0, r1
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	f000 f815 	bl	8006c24 <_kill>
 8006bfa:	1c43      	adds	r3, r0, #1
 8006bfc:	d102      	bne.n	8006c04 <_kill_r+0x1c>
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	b103      	cbz	r3, 8006c04 <_kill_r+0x1c>
 8006c02:	602b      	str	r3, [r5, #0]
 8006c04:	bd38      	pop	{r3, r4, r5, pc}
 8006c06:	bf00      	nop
 8006c08:	20004bdc 	.word	0x20004bdc

08006c0c <_getpid_r>:
 8006c0c:	f000 b802 	b.w	8006c14 <_getpid>

08006c10 <__malloc_lock>:
 8006c10:	4770      	bx	lr

08006c12 <__malloc_unlock>:
 8006c12:	4770      	bx	lr

08006c14 <_getpid>:
 8006c14:	4b02      	ldr	r3, [pc, #8]	; (8006c20 <_getpid+0xc>)
 8006c16:	2258      	movs	r2, #88	; 0x58
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1e:	4770      	bx	lr
 8006c20:	20004bdc 	.word	0x20004bdc

08006c24 <_kill>:
 8006c24:	4b02      	ldr	r3, [pc, #8]	; (8006c30 <_kill+0xc>)
 8006c26:	2258      	movs	r2, #88	; 0x58
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2e:	4770      	bx	lr
 8006c30:	20004bdc 	.word	0x20004bdc

08006c34 <_sbrk>:
 8006c34:	4b04      	ldr	r3, [pc, #16]	; (8006c48 <_sbrk+0x14>)
 8006c36:	6819      	ldr	r1, [r3, #0]
 8006c38:	4602      	mov	r2, r0
 8006c3a:	b909      	cbnz	r1, 8006c40 <_sbrk+0xc>
 8006c3c:	4903      	ldr	r1, [pc, #12]	; (8006c4c <_sbrk+0x18>)
 8006c3e:	6019      	str	r1, [r3, #0]
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	4402      	add	r2, r0
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	4770      	bx	lr
 8006c48:	200040a0 	.word	0x200040a0
 8006c4c:	20004be0 	.word	0x20004be0

08006c50 <_exit>:
 8006c50:	e7fe      	b.n	8006c50 <_exit>
	...

08006c54 <_init>:
 8006c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c56:	bf00      	nop
 8006c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5a:	bc08      	pop	{r3}
 8006c5c:	469e      	mov	lr, r3
 8006c5e:	4770      	bx	lr

08006c60 <_fini>:
 8006c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c62:	bf00      	nop
 8006c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c66:	bc08      	pop	{r3}
 8006c68:	469e      	mov	lr, r3
 8006c6a:	4770      	bx	lr
